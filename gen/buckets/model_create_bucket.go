/*
Grail - Storage Management

Here you can find the  * The Dynatrace Bucket Management API for Grail. Get more information about   use cases and examples from   the <a href=\"https://docs.dynatrace.com/docs/shortlink/assign-bucket-table-permissions\">   Dynatrace Documentation</a>

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buckets

import (
	"encoding/json"
)

// checks if the CreateBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBucket{}

// CreateBucket struct for CreateBucket
type CreateBucket struct {
	// The unique identifier of the bucket within the tenant.
	BucketName string `json:"bucketName"`
	// Name of the table the bucket is assigned to.
	Table string `json:"table"`
	// Descriptive name of the bucket. No restriction regarding unique naming or valid characters.
	DisplayName *string `json:"displayName,omitempty"`
	// The retention period in days of the data in the bucket.
	RetentionDays int32 `json:"retentionDays"`
	// Interval of aggregated metric data. Only applies to metric buckets.
	MetricInterval *string `json:"metricInterval,omitempty"`
}

// NewCreateBucket instantiates a new CreateBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBucket(bucketName string, table string, retentionDays int32) *CreateBucket {
	this := CreateBucket{}
	this.BucketName = bucketName
	this.Table = table
	this.RetentionDays = retentionDays
	return &this
}

// NewCreateBucketWithDefaults instantiates a new CreateBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBucketWithDefaults() *CreateBucket {
	this := CreateBucket{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *CreateBucket) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *CreateBucket) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *CreateBucket) SetBucketName(v string) {
	o.BucketName = v
}

// GetTable returns the Table field value
func (o *CreateBucket) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *CreateBucket) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *CreateBucket) SetTable(v string) {
	o.Table = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CreateBucket) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBucket) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateBucket) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CreateBucket) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetRetentionDays returns the RetentionDays field value
func (o *CreateBucket) GetRetentionDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetentionDays
}

// GetRetentionDaysOk returns a tuple with the RetentionDays field value
// and a boolean to check if the value has been set.
func (o *CreateBucket) GetRetentionDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetentionDays, true
}

// SetRetentionDays sets field value
func (o *CreateBucket) SetRetentionDays(v int32) {
	o.RetentionDays = v
}

// GetMetricInterval returns the MetricInterval field value if set, zero value otherwise.
func (o *CreateBucket) GetMetricInterval() string {
	if o == nil || IsNil(o.MetricInterval) {
		var ret string
		return ret
	}
	return *o.MetricInterval
}

// GetMetricIntervalOk returns a tuple with the MetricInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBucket) GetMetricIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.MetricInterval) {
		return nil, false
	}
	return o.MetricInterval, true
}

// HasMetricInterval returns a boolean if a field has been set.
func (o *CreateBucket) HasMetricInterval() bool {
	if o != nil && !IsNil(o.MetricInterval) {
		return true
	}

	return false
}

// SetMetricInterval gets a reference to the given string and assigns it to the MetricInterval field.
func (o *CreateBucket) SetMetricInterval(v string) {
	o.MetricInterval = &v
}

func (o CreateBucket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketName"] = o.BucketName
	toSerialize["table"] = o.Table
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["retentionDays"] = o.RetentionDays
	if !IsNil(o.MetricInterval) {
		toSerialize["metricInterval"] = o.MetricInterval
	}
	return toSerialize, nil
}

type NullableCreateBucket struct {
	value *CreateBucket
	isSet bool
}

func (v NullableCreateBucket) Get() *CreateBucket {
	return v.value
}

func (v *NullableCreateBucket) Set(val *CreateBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBucket(val *CreateBucket) *NullableCreateBucket {
	return &NullableCreateBucket{value: val, isSet: true}
}

func (v NullableCreateBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
