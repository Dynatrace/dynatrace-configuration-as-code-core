/*
Grail - Storage Management

Here you can find the  * The Dynatrace Bucket Management API for Grail. Get more information about   use cases and examples from   the <a href=\"https://docs.dynatrace.com/docs/shortlink/assign-bucket-table-permissions\">   Dynatrace Documentation</a>

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buckets

import (
	"encoding/json"
)

// checks if the UpdateBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBucket{}

// UpdateBucket struct for UpdateBucket
type UpdateBucket struct {
	// The unique identifier of the bucket within the tenant.
	BucketName string `json:"bucketName"`
	// Name of the table the bucket is assigned to.
	Table string `json:"table"`
	// Descriptive name of the bucket. No restriction regarding unique naming or valid characters.
	DisplayName *string `json:"displayName,omitempty"`
	// The current status of the bucket, depending on bucket lifecycle.
	Status string `json:"status"`
	// The retention period in days of the data in the bucket. Important note: the new retention days will also apply to existing records. Shortening the retention period could result in data deletion!
	RetentionDays int32 `json:"retentionDays"`
	// Metric interval for metric buckets. Will be ignored for other buckets.
	MetricInterval *string `json:"metricInterval,omitempty"`
	// Optimistic locking version. Update requests define with this on which version the data updated is based on. This must match with the version stored, otherwise the update will fail due to concurrent modification.
	Version int32 `json:"version"`
}

// NewUpdateBucket instantiates a new UpdateBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBucket(bucketName string, table string, status string, retentionDays int32, version int32) *UpdateBucket {
	this := UpdateBucket{}
	this.BucketName = bucketName
	this.Table = table
	this.Status = status
	this.RetentionDays = retentionDays
	this.Version = version
	return &this
}

// NewUpdateBucketWithDefaults instantiates a new UpdateBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBucketWithDefaults() *UpdateBucket {
	this := UpdateBucket{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *UpdateBucket) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *UpdateBucket) SetBucketName(v string) {
	o.BucketName = v
}

// GetTable returns the Table field value
func (o *UpdateBucket) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *UpdateBucket) SetTable(v string) {
	o.Table = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateBucket) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateBucket) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateBucket) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetStatus returns the Status field value
func (o *UpdateBucket) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdateBucket) SetStatus(v string) {
	o.Status = v
}

// GetRetentionDays returns the RetentionDays field value
func (o *UpdateBucket) GetRetentionDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetentionDays
}

// GetRetentionDaysOk returns a tuple with the RetentionDays field value
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetRetentionDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetentionDays, true
}

// SetRetentionDays sets field value
func (o *UpdateBucket) SetRetentionDays(v int32) {
	o.RetentionDays = v
}

// GetMetricInterval returns the MetricInterval field value if set, zero value otherwise.
func (o *UpdateBucket) GetMetricInterval() string {
	if o == nil || IsNil(o.MetricInterval) {
		var ret string
		return ret
	}
	return *o.MetricInterval
}

// GetMetricIntervalOk returns a tuple with the MetricInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetMetricIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.MetricInterval) {
		return nil, false
	}
	return o.MetricInterval, true
}

// HasMetricInterval returns a boolean if a field has been set.
func (o *UpdateBucket) HasMetricInterval() bool {
	if o != nil && !IsNil(o.MetricInterval) {
		return true
	}

	return false
}

// SetMetricInterval gets a reference to the given string and assigns it to the MetricInterval field.
func (o *UpdateBucket) SetMetricInterval(v string) {
	o.MetricInterval = &v
}

// GetVersion returns the Version field value
func (o *UpdateBucket) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *UpdateBucket) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *UpdateBucket) SetVersion(v int32) {
	o.Version = v
}

func (o UpdateBucket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketName"] = o.BucketName
	toSerialize["table"] = o.Table
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["status"] = o.Status
	toSerialize["retentionDays"] = o.RetentionDays
	if !IsNil(o.MetricInterval) {
		toSerialize["metricInterval"] = o.MetricInterval
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableUpdateBucket struct {
	value *UpdateBucket
	isSet bool
}

func (v NullableUpdateBucket) Get() *UpdateBucket {
	return v.value
}

func (v *NullableUpdateBucket) Set(val *UpdateBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBucket(val *UpdateBucket) *NullableUpdateBucket {
	return &NullableUpdateBucket{value: val, isSet: true}
}

func (v NullableUpdateBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
