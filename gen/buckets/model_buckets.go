/*
Grail - Storage Management

Here you can find the  * The Dynatrace Bucket Management API for Grail. Get more information about   use cases and examples from   the <a href=\"https://docs.dynatrace.com/docs/shortlink/assign-bucket-table-permissions\">   Dynatrace Documentation</a>

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buckets

import (
	"encoding/json"
)

// checks if the Buckets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Buckets{}

// Buckets struct for Buckets
type Buckets struct {
	Buckets []Bucket `json:"buckets"`
}

// NewBuckets instantiates a new Buckets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuckets(buckets []Bucket) *Buckets {
	this := Buckets{}
	this.Buckets = buckets
	return &this
}

// NewBucketsWithDefaults instantiates a new Buckets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketsWithDefaults() *Buckets {
	this := Buckets{}
	return &this
}

// GetBuckets returns the Buckets field value
func (o *Buckets) GetBuckets() []Bucket {
	if o == nil {
		var ret []Bucket
		return ret
	}

	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value
// and a boolean to check if the value has been set.
func (o *Buckets) GetBucketsOk() ([]Bucket, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buckets, true
}

// SetBuckets sets field value
func (o *Buckets) SetBuckets(v []Bucket) {
	o.Buckets = v
}

func (o Buckets) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Buckets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buckets"] = o.Buckets
	return toSerialize, nil
}

type NullableBuckets struct {
	value *Buckets
	isSet bool
}

func (v NullableBuckets) Get() *Buckets {
	return v.value
}

func (v *NullableBuckets) Set(val *Buckets) {
	v.value = val
	v.isSet = true
}

func (v NullableBuckets) IsSet() bool {
	return v.isSet
}

func (v *NullableBuckets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuckets(val *Buckets) *NullableBuckets {
	return &NullableBuckets{value: val, isSet: true}
}

func (v NullableBuckets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuckets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
