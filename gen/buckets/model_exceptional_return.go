/*
Grail - Storage Management

Here you can find the  * The Dynatrace Bucket Management API for Grail. Get more information about   use cases and examples from   the <a href=\"https://docs.dynatrace.com/docs/shortlink/assign-bucket-table-permissions\">   Dynatrace Documentation</a>

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buckets

import (
	"encoding/json"
)

// checks if the ExceptionalReturn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExceptionalReturn{}

// ExceptionalReturn struct for ExceptionalReturn
type ExceptionalReturn struct {
	Message      *string      `json:"message,omitempty"`
	ErrorDetails *[]ErrorInfo `json:"errorDetails,omitempty"`
	Code         *int32       `json:"code,omitempty"`
}

// NewExceptionalReturn instantiates a new ExceptionalReturn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExceptionalReturn() *ExceptionalReturn {
	this := ExceptionalReturn{}
	return &this
}

// NewExceptionalReturnWithDefaults instantiates a new ExceptionalReturn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExceptionalReturnWithDefaults() *ExceptionalReturn {
	this := ExceptionalReturn{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ExceptionalReturn) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExceptionalReturn) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ExceptionalReturn) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ExceptionalReturn) SetMessage(v string) {
	o.Message = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *ExceptionalReturn) GetErrorDetails() []ErrorInfo {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret []ErrorInfo
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExceptionalReturn) GetErrorDetailsOk() (*[]ErrorInfo, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *ExceptionalReturn) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given []ErrorInfo and assigns it to the ErrorDetails field.
func (o *ExceptionalReturn) SetErrorDetails(v []ErrorInfo) {
	o.ErrorDetails = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ExceptionalReturn) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExceptionalReturn) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ExceptionalReturn) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *ExceptionalReturn) SetCode(v int32) {
	o.Code = &v
}

func (o ExceptionalReturn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExceptionalReturn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableExceptionalReturn struct {
	value *ExceptionalReturn
	isSet bool
}

func (v NullableExceptionalReturn) Get() *ExceptionalReturn {
	return v.value
}

func (v *NullableExceptionalReturn) Set(val *ExceptionalReturn) {
	v.value = val
	v.isSet = true
}

func (v NullableExceptionalReturn) IsSet() bool {
	return v.isSet
}

func (v *NullableExceptionalReturn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExceptionalReturn(val *ExceptionalReturn) *NullableExceptionalReturn {
	return &NullableExceptionalReturn{value: val, isSet: true}
}

func (v NullableExceptionalReturn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExceptionalReturn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
