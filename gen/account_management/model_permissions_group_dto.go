/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the PermissionsGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionsGroupDto{}

// PermissionsGroupDto struct for PermissionsGroupDto
type PermissionsGroupDto struct {
	// The UUID of the user group.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the user group.
	Name string `json:"name"`
	// A short description of the user group.
	Description *string `json:"description,omitempty"`
	// A list of values associating this group with the corresponding claim from an identity provider.
	FederatedAttributeValues []string `json:"federatedAttributeValues,omitempty"`
	// The identity provider from which the group originates.
	Owner string `json:"owner"`
	// The date and time of the group creation in `2021-05-01T15:11:00Z` format.
	CreatedAt string `json:"createdAt"`
	// The date and time of the most recent group modification in `2021-05-01T15:11:00Z` format.
	UpdatedAt string `json:"updatedAt"`
	// A list of permissions assigned to the group.
	Permissions []PermissionsDto `json:"permissions"`
}

// NewPermissionsGroupDto instantiates a new PermissionsGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionsGroupDto(name string, owner string, createdAt string, updatedAt string, permissions []PermissionsDto) *PermissionsGroupDto {
	this := PermissionsGroupDto{}
	this.Name = name
	this.Owner = owner
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Permissions = permissions
	return &this
}

// NewPermissionsGroupDtoWithDefaults instantiates a new PermissionsGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsGroupDtoWithDefaults() *PermissionsGroupDto {
	this := PermissionsGroupDto{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PermissionsGroupDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PermissionsGroupDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PermissionsGroupDto) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value
func (o *PermissionsGroupDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PermissionsGroupDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PermissionsGroupDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PermissionsGroupDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PermissionsGroupDto) SetDescription(v string) {
	o.Description = &v
}

// GetFederatedAttributeValues returns the FederatedAttributeValues field value if set, zero value otherwise.
func (o *PermissionsGroupDto) GetFederatedAttributeValues() []string {
	if o == nil || IsNil(o.FederatedAttributeValues) {
		var ret []string
		return ret
	}
	return o.FederatedAttributeValues
}

// GetFederatedAttributeValuesOk returns a tuple with the FederatedAttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetFederatedAttributeValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.FederatedAttributeValues) {
		return nil, false
	}
	return o.FederatedAttributeValues, true
}

// HasFederatedAttributeValues returns a boolean if a field has been set.
func (o *PermissionsGroupDto) HasFederatedAttributeValues() bool {
	if o != nil && !IsNil(o.FederatedAttributeValues) {
		return true
	}

	return false
}

// SetFederatedAttributeValues gets a reference to the given []string and assigns it to the FederatedAttributeValues field.
func (o *PermissionsGroupDto) SetFederatedAttributeValues(v []string) {
	o.FederatedAttributeValues = v
}

// GetOwner returns the Owner field value
func (o *PermissionsGroupDto) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *PermissionsGroupDto) SetOwner(v string) {
	o.Owner = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PermissionsGroupDto) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PermissionsGroupDto) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PermissionsGroupDto) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PermissionsGroupDto) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetPermissions returns the Permissions field value
func (o *PermissionsGroupDto) GetPermissions() []PermissionsDto {
	if o == nil {
		var ret []PermissionsDto
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *PermissionsGroupDto) GetPermissionsOk() ([]PermissionsDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *PermissionsGroupDto) SetPermissions(v []PermissionsDto) {
	o.Permissions = v
}

func (o PermissionsGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionsGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FederatedAttributeValues) {
		toSerialize["federatedAttributeValues"] = o.FederatedAttributeValues
	}
	toSerialize["owner"] = o.Owner
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["permissions"] = o.Permissions
	return toSerialize, nil
}

type NullablePermissionsGroupDto struct {
	value *PermissionsGroupDto
	isSet bool
}

func (v NullablePermissionsGroupDto) Get() *PermissionsGroupDto {
	return v.value
}

func (v *NullablePermissionsGroupDto) Set(val *PermissionsGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsGroupDto(val *PermissionsGroupDto) *NullablePermissionsGroupDto {
	return &NullablePermissionsGroupDto{value: val, isSet: true}
}

func (v NullablePermissionsGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
