/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the SubscriptionCurrentPeriodDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCurrentPeriodDto{}

// SubscriptionCurrentPeriodDto struct for SubscriptionCurrentPeriodDto
type SubscriptionCurrentPeriodDto struct {
	// The current period start date in `2021-05-01` format.
	StartTime string `json:"startTime"`
	// The current period end date in `2021-05-01` format.
	EndTime string `json:"endTime"`
	// Days remaining in the current period
	DaysRemaining float32 `json:"daysRemaining"`
}

// NewSubscriptionCurrentPeriodDto instantiates a new SubscriptionCurrentPeriodDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCurrentPeriodDto(startTime string, endTime string, daysRemaining float32) *SubscriptionCurrentPeriodDto {
	this := SubscriptionCurrentPeriodDto{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.DaysRemaining = daysRemaining
	return &this
}

// NewSubscriptionCurrentPeriodDtoWithDefaults instantiates a new SubscriptionCurrentPeriodDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCurrentPeriodDtoWithDefaults() *SubscriptionCurrentPeriodDto {
	this := SubscriptionCurrentPeriodDto{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *SubscriptionCurrentPeriodDto) GetStartTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCurrentPeriodDto) GetStartTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *SubscriptionCurrentPeriodDto) SetStartTime(v string) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *SubscriptionCurrentPeriodDto) GetEndTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCurrentPeriodDto) GetEndTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *SubscriptionCurrentPeriodDto) SetEndTime(v string) {
	o.EndTime = v
}

// GetDaysRemaining returns the DaysRemaining field value
func (o *SubscriptionCurrentPeriodDto) GetDaysRemaining() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DaysRemaining
}

// GetDaysRemainingOk returns a tuple with the DaysRemaining field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCurrentPeriodDto) GetDaysRemainingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DaysRemaining, true
}

// SetDaysRemaining sets field value
func (o *SubscriptionCurrentPeriodDto) SetDaysRemaining(v float32) {
	o.DaysRemaining = v
}

func (o SubscriptionCurrentPeriodDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionCurrentPeriodDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["daysRemaining"] = o.DaysRemaining
	return toSerialize, nil
}

type NullableSubscriptionCurrentPeriodDto struct {
	value *SubscriptionCurrentPeriodDto
	isSet bool
}

func (v NullableSubscriptionCurrentPeriodDto) Get() *SubscriptionCurrentPeriodDto {
	return v.value
}

func (v *NullableSubscriptionCurrentPeriodDto) Set(val *SubscriptionCurrentPeriodDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCurrentPeriodDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCurrentPeriodDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCurrentPeriodDto(val *SubscriptionCurrentPeriodDto) *NullableSubscriptionCurrentPeriodDto {
	return &NullableSubscriptionCurrentPeriodDto{value: val, isSet: true}
}

func (v NullableSubscriptionCurrentPeriodDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCurrentPeriodDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
