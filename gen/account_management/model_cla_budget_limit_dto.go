/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the ClaBudgetLimitDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaBudgetLimitDto{}

// ClaBudgetLimitDto struct for ClaBudgetLimitDto
type ClaBudgetLimitDto struct {
	// The limit for the cluster or environment. Consumption will be restricted to this value.
	Limit                float32 `json:"limit"`
	AdditionalProperties map[string]interface{}
}

type _ClaBudgetLimitDto ClaBudgetLimitDto

// NewClaBudgetLimitDto instantiates a new ClaBudgetLimitDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaBudgetLimitDto(limit float32) *ClaBudgetLimitDto {
	this := ClaBudgetLimitDto{}
	this.Limit = limit
	return &this
}

// NewClaBudgetLimitDtoWithDefaults instantiates a new ClaBudgetLimitDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaBudgetLimitDtoWithDefaults() *ClaBudgetLimitDto {
	this := ClaBudgetLimitDto{}
	return &this
}

// GetLimit returns the Limit field value
func (o *ClaBudgetLimitDto) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitDto) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ClaBudgetLimitDto) SetLimit(v float32) {
	o.Limit = v
}

func (o ClaBudgetLimitDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaBudgetLimitDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClaBudgetLimitDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaBudgetLimitDto := _ClaBudgetLimitDto{}

	err = json.Unmarshal(data, &varClaBudgetLimitDto)

	if err != nil {
		return err
	}

	*o = ClaBudgetLimitDto(varClaBudgetLimitDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "limit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClaBudgetLimitDto struct {
	value *ClaBudgetLimitDto
	isSet bool
}

func (v NullableClaBudgetLimitDto) Get() *ClaBudgetLimitDto {
	return v.value
}

func (v *NullableClaBudgetLimitDto) Set(val *ClaBudgetLimitDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClaBudgetLimitDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClaBudgetLimitDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaBudgetLimitDto(val *ClaBudgetLimitDto) *NullableClaBudgetLimitDto {
	return &NullableClaBudgetLimitDto{value: val, isSet: true}
}

func (v NullableClaBudgetLimitDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaBudgetLimitDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
