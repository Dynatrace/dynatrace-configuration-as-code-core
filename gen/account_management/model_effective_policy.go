/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the EffectivePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EffectivePolicy{}

// EffectivePolicy struct for EffectivePolicy
type EffectivePolicy struct {
	// The ID of the policy.
	Uuid string `json:"uuid"`
	// The display name of the policy.
	Name string `json:"name"`
	// The the statement query of the policy.
	StatementQuery string `json:"statementQuery"`
	// The type of the level to which the policy applies.
	LevelType string `json:"levelType"`
	// The ID of the level to which the policy applies.
	LevelId string `json:"levelId"`
}

// NewEffectivePolicy instantiates a new EffectivePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEffectivePolicy(uuid string, name string, statementQuery string, levelType string, levelId string) *EffectivePolicy {
	this := EffectivePolicy{}
	this.Uuid = uuid
	this.Name = name
	this.StatementQuery = statementQuery
	this.LevelType = levelType
	this.LevelId = levelId
	return &this
}

// NewEffectivePolicyWithDefaults instantiates a new EffectivePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEffectivePolicyWithDefaults() *EffectivePolicy {
	this := EffectivePolicy{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *EffectivePolicy) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *EffectivePolicy) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *EffectivePolicy) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *EffectivePolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EffectivePolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EffectivePolicy) SetName(v string) {
	o.Name = v
}

// GetStatementQuery returns the StatementQuery field value
func (o *EffectivePolicy) GetStatementQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatementQuery
}

// GetStatementQueryOk returns a tuple with the StatementQuery field value
// and a boolean to check if the value has been set.
func (o *EffectivePolicy) GetStatementQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatementQuery, true
}

// SetStatementQuery sets field value
func (o *EffectivePolicy) SetStatementQuery(v string) {
	o.StatementQuery = v
}

// GetLevelType returns the LevelType field value
func (o *EffectivePolicy) GetLevelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LevelType
}

// GetLevelTypeOk returns a tuple with the LevelType field value
// and a boolean to check if the value has been set.
func (o *EffectivePolicy) GetLevelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LevelType, true
}

// SetLevelType sets field value
func (o *EffectivePolicy) SetLevelType(v string) {
	o.LevelType = v
}

// GetLevelId returns the LevelId field value
func (o *EffectivePolicy) GetLevelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LevelId
}

// GetLevelIdOk returns a tuple with the LevelId field value
// and a boolean to check if the value has been set.
func (o *EffectivePolicy) GetLevelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LevelId, true
}

// SetLevelId sets field value
func (o *EffectivePolicy) SetLevelId(v string) {
	o.LevelId = v
}

func (o EffectivePolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EffectivePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	toSerialize["statementQuery"] = o.StatementQuery
	toSerialize["levelType"] = o.LevelType
	toSerialize["levelId"] = o.LevelId
	return toSerialize, nil
}

type NullableEffectivePolicy struct {
	value *EffectivePolicy
	isSet bool
}

func (v NullableEffectivePolicy) Get() *EffectivePolicy {
	return v.value
}

func (v *NullableEffectivePolicy) Set(val *EffectivePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableEffectivePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableEffectivePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEffectivePolicy(val *EffectivePolicy) *NullableEffectivePolicy {
	return &NullableEffectivePolicy{value: val, isSet: true}
}

func (v NullableEffectivePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEffectivePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
