/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the ClusterDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterDto{}

// ClusterDto struct for ClusterDto
type ClusterDto struct {
	// The UUID of the cluster.
	ClusterId string `json:"clusterId"`
}

// NewClusterDto instantiates a new ClusterDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterDto(clusterId string) *ClusterDto {
	this := ClusterDto{}
	this.ClusterId = clusterId
	return &this
}

// NewClusterDtoWithDefaults instantiates a new ClusterDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterDtoWithDefaults() *ClusterDto {
	this := ClusterDto{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *ClusterDto) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ClusterDto) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ClusterDto) SetClusterId(v string) {
	o.ClusterId = v
}

func (o ClusterDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterId"] = o.ClusterId
	return toSerialize, nil
}

type NullableClusterDto struct {
	value *ClusterDto
	isSet bool
}

func (v NullableClusterDto) Get() *ClusterDto {
	return v.value
}

func (v *NullableClusterDto) Set(val *ClusterDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterDto(val *ClusterDto) *NullableClusterDto {
	return &NullableClusterDto{value: val, isSet: true}
}

func (v NullableClusterDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
