/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the FieldValuesRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldValuesRequestDto{}

// FieldValuesRequestDto struct for FieldValuesRequestDto
type FieldValuesRequestDto struct {
	// The requested values.
	Values               []FieldValueDto `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _FieldValuesRequestDto FieldValuesRequestDto

// NewFieldValuesRequestDto instantiates a new FieldValuesRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldValuesRequestDto(values []FieldValueDto) *FieldValuesRequestDto {
	this := FieldValuesRequestDto{}
	this.Values = values
	return &this
}

// NewFieldValuesRequestDtoWithDefaults instantiates a new FieldValuesRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldValuesRequestDtoWithDefaults() *FieldValuesRequestDto {
	this := FieldValuesRequestDto{}
	return &this
}

// GetValues returns the Values field value
func (o *FieldValuesRequestDto) GetValues() []FieldValueDto {
	if o == nil {
		var ret []FieldValueDto
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *FieldValuesRequestDto) GetValuesOk() ([]FieldValueDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *FieldValuesRequestDto) SetValues(v []FieldValueDto) {
	o.Values = v
}

func (o FieldValuesRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldValuesRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FieldValuesRequestDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFieldValuesRequestDto := _FieldValuesRequestDto{}

	err = json.Unmarshal(data, &varFieldValuesRequestDto)

	if err != nil {
		return err
	}

	*o = FieldValuesRequestDto(varFieldValuesRequestDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFieldValuesRequestDto struct {
	value *FieldValuesRequestDto
	isSet bool
}

func (v NullableFieldValuesRequestDto) Get() *FieldValuesRequestDto {
	return v.value
}

func (v *NullableFieldValuesRequestDto) Set(val *FieldValuesRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldValuesRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldValuesRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldValuesRequestDto(val *FieldValuesRequestDto) *NullableFieldValuesRequestDto {
	return &NullableFieldValuesRequestDto{value: val, isSet: true}
}

func (v NullableFieldValuesRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldValuesRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
