/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the InsertGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsertGroupDto{}

// InsertGroupDto struct for InsertGroupDto
type InsertGroupDto struct {
	// The UUID of the user group.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the user group.
	Name string `json:"name"`
	// A short description of the user group. Max length is 255 characters.
	Description *string `json:"description,omitempty"`
	// A list of values associating this group with the corresponding claim from an identity provider.    If present and the group has owner = `LOCAL`, then group owner is set to `SAML`.    If missing and the group has owner = `SAML`, then group owner is set to `LOCAL`.    Cannot set this value for groups having owner set to `SCIM` or `ALL_USERS`.
	FederatedAttributeValues []string `json:"federatedAttributeValues,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _InsertGroupDto InsertGroupDto

// NewInsertGroupDto instantiates a new InsertGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertGroupDto(name string) *InsertGroupDto {
	this := InsertGroupDto{}
	this.Name = name
	return &this
}

// NewInsertGroupDtoWithDefaults instantiates a new InsertGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertGroupDtoWithDefaults() *InsertGroupDto {
	this := InsertGroupDto{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *InsertGroupDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertGroupDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *InsertGroupDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *InsertGroupDto) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value
func (o *InsertGroupDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InsertGroupDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InsertGroupDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InsertGroupDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertGroupDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InsertGroupDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InsertGroupDto) SetDescription(v string) {
	o.Description = &v
}

// GetFederatedAttributeValues returns the FederatedAttributeValues field value if set, zero value otherwise.
func (o *InsertGroupDto) GetFederatedAttributeValues() []string {
	if o == nil || IsNil(o.FederatedAttributeValues) {
		var ret []string
		return ret
	}
	return o.FederatedAttributeValues
}

// GetFederatedAttributeValuesOk returns a tuple with the FederatedAttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertGroupDto) GetFederatedAttributeValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.FederatedAttributeValues) {
		return nil, false
	}
	return o.FederatedAttributeValues, true
}

// HasFederatedAttributeValues returns a boolean if a field has been set.
func (o *InsertGroupDto) HasFederatedAttributeValues() bool {
	if o != nil && !IsNil(o.FederatedAttributeValues) {
		return true
	}

	return false
}

// SetFederatedAttributeValues gets a reference to the given []string and assigns it to the FederatedAttributeValues field.
func (o *InsertGroupDto) SetFederatedAttributeValues(v []string) {
	o.FederatedAttributeValues = v
}

func (o InsertGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsertGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FederatedAttributeValues) {
		toSerialize["federatedAttributeValues"] = o.FederatedAttributeValues
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InsertGroupDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsertGroupDto := _InsertGroupDto{}

	err = json.Unmarshal(data, &varInsertGroupDto)

	if err != nil {
		return err
	}

	*o = InsertGroupDto(varInsertGroupDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "federatedAttributeValues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInsertGroupDto struct {
	value *InsertGroupDto
	isSet bool
}

func (v NullableInsertGroupDto) Get() *InsertGroupDto {
	return v.value
}

func (v *NullableInsertGroupDto) Set(val *InsertGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertGroupDto(val *InsertGroupDto) *NullableInsertGroupDto {
	return &NullableInsertGroupDto{value: val, isSet: true}
}

func (v NullableInsertGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
