/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the LimitEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LimitEntry{}

// LimitEntry struct for LimitEntry
type LimitEntry struct {
	Count                float32 `json:"count"`
	Limit                string  `json:"limit"`
	AdditionalProperties map[string]interface{}
}

type _LimitEntry LimitEntry

// NewLimitEntry instantiates a new LimitEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitEntry(count float32, limit string) *LimitEntry {
	this := LimitEntry{}
	this.Count = count
	this.Limit = limit
	return &this
}

// NewLimitEntryWithDefaults instantiates a new LimitEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitEntryWithDefaults() *LimitEntry {
	this := LimitEntry{}
	return &this
}

// GetCount returns the Count field value
func (o *LimitEntry) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *LimitEntry) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *LimitEntry) SetCount(v float32) {
	o.Count = v
}

// GetLimit returns the Limit field value
func (o *LimitEntry) GetLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *LimitEntry) GetLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *LimitEntry) SetLimit(v string) {
	o.Limit = v
}

func (o LimitEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LimitEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["limit"] = o.Limit

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LimitEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"limit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLimitEntry := _LimitEntry{}

	err = json.Unmarshal(data, &varLimitEntry)

	if err != nil {
		return err
	}

	*o = LimitEntry(varLimitEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "limit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLimitEntry struct {
	value *LimitEntry
	isSet bool
}

func (v NullableLimitEntry) Get() *LimitEntry {
	return v.value
}

func (v *NullableLimitEntry) Set(val *LimitEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitEntry(val *LimitEntry) *NullableLimitEntry {
	return &NullableLimitEntry{value: val, isSet: true}
}

func (v NullableLimitEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
