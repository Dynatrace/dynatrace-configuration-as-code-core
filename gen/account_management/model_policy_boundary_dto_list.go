/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the PolicyBoundaryDtoList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyBoundaryDtoList{}

// PolicyBoundaryDtoList struct for PolicyBoundaryDtoList
type PolicyBoundaryDtoList struct {
	PageSize             float32                  `json:"pageSize"`
	PageNumber           float32                  `json:"pageNumber"`
	TotalCount           float32                  `json:"totalCount"`
	Content              []PolicyBoundaryOverview `json:"content"`
	AdditionalProperties map[string]interface{}
}

type _PolicyBoundaryDtoList PolicyBoundaryDtoList

// NewPolicyBoundaryDtoList instantiates a new PolicyBoundaryDtoList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyBoundaryDtoList(pageSize float32, pageNumber float32, totalCount float32, content []PolicyBoundaryOverview) *PolicyBoundaryDtoList {
	this := PolicyBoundaryDtoList{}
	this.PageSize = pageSize
	this.PageNumber = pageNumber
	this.TotalCount = totalCount
	this.Content = content
	return &this
}

// NewPolicyBoundaryDtoListWithDefaults instantiates a new PolicyBoundaryDtoList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyBoundaryDtoListWithDefaults() *PolicyBoundaryDtoList {
	this := PolicyBoundaryDtoList{}
	return &this
}

// GetPageSize returns the PageSize field value
func (o *PolicyBoundaryDtoList) GetPageSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *PolicyBoundaryDtoList) GetPageSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *PolicyBoundaryDtoList) SetPageSize(v float32) {
	o.PageSize = v
}

// GetPageNumber returns the PageNumber field value
func (o *PolicyBoundaryDtoList) GetPageNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value
// and a boolean to check if the value has been set.
func (o *PolicyBoundaryDtoList) GetPageNumberOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageNumber, true
}

// SetPageNumber sets field value
func (o *PolicyBoundaryDtoList) SetPageNumber(v float32) {
	o.PageNumber = v
}

// GetTotalCount returns the TotalCount field value
func (o *PolicyBoundaryDtoList) GetTotalCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *PolicyBoundaryDtoList) GetTotalCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *PolicyBoundaryDtoList) SetTotalCount(v float32) {
	o.TotalCount = v
}

// GetContent returns the Content field value
func (o *PolicyBoundaryDtoList) GetContent() []PolicyBoundaryOverview {
	if o == nil {
		var ret []PolicyBoundaryOverview
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *PolicyBoundaryDtoList) GetContentOk() ([]PolicyBoundaryOverview, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *PolicyBoundaryDtoList) SetContent(v []PolicyBoundaryOverview) {
	o.Content = v
}

func (o PolicyBoundaryDtoList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyBoundaryDtoList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pageSize"] = o.PageSize
	toSerialize["pageNumber"] = o.PageNumber
	toSerialize["totalCount"] = o.TotalCount
	toSerialize["content"] = o.Content

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PolicyBoundaryDtoList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pageSize",
		"pageNumber",
		"totalCount",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyBoundaryDtoList := _PolicyBoundaryDtoList{}

	err = json.Unmarshal(data, &varPolicyBoundaryDtoList)

	if err != nil {
		return err
	}

	*o = PolicyBoundaryDtoList(varPolicyBoundaryDtoList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pageSize")
		delete(additionalProperties, "pageNumber")
		delete(additionalProperties, "totalCount")
		delete(additionalProperties, "content")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePolicyBoundaryDtoList struct {
	value *PolicyBoundaryDtoList
	isSet bool
}

func (v NullablePolicyBoundaryDtoList) Get() *PolicyBoundaryDtoList {
	return v.value
}

func (v *NullablePolicyBoundaryDtoList) Set(val *PolicyBoundaryDtoList) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyBoundaryDtoList) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyBoundaryDtoList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyBoundaryDtoList(val *PolicyBoundaryDtoList) *NullablePolicyBoundaryDtoList {
	return &NullablePolicyBoundaryDtoList{value: val, isSet: true}
}

func (v NullablePolicyBoundaryDtoList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyBoundaryDtoList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
