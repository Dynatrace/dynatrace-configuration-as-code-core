/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ClaSubscriptionTermDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaSubscriptionTermDto{}

// ClaSubscriptionTermDto struct for ClaSubscriptionTermDto
type ClaSubscriptionTermDto struct {
	// The annual [commit](https://dt-url.net/i503u3z) of the Dynatrace Platform Subscription.
	Limit float32 `json:"limit"`
	// The start date of the subscription in `2021-05-01T15:11:00Z` format.
	StartDate time.Time `json:"startDate"`
	// The end date of the subscription in `2021-05-01T15:11:00Z` format.
	EndDate              time.Time `json:"endDate"`
	AdditionalProperties map[string]interface{}
}

type _ClaSubscriptionTermDto ClaSubscriptionTermDto

// NewClaSubscriptionTermDto instantiates a new ClaSubscriptionTermDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaSubscriptionTermDto(limit float32, startDate time.Time, endDate time.Time) *ClaSubscriptionTermDto {
	this := ClaSubscriptionTermDto{}
	this.Limit = limit
	this.StartDate = startDate
	this.EndDate = endDate
	return &this
}

// NewClaSubscriptionTermDtoWithDefaults instantiates a new ClaSubscriptionTermDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaSubscriptionTermDtoWithDefaults() *ClaSubscriptionTermDto {
	this := ClaSubscriptionTermDto{}
	return &this
}

// GetLimit returns the Limit field value
func (o *ClaSubscriptionTermDto) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ClaSubscriptionTermDto) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ClaSubscriptionTermDto) SetLimit(v float32) {
	o.Limit = v
}

// GetStartDate returns the StartDate field value
func (o *ClaSubscriptionTermDto) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *ClaSubscriptionTermDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *ClaSubscriptionTermDto) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *ClaSubscriptionTermDto) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *ClaSubscriptionTermDto) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *ClaSubscriptionTermDto) SetEndDate(v time.Time) {
	o.EndDate = v
}

func (o ClaSubscriptionTermDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaSubscriptionTermDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClaSubscriptionTermDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"startDate",
		"endDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaSubscriptionTermDto := _ClaSubscriptionTermDto{}

	err = json.Unmarshal(data, &varClaSubscriptionTermDto)

	if err != nil {
		return err
	}

	*o = ClaSubscriptionTermDto(varClaSubscriptionTermDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "limit")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "endDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClaSubscriptionTermDto struct {
	value *ClaSubscriptionTermDto
	isSet bool
}

func (v NullableClaSubscriptionTermDto) Get() *ClaSubscriptionTermDto {
	return v.value
}

func (v *NullableClaSubscriptionTermDto) Set(val *ClaSubscriptionTermDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClaSubscriptionTermDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClaSubscriptionTermDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaSubscriptionTermDto(val *ClaSubscriptionTermDto) *NullableClaSubscriptionTermDto {
	return &NullableClaSubscriptionTermDto{value: val, isSet: true}
}

func (v NullableClaSubscriptionTermDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaSubscriptionTermDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
