/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the ErrorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorDto{}

// ErrorDto struct for ErrorDto
type ErrorDto struct {
	// The code of the error.
	Code float32 `json:"code"`
	// A short description of the error.
	Message   string            `json:"message"`
	ErrorsMap map[string]string `json:"errorsMap"`
}

// NewErrorDto instantiates a new ErrorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorDto(code float32, message string, errorsMap map[string]string) *ErrorDto {
	this := ErrorDto{}
	this.Code = code
	this.Message = message
	this.ErrorsMap = errorsMap
	return &this
}

// NewErrorDtoWithDefaults instantiates a new ErrorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDtoWithDefaults() *ErrorDto {
	this := ErrorDto{}
	return &this
}

// GetCode returns the Code field value
func (o *ErrorDto) GetCode() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ErrorDto) GetCodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ErrorDto) SetCode(v float32) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *ErrorDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorDto) SetMessage(v string) {
	o.Message = v
}

// GetErrorsMap returns the ErrorsMap field value
func (o *ErrorDto) GetErrorsMap() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.ErrorsMap
}

// GetErrorsMapOk returns a tuple with the ErrorsMap field value
// and a boolean to check if the value has been set.
func (o *ErrorDto) GetErrorsMapOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorsMap, true
}

// SetErrorsMap sets field value
func (o *ErrorDto) SetErrorsMap(v map[string]string) {
	o.ErrorsMap = v
}

func (o ErrorDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	toSerialize["errorsMap"] = o.ErrorsMap
	return toSerialize, nil
}

type NullableErrorDto struct {
	value *ErrorDto
	isSet bool
}

func (v NullableErrorDto) Get() *ErrorDto {
	return v.value
}

func (v *NullableErrorDto) Set(val *ErrorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDto(val *ErrorDto) *NullableErrorDto {
	return &NullableErrorDto{value: val, isSet: true}
}

func (v NullableErrorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
