/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the Binding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Binding{}

// Binding struct for Binding
type Binding struct {
	// The ID of the policy.
	PolicyUuid string `json:"policyUuid"`
	// A list of user groups to which the policy applies.
	Groups []string `json:"groups"`
	// Parameters from bound policies
	Parameters *map[string]string `json:"parameters,omitempty"`
	// Metadata from bound policies
	Metadata *map[string]string `json:"metadata,omitempty"`
	// List of boundary UUIDs used in the binding.
	Boundaries           []string `json:"boundaries"`
	AdditionalProperties map[string]interface{}
}

type _Binding Binding

// NewBinding instantiates a new Binding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinding(policyUuid string, groups []string, boundaries []string) *Binding {
	this := Binding{}
	this.PolicyUuid = policyUuid
	this.Groups = groups
	this.Boundaries = boundaries
	return &this
}

// NewBindingWithDefaults instantiates a new Binding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindingWithDefaults() *Binding {
	this := Binding{}
	return &this
}

// GetPolicyUuid returns the PolicyUuid field value
func (o *Binding) GetPolicyUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyUuid
}

// GetPolicyUuidOk returns a tuple with the PolicyUuid field value
// and a boolean to check if the value has been set.
func (o *Binding) GetPolicyUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyUuid, true
}

// SetPolicyUuid sets field value
func (o *Binding) SetPolicyUuid(v string) {
	o.PolicyUuid = v
}

// GetGroups returns the Groups field value
func (o *Binding) GetGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *Binding) GetGroupsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *Binding) SetGroups(v []string) {
	o.Groups = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Binding) GetParameters() map[string]string {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Binding) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Binding) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *Binding) SetParameters(v map[string]string) {
	o.Parameters = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Binding) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Binding) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Binding) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Binding) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetBoundaries returns the Boundaries field value
func (o *Binding) GetBoundaries() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Boundaries
}

// GetBoundariesOk returns a tuple with the Boundaries field value
// and a boolean to check if the value has been set.
func (o *Binding) GetBoundariesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Boundaries, true
}

// SetBoundaries sets field value
func (o *Binding) SetBoundaries(v []string) {
	o.Boundaries = v
}

func (o Binding) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Binding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policyUuid"] = o.PolicyUuid
	toSerialize["groups"] = o.Groups
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["boundaries"] = o.Boundaries

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Binding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policyUuid",
		"groups",
		"boundaries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBinding := _Binding{}

	err = json.Unmarshal(data, &varBinding)

	if err != nil {
		return err
	}

	*o = Binding(varBinding)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "policyUuid")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "parameters")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "boundaries")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBinding struct {
	value *Binding
	isSet bool
}

func (v NullableBinding) Get() *Binding {
	return v.value
}

func (v *NullableBinding) Set(val *Binding) {
	v.value = val
	v.isSet = true
}

func (v NullableBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinding(val *Binding) *NullableBinding {
	return &NullableBinding{value: val, isSet: true}
}

func (v NullableBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
