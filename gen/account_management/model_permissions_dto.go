/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the PermissionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionsDto{}

// PermissionsDto struct for PermissionsDto
type PermissionsDto struct {
	// The name of the permission.
	PermissionName string `json:"permissionName"`
	// The scope of the permission. Depending on the scope type, it is defined by:   * `account`: The UUID of the account.  * `tenant`: The ID of the environment.  * `management-zone`: The ID of the management zone from an environment in `{environment-id}:{management-zone-id}` format.
	Scope string `json:"scope"`
	// The type of the permission scope.
	ScopeType string `json:"scopeType"`
	// The date and time of the permission creation in `2021-05-01T15:11:00Z` format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date and time of the most recent permission modification in `2021-05-01T15:11:00Z` format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewPermissionsDto instantiates a new PermissionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionsDto(permissionName string, scope string, scopeType string) *PermissionsDto {
	this := PermissionsDto{}
	this.PermissionName = permissionName
	this.Scope = scope
	this.ScopeType = scopeType
	return &this
}

// NewPermissionsDtoWithDefaults instantiates a new PermissionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsDtoWithDefaults() *PermissionsDto {
	this := PermissionsDto{}
	return &this
}

// GetPermissionName returns the PermissionName field value
func (o *PermissionsDto) GetPermissionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermissionName
}

// GetPermissionNameOk returns a tuple with the PermissionName field value
// and a boolean to check if the value has been set.
func (o *PermissionsDto) GetPermissionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionName, true
}

// SetPermissionName sets field value
func (o *PermissionsDto) SetPermissionName(v string) {
	o.PermissionName = v
}

// GetScope returns the Scope field value
func (o *PermissionsDto) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *PermissionsDto) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *PermissionsDto) SetScope(v string) {
	o.Scope = v
}

// GetScopeType returns the ScopeType field value
func (o *PermissionsDto) GetScopeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value
// and a boolean to check if the value has been set.
func (o *PermissionsDto) GetScopeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeType, true
}

// SetScopeType sets field value
func (o *PermissionsDto) SetScopeType(v string) {
	o.ScopeType = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PermissionsDto) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsDto) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PermissionsDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *PermissionsDto) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PermissionsDto) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsDto) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PermissionsDto) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *PermissionsDto) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o PermissionsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissionName"] = o.PermissionName
	toSerialize["scope"] = o.Scope
	toSerialize["scopeType"] = o.ScopeType
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullablePermissionsDto struct {
	value *PermissionsDto
	isSet bool
}

func (v NullablePermissionsDto) Get() *PermissionsDto {
	return v.value
}

func (v *NullablePermissionsDto) Set(val *PermissionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsDto(val *PermissionsDto) *NullablePermissionsDto {
	return &NullablePermissionsDto{value: val, isSet: true}
}

func (v NullablePermissionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
