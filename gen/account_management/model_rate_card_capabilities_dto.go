/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the RateCardCapabilitiesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateCardCapabilitiesDto{}

// RateCardCapabilitiesDto struct for RateCardCapabilitiesDto
type RateCardCapabilitiesDto struct {
	// The capability key
	Key string `json:"key"`
	// The capability name
	Name string `json:"name"`
	// The quoted price for the capability
	QuotedPrice string `json:"quotedPrice"`
	// The quoted unit of measure for the capability
	QuotedUnitOfMeasure string `json:"quotedUnitOfMeasure"`
	// The price for the capability
	Price                string `json:"price"`
	AdditionalProperties map[string]interface{}
}

type _RateCardCapabilitiesDto RateCardCapabilitiesDto

// NewRateCardCapabilitiesDto instantiates a new RateCardCapabilitiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateCardCapabilitiesDto(key string, name string, quotedPrice string, quotedUnitOfMeasure string, price string) *RateCardCapabilitiesDto {
	this := RateCardCapabilitiesDto{}
	this.Key = key
	this.Name = name
	this.QuotedPrice = quotedPrice
	this.QuotedUnitOfMeasure = quotedUnitOfMeasure
	this.Price = price
	return &this
}

// NewRateCardCapabilitiesDtoWithDefaults instantiates a new RateCardCapabilitiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateCardCapabilitiesDtoWithDefaults() *RateCardCapabilitiesDto {
	this := RateCardCapabilitiesDto{}
	return &this
}

// GetKey returns the Key field value
func (o *RateCardCapabilitiesDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *RateCardCapabilitiesDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *RateCardCapabilitiesDto) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *RateCardCapabilitiesDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RateCardCapabilitiesDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RateCardCapabilitiesDto) SetName(v string) {
	o.Name = v
}

// GetQuotedPrice returns the QuotedPrice field value
func (o *RateCardCapabilitiesDto) GetQuotedPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuotedPrice
}

// GetQuotedPriceOk returns a tuple with the QuotedPrice field value
// and a boolean to check if the value has been set.
func (o *RateCardCapabilitiesDto) GetQuotedPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuotedPrice, true
}

// SetQuotedPrice sets field value
func (o *RateCardCapabilitiesDto) SetQuotedPrice(v string) {
	o.QuotedPrice = v
}

// GetQuotedUnitOfMeasure returns the QuotedUnitOfMeasure field value
func (o *RateCardCapabilitiesDto) GetQuotedUnitOfMeasure() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuotedUnitOfMeasure
}

// GetQuotedUnitOfMeasureOk returns a tuple with the QuotedUnitOfMeasure field value
// and a boolean to check if the value has been set.
func (o *RateCardCapabilitiesDto) GetQuotedUnitOfMeasureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuotedUnitOfMeasure, true
}

// SetQuotedUnitOfMeasure sets field value
func (o *RateCardCapabilitiesDto) SetQuotedUnitOfMeasure(v string) {
	o.QuotedUnitOfMeasure = v
}

// GetPrice returns the Price field value
func (o *RateCardCapabilitiesDto) GetPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *RateCardCapabilitiesDto) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *RateCardCapabilitiesDto) SetPrice(v string) {
	o.Price = v
}

func (o RateCardCapabilitiesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateCardCapabilitiesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	toSerialize["quotedPrice"] = o.QuotedPrice
	toSerialize["quotedUnitOfMeasure"] = o.QuotedUnitOfMeasure
	toSerialize["price"] = o.Price

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RateCardCapabilitiesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"name",
		"quotedPrice",
		"quotedUnitOfMeasure",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRateCardCapabilitiesDto := _RateCardCapabilitiesDto{}

	err = json.Unmarshal(data, &varRateCardCapabilitiesDto)

	if err != nil {
		return err
	}

	*o = RateCardCapabilitiesDto(varRateCardCapabilitiesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "quotedPrice")
		delete(additionalProperties, "quotedUnitOfMeasure")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRateCardCapabilitiesDto struct {
	value *RateCardCapabilitiesDto
	isSet bool
}

func (v NullableRateCardCapabilitiesDto) Get() *RateCardCapabilitiesDto {
	return v.value
}

func (v *NullableRateCardCapabilitiesDto) Set(val *RateCardCapabilitiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRateCardCapabilitiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRateCardCapabilitiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateCardCapabilitiesDto(val *RateCardCapabilitiesDto) *NullableRateCardCapabilitiesDto {
	return &NullableRateCardCapabilitiesDto{value: val, isSet: true}
}

func (v NullableRateCardCapabilitiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateCardCapabilitiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
