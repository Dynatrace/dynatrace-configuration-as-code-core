/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the AppendLevelPolicyBindingForGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppendLevelPolicyBindingForGroupDto{}

// AppendLevelPolicyBindingForGroupDto struct for AppendLevelPolicyBindingForGroupDto
type AppendLevelPolicyBindingForGroupDto struct {
	// Parameters provided for bindings
	Parameters *map[string]string `json:"parameters,omitempty"`
	// Metadata provided for bindings
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// NewAppendLevelPolicyBindingForGroupDto instantiates a new AppendLevelPolicyBindingForGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppendLevelPolicyBindingForGroupDto() *AppendLevelPolicyBindingForGroupDto {
	this := AppendLevelPolicyBindingForGroupDto{}
	return &this
}

// NewAppendLevelPolicyBindingForGroupDtoWithDefaults instantiates a new AppendLevelPolicyBindingForGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppendLevelPolicyBindingForGroupDtoWithDefaults() *AppendLevelPolicyBindingForGroupDto {
	this := AppendLevelPolicyBindingForGroupDto{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *AppendLevelPolicyBindingForGroupDto) GetParameters() map[string]string {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppendLevelPolicyBindingForGroupDto) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *AppendLevelPolicyBindingForGroupDto) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *AppendLevelPolicyBindingForGroupDto) SetParameters(v map[string]string) {
	o.Parameters = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AppendLevelPolicyBindingForGroupDto) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppendLevelPolicyBindingForGroupDto) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AppendLevelPolicyBindingForGroupDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *AppendLevelPolicyBindingForGroupDto) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o AppendLevelPolicyBindingForGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppendLevelPolicyBindingForGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableAppendLevelPolicyBindingForGroupDto struct {
	value *AppendLevelPolicyBindingForGroupDto
	isSet bool
}

func (v NullableAppendLevelPolicyBindingForGroupDto) Get() *AppendLevelPolicyBindingForGroupDto {
	return v.value
}

func (v *NullableAppendLevelPolicyBindingForGroupDto) Set(val *AppendLevelPolicyBindingForGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppendLevelPolicyBindingForGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppendLevelPolicyBindingForGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppendLevelPolicyBindingForGroupDto(val *AppendLevelPolicyBindingForGroupDto) *NullableAppendLevelPolicyBindingForGroupDto {
	return &NullableAppendLevelPolicyBindingForGroupDto{value: val, isSet: true}
}

func (v NullableAppendLevelPolicyBindingForGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppendLevelPolicyBindingForGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
