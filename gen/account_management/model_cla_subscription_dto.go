/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the ClaSubscriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaSubscriptionDto{}

// ClaSubscriptionDto struct for ClaSubscriptionDto
type ClaSubscriptionDto struct {
	// The ID of the Dynatrace Platform Subscription.
	SubscriptionId float32 `json:"subscriptionId"`
	// The start date and time of the subscription in `2021-05-01T15:11:00Z` format.
	Start string `json:"start"`
	// The end date and time of the subscription in `2021-05-01T15:11:00Z` format.
	End                  string `json:"end"`
	AdditionalProperties map[string]interface{}
}

type _ClaSubscriptionDto ClaSubscriptionDto

// NewClaSubscriptionDto instantiates a new ClaSubscriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaSubscriptionDto(subscriptionId float32, start string, end string) *ClaSubscriptionDto {
	this := ClaSubscriptionDto{}
	this.SubscriptionId = subscriptionId
	this.Start = start
	this.End = end
	return &this
}

// NewClaSubscriptionDtoWithDefaults instantiates a new ClaSubscriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaSubscriptionDtoWithDefaults() *ClaSubscriptionDto {
	this := ClaSubscriptionDto{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *ClaSubscriptionDto) GetSubscriptionId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *ClaSubscriptionDto) GetSubscriptionIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *ClaSubscriptionDto) SetSubscriptionId(v float32) {
	o.SubscriptionId = v
}

// GetStart returns the Start field value
func (o *ClaSubscriptionDto) GetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *ClaSubscriptionDto) GetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *ClaSubscriptionDto) SetStart(v string) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *ClaSubscriptionDto) GetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *ClaSubscriptionDto) GetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *ClaSubscriptionDto) SetEnd(v string) {
	o.End = v
}

func (o ClaSubscriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaSubscriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClaSubscriptionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriptionId",
		"start",
		"end",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaSubscriptionDto := _ClaSubscriptionDto{}

	err = json.Unmarshal(data, &varClaSubscriptionDto)

	if err != nil {
		return err
	}

	*o = ClaSubscriptionDto(varClaSubscriptionDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subscriptionId")
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClaSubscriptionDto struct {
	value *ClaSubscriptionDto
	isSet bool
}

func (v NullableClaSubscriptionDto) Get() *ClaSubscriptionDto {
	return v.value
}

func (v *NullableClaSubscriptionDto) Set(val *ClaSubscriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClaSubscriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClaSubscriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaSubscriptionDto(val *ClaSubscriptionDto) *NullableClaSubscriptionDto {
	return &NullableClaSubscriptionDto{value: val, isSet: true}
}

func (v NullableClaSubscriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaSubscriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
