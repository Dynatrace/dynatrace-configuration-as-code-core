/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterOrEnvironmentAggregatedReturnDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterOrEnvironmentAggregatedReturnDto{}

// ClusterOrEnvironmentAggregatedReturnDto struct for ClusterOrEnvironmentAggregatedReturnDto
type ClusterOrEnvironmentAggregatedReturnDto struct {
	// The name of the resource.
	ResourceName string `json:"resourceName"`
	// The type of the resource: environment or cluster.
	ResourceType string `json:"resourceType"`
	// A list of consumption records.
	ConsumptionRecords   map[string]interface{} `json:"consumptionRecords"`
	AdditionalProperties map[string]interface{}
}

type _ClusterOrEnvironmentAggregatedReturnDto ClusterOrEnvironmentAggregatedReturnDto

// NewClusterOrEnvironmentAggregatedReturnDto instantiates a new ClusterOrEnvironmentAggregatedReturnDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterOrEnvironmentAggregatedReturnDto(resourceName string, resourceType string, consumptionRecords map[string]interface{}) *ClusterOrEnvironmentAggregatedReturnDto {
	this := ClusterOrEnvironmentAggregatedReturnDto{}
	this.ResourceName = resourceName
	this.ResourceType = resourceType
	this.ConsumptionRecords = consumptionRecords
	return &this
}

// NewClusterOrEnvironmentAggregatedReturnDtoWithDefaults instantiates a new ClusterOrEnvironmentAggregatedReturnDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterOrEnvironmentAggregatedReturnDtoWithDefaults() *ClusterOrEnvironmentAggregatedReturnDto {
	this := ClusterOrEnvironmentAggregatedReturnDto{}
	return &this
}

// GetResourceName returns the ResourceName field value
func (o *ClusterOrEnvironmentAggregatedReturnDto) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *ClusterOrEnvironmentAggregatedReturnDto) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *ClusterOrEnvironmentAggregatedReturnDto) SetResourceName(v string) {
	o.ResourceName = v
}

// GetResourceType returns the ResourceType field value
func (o *ClusterOrEnvironmentAggregatedReturnDto) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ClusterOrEnvironmentAggregatedReturnDto) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ClusterOrEnvironmentAggregatedReturnDto) SetResourceType(v string) {
	o.ResourceType = v
}

// GetConsumptionRecords returns the ConsumptionRecords field value
func (o *ClusterOrEnvironmentAggregatedReturnDto) GetConsumptionRecords() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConsumptionRecords
}

// GetConsumptionRecordsOk returns a tuple with the ConsumptionRecords field value
// and a boolean to check if the value has been set.
func (o *ClusterOrEnvironmentAggregatedReturnDto) GetConsumptionRecordsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ConsumptionRecords, true
}

// SetConsumptionRecords sets field value
func (o *ClusterOrEnvironmentAggregatedReturnDto) SetConsumptionRecords(v map[string]interface{}) {
	o.ConsumptionRecords = v
}

func (o ClusterOrEnvironmentAggregatedReturnDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterOrEnvironmentAggregatedReturnDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceName"] = o.ResourceName
	toSerialize["resourceType"] = o.ResourceType
	toSerialize["consumptionRecords"] = o.ConsumptionRecords

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterOrEnvironmentAggregatedReturnDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceName",
		"resourceType",
		"consumptionRecords",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterOrEnvironmentAggregatedReturnDto := _ClusterOrEnvironmentAggregatedReturnDto{}

	err = json.Unmarshal(data, &varClusterOrEnvironmentAggregatedReturnDto)

	if err != nil {
		return err
	}

	*o = ClusterOrEnvironmentAggregatedReturnDto(varClusterOrEnvironmentAggregatedReturnDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourceName")
		delete(additionalProperties, "resourceType")
		delete(additionalProperties, "consumptionRecords")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterOrEnvironmentAggregatedReturnDto struct {
	value *ClusterOrEnvironmentAggregatedReturnDto
	isSet bool
}

func (v NullableClusterOrEnvironmentAggregatedReturnDto) Get() *ClusterOrEnvironmentAggregatedReturnDto {
	return v.value
}

func (v *NullableClusterOrEnvironmentAggregatedReturnDto) Set(val *ClusterOrEnvironmentAggregatedReturnDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterOrEnvironmentAggregatedReturnDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterOrEnvironmentAggregatedReturnDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterOrEnvironmentAggregatedReturnDto(val *ClusterOrEnvironmentAggregatedReturnDto) *NullableClusterOrEnvironmentAggregatedReturnDto {
	return &NullableClusterOrEnvironmentAggregatedReturnDto{value: val, isSet: true}
}

func (v NullableClusterOrEnvironmentAggregatedReturnDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterOrEnvironmentAggregatedReturnDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
