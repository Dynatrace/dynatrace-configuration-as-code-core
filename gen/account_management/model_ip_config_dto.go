/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the IpConfigDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpConfigDto{}

// IpConfigDto struct for IpConfigDto
type IpConfigDto struct {
	// If enabled the ip config allow list gets applied.
	Enabled bool `json:"enabled"`
	// If enabled the webhook ip allowlists will ignore the main allowlist CIDR range limitations.
	AllowWebhookOverride bool `json:"allowWebhookOverride"`
	// Contains a list of valid IP addresses in CIDR format which are allowed. If enabled it must not be empty.
	Allowlist            []AllowlistItem `json:"allowlist,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IpConfigDto IpConfigDto

// NewIpConfigDto instantiates a new IpConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpConfigDto(enabled bool, allowWebhookOverride bool) *IpConfigDto {
	this := IpConfigDto{}
	this.Enabled = enabled
	this.AllowWebhookOverride = allowWebhookOverride
	return &this
}

// NewIpConfigDtoWithDefaults instantiates a new IpConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpConfigDtoWithDefaults() *IpConfigDto {
	this := IpConfigDto{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *IpConfigDto) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *IpConfigDto) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *IpConfigDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetAllowWebhookOverride returns the AllowWebhookOverride field value
func (o *IpConfigDto) GetAllowWebhookOverride() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowWebhookOverride
}

// GetAllowWebhookOverrideOk returns a tuple with the AllowWebhookOverride field value
// and a boolean to check if the value has been set.
func (o *IpConfigDto) GetAllowWebhookOverrideOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowWebhookOverride, true
}

// SetAllowWebhookOverride sets field value
func (o *IpConfigDto) SetAllowWebhookOverride(v bool) {
	o.AllowWebhookOverride = v
}

// GetAllowlist returns the Allowlist field value if set, zero value otherwise.
func (o *IpConfigDto) GetAllowlist() []AllowlistItem {
	if o == nil || IsNil(o.Allowlist) {
		var ret []AllowlistItem
		return ret
	}
	return o.Allowlist
}

// GetAllowlistOk returns a tuple with the Allowlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConfigDto) GetAllowlistOk() ([]AllowlistItem, bool) {
	if o == nil || IsNil(o.Allowlist) {
		return nil, false
	}
	return o.Allowlist, true
}

// HasAllowlist returns a boolean if a field has been set.
func (o *IpConfigDto) HasAllowlist() bool {
	if o != nil && !IsNil(o.Allowlist) {
		return true
	}

	return false
}

// SetAllowlist gets a reference to the given []AllowlistItem and assigns it to the Allowlist field.
func (o *IpConfigDto) SetAllowlist(v []AllowlistItem) {
	o.Allowlist = v
}

func (o IpConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpConfigDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["allowWebhookOverride"] = o.AllowWebhookOverride
	if !IsNil(o.Allowlist) {
		toSerialize["allowlist"] = o.Allowlist
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpConfigDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"allowWebhookOverride",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpConfigDto := _IpConfigDto{}

	err = json.Unmarshal(data, &varIpConfigDto)

	if err != nil {
		return err
	}

	*o = IpConfigDto(varIpConfigDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "allowWebhookOverride")
		delete(additionalProperties, "allowlist")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpConfigDto struct {
	value *IpConfigDto
	isSet bool
}

func (v NullableIpConfigDto) Get() *IpConfigDto {
	return v.value
}

func (v *NullableIpConfigDto) Set(val *IpConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIpConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIpConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpConfigDto(val *IpConfigDto) *NullableIpConfigDto {
	return &NullableIpConfigDto{value: val, isSet: true}
}

func (v NullableIpConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
