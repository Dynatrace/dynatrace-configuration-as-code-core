/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the ContractLimitDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractLimitDto{}

// ContractLimitDto struct for ContractLimitDto
type ContractLimitDto struct {
	AccountInfo          AccountContractDto        `json:"accountInfo"`
	EnvironmentInfo      []EnvironmentLimitListDto `json:"environmentInfo"`
	AdditionalProperties map[string]interface{}
}

type _ContractLimitDto ContractLimitDto

// NewContractLimitDto instantiates a new ContractLimitDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractLimitDto(accountInfo AccountContractDto, environmentInfo []EnvironmentLimitListDto) *ContractLimitDto {
	this := ContractLimitDto{}
	this.AccountInfo = accountInfo
	this.EnvironmentInfo = environmentInfo
	return &this
}

// NewContractLimitDtoWithDefaults instantiates a new ContractLimitDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractLimitDtoWithDefaults() *ContractLimitDto {
	this := ContractLimitDto{}
	return &this
}

// GetAccountInfo returns the AccountInfo field value
func (o *ContractLimitDto) GetAccountInfo() AccountContractDto {
	if o == nil {
		var ret AccountContractDto
		return ret
	}

	return o.AccountInfo
}

// GetAccountInfoOk returns a tuple with the AccountInfo field value
// and a boolean to check if the value has been set.
func (o *ContractLimitDto) GetAccountInfoOk() (*AccountContractDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountInfo, true
}

// SetAccountInfo sets field value
func (o *ContractLimitDto) SetAccountInfo(v AccountContractDto) {
	o.AccountInfo = v
}

// GetEnvironmentInfo returns the EnvironmentInfo field value
func (o *ContractLimitDto) GetEnvironmentInfo() []EnvironmentLimitListDto {
	if o == nil {
		var ret []EnvironmentLimitListDto
		return ret
	}

	return o.EnvironmentInfo
}

// GetEnvironmentInfoOk returns a tuple with the EnvironmentInfo field value
// and a boolean to check if the value has been set.
func (o *ContractLimitDto) GetEnvironmentInfoOk() ([]EnvironmentLimitListDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentInfo, true
}

// SetEnvironmentInfo sets field value
func (o *ContractLimitDto) SetEnvironmentInfo(v []EnvironmentLimitListDto) {
	o.EnvironmentInfo = v
}

func (o ContractLimitDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractLimitDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountInfo"] = o.AccountInfo
	toSerialize["environmentInfo"] = o.EnvironmentInfo

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContractLimitDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountInfo",
		"environmentInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractLimitDto := _ContractLimitDto{}

	err = json.Unmarshal(data, &varContractLimitDto)

	if err != nil {
		return err
	}

	*o = ContractLimitDto(varContractLimitDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountInfo")
		delete(additionalProperties, "environmentInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContractLimitDto struct {
	value *ContractLimitDto
	isSet bool
}

func (v NullableContractLimitDto) Get() *ContractLimitDto {
	return v.value
}

func (v *NullableContractLimitDto) Set(val *ContractLimitDto) {
	v.value = val
	v.isSet = true
}

func (v NullableContractLimitDto) IsSet() bool {
	return v.isSet
}

func (v *NullableContractLimitDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractLimitDto(val *ContractLimitDto) *NullableContractLimitDto {
	return &NullableContractLimitDto{value: val, isSet: true}
}

func (v NullableContractLimitDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractLimitDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
