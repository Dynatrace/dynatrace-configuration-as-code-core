/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionEnvironmentCostV3Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionEnvironmentCostV3Dto{}

// SubscriptionEnvironmentCostV3Dto struct for SubscriptionEnvironmentCostV3Dto
type SubscriptionEnvironmentCostV3Dto struct {
	// The UUID of the Managed cluster
	ClusterId string `json:"clusterId"`
	// The UUID of the environment.
	EnvironmentId string `json:"environmentId"`
	// Subscription costs for the environment.
	Cost                 []SubscriptionCapabilityCostReceivedDto `json:"cost"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionEnvironmentCostV3Dto SubscriptionEnvironmentCostV3Dto

// NewSubscriptionEnvironmentCostV3Dto instantiates a new SubscriptionEnvironmentCostV3Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionEnvironmentCostV3Dto(clusterId string, environmentId string, cost []SubscriptionCapabilityCostReceivedDto) *SubscriptionEnvironmentCostV3Dto {
	this := SubscriptionEnvironmentCostV3Dto{}
	this.ClusterId = clusterId
	this.EnvironmentId = environmentId
	this.Cost = cost
	return &this
}

// NewSubscriptionEnvironmentCostV3DtoWithDefaults instantiates a new SubscriptionEnvironmentCostV3Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionEnvironmentCostV3DtoWithDefaults() *SubscriptionEnvironmentCostV3Dto {
	this := SubscriptionEnvironmentCostV3Dto{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *SubscriptionEnvironmentCostV3Dto) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentCostV3Dto) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *SubscriptionEnvironmentCostV3Dto) SetClusterId(v string) {
	o.ClusterId = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *SubscriptionEnvironmentCostV3Dto) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentCostV3Dto) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *SubscriptionEnvironmentCostV3Dto) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetCost returns the Cost field value
func (o *SubscriptionEnvironmentCostV3Dto) GetCost() []SubscriptionCapabilityCostReceivedDto {
	if o == nil {
		var ret []SubscriptionCapabilityCostReceivedDto
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentCostV3Dto) GetCostOk() ([]SubscriptionCapabilityCostReceivedDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost, true
}

// SetCost sets field value
func (o *SubscriptionEnvironmentCostV3Dto) SetCost(v []SubscriptionCapabilityCostReceivedDto) {
	o.Cost = v
}

func (o SubscriptionEnvironmentCostV3Dto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionEnvironmentCostV3Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterId"] = o.ClusterId
	toSerialize["environmentId"] = o.EnvironmentId
	toSerialize["cost"] = o.Cost

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionEnvironmentCostV3Dto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterId",
		"environmentId",
		"cost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionEnvironmentCostV3Dto := _SubscriptionEnvironmentCostV3Dto{}

	err = json.Unmarshal(data, &varSubscriptionEnvironmentCostV3Dto)

	if err != nil {
		return err
	}

	*o = SubscriptionEnvironmentCostV3Dto(varSubscriptionEnvironmentCostV3Dto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "environmentId")
		delete(additionalProperties, "cost")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionEnvironmentCostV3Dto struct {
	value *SubscriptionEnvironmentCostV3Dto
	isSet bool
}

func (v NullableSubscriptionEnvironmentCostV3Dto) Get() *SubscriptionEnvironmentCostV3Dto {
	return v.value
}

func (v *NullableSubscriptionEnvironmentCostV3Dto) Set(val *SubscriptionEnvironmentCostV3Dto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEnvironmentCostV3Dto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEnvironmentCostV3Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEnvironmentCostV3Dto(val *SubscriptionEnvironmentCostV3Dto) *NullableSubscriptionEnvironmentCostV3Dto {
	return &NullableSubscriptionEnvironmentCostV3Dto{value: val, isSet: true}
}

func (v NullableSubscriptionEnvironmentCostV3Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEnvironmentCostV3Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
