/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentChangeListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentChangeListDto{}

// EnvironmentChangeListDto struct for EnvironmentChangeListDto
type EnvironmentChangeListDto struct {
	// The ID of the environment.
	Uuid string `json:"uuid"`
	// The total amount of host units assigned to the environment.
	ConcurrentHostsUnits float32 `json:"concurrentHostsUnits"`
	// The overage is (`true`) or is not (`false`) enabled for the environment.   If the overage is enabled, the environment can exceed the quota. To learn more about host units consumption, see [Application and Infrastructure Monitoring](https://dt-url.net/hu03ub5) in Dynatrace Documentation.
	HostUnitOverageAllowed bool `json:"hostUnitOverageAllowed"`
	AdditionalProperties   map[string]interface{}
}

type _EnvironmentChangeListDto EnvironmentChangeListDto

// NewEnvironmentChangeListDto instantiates a new EnvironmentChangeListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentChangeListDto(uuid string, concurrentHostsUnits float32, hostUnitOverageAllowed bool) *EnvironmentChangeListDto {
	this := EnvironmentChangeListDto{}
	this.Uuid = uuid
	this.ConcurrentHostsUnits = concurrentHostsUnits
	this.HostUnitOverageAllowed = hostUnitOverageAllowed
	return &this
}

// NewEnvironmentChangeListDtoWithDefaults instantiates a new EnvironmentChangeListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentChangeListDtoWithDefaults() *EnvironmentChangeListDto {
	this := EnvironmentChangeListDto{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *EnvironmentChangeListDto) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *EnvironmentChangeListDto) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *EnvironmentChangeListDto) SetUuid(v string) {
	o.Uuid = v
}

// GetConcurrentHostsUnits returns the ConcurrentHostsUnits field value
func (o *EnvironmentChangeListDto) GetConcurrentHostsUnits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConcurrentHostsUnits
}

// GetConcurrentHostsUnitsOk returns a tuple with the ConcurrentHostsUnits field value
// and a boolean to check if the value has been set.
func (o *EnvironmentChangeListDto) GetConcurrentHostsUnitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConcurrentHostsUnits, true
}

// SetConcurrentHostsUnits sets field value
func (o *EnvironmentChangeListDto) SetConcurrentHostsUnits(v float32) {
	o.ConcurrentHostsUnits = v
}

// GetHostUnitOverageAllowed returns the HostUnitOverageAllowed field value
func (o *EnvironmentChangeListDto) GetHostUnitOverageAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HostUnitOverageAllowed
}

// GetHostUnitOverageAllowedOk returns a tuple with the HostUnitOverageAllowed field value
// and a boolean to check if the value has been set.
func (o *EnvironmentChangeListDto) GetHostUnitOverageAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostUnitOverageAllowed, true
}

// SetHostUnitOverageAllowed sets field value
func (o *EnvironmentChangeListDto) SetHostUnitOverageAllowed(v bool) {
	o.HostUnitOverageAllowed = v
}

func (o EnvironmentChangeListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentChangeListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["concurrentHostsUnits"] = o.ConcurrentHostsUnits
	toSerialize["hostUnitOverageAllowed"] = o.HostUnitOverageAllowed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentChangeListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"concurrentHostsUnits",
		"hostUnitOverageAllowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentChangeListDto := _EnvironmentChangeListDto{}

	err = json.Unmarshal(data, &varEnvironmentChangeListDto)

	if err != nil {
		return err
	}

	*o = EnvironmentChangeListDto(varEnvironmentChangeListDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "concurrentHostsUnits")
		delete(additionalProperties, "hostUnitOverageAllowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentChangeListDto struct {
	value *EnvironmentChangeListDto
	isSet bool
}

func (v NullableEnvironmentChangeListDto) Get() *EnvironmentChangeListDto {
	return v.value
}

func (v *NullableEnvironmentChangeListDto) Set(val *EnvironmentChangeListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentChangeListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentChangeListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentChangeListDto(val *EnvironmentChangeListDto) *NullableEnvironmentChangeListDto {
	return &NullableEnvironmentChangeListDto{value: val, isSet: true}
}

func (v NullableEnvironmentChangeListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentChangeListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
