/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the EnvironmentResourceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentResourceDto{}

// EnvironmentResourceDto struct for EnvironmentResourceDto
type EnvironmentResourceDto struct {
	// A list of environments in the account.
	TenantResources []TenantResourceDto `json:"tenantResources"`
	// A list of management zones in the account.
	ManagementZoneResources []ManagementZoneResourceDto `json:"managementZoneResources"`
}

// NewEnvironmentResourceDto instantiates a new EnvironmentResourceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentResourceDto(tenantResources []TenantResourceDto, managementZoneResources []ManagementZoneResourceDto) *EnvironmentResourceDto {
	this := EnvironmentResourceDto{}
	this.TenantResources = tenantResources
	this.ManagementZoneResources = managementZoneResources
	return &this
}

// NewEnvironmentResourceDtoWithDefaults instantiates a new EnvironmentResourceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentResourceDtoWithDefaults() *EnvironmentResourceDto {
	this := EnvironmentResourceDto{}
	return &this
}

// GetTenantResources returns the TenantResources field value
func (o *EnvironmentResourceDto) GetTenantResources() []TenantResourceDto {
	if o == nil {
		var ret []TenantResourceDto
		return ret
	}

	return o.TenantResources
}

// GetTenantResourcesOk returns a tuple with the TenantResources field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResourceDto) GetTenantResourcesOk() ([]TenantResourceDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantResources, true
}

// SetTenantResources sets field value
func (o *EnvironmentResourceDto) SetTenantResources(v []TenantResourceDto) {
	o.TenantResources = v
}

// GetManagementZoneResources returns the ManagementZoneResources field value
func (o *EnvironmentResourceDto) GetManagementZoneResources() []ManagementZoneResourceDto {
	if o == nil {
		var ret []ManagementZoneResourceDto
		return ret
	}

	return o.ManagementZoneResources
}

// GetManagementZoneResourcesOk returns a tuple with the ManagementZoneResources field value
// and a boolean to check if the value has been set.
func (o *EnvironmentResourceDto) GetManagementZoneResourcesOk() ([]ManagementZoneResourceDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementZoneResources, true
}

// SetManagementZoneResources sets field value
func (o *EnvironmentResourceDto) SetManagementZoneResources(v []ManagementZoneResourceDto) {
	o.ManagementZoneResources = v
}

func (o EnvironmentResourceDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentResourceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantResources"] = o.TenantResources
	toSerialize["managementZoneResources"] = o.ManagementZoneResources
	return toSerialize, nil
}

type NullableEnvironmentResourceDto struct {
	value *EnvironmentResourceDto
	isSet bool
}

func (v NullableEnvironmentResourceDto) Get() *EnvironmentResourceDto {
	return v.value
}

func (v *NullableEnvironmentResourceDto) Set(val *EnvironmentResourceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentResourceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentResourceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentResourceDto(val *EnvironmentResourceDto) *NullableEnvironmentResourceDto {
	return &NullableEnvironmentResourceDto{value: val, isSet: true}
}

func (v NullableEnvironmentResourceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentResourceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
