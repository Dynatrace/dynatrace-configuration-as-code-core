/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AccountSettingsAPIService AccountSettingsAPI service
type AccountSettingsAPIService service

type ApiCreateCostcenterCostAllocationValuesRequest struct {
	ctx                   context.Context
	ApiService            *AccountSettingsAPIService
	accountUuid           string
	fieldValuesRequestDto *FieldValuesRequestDto
}

func (r ApiCreateCostcenterCostAllocationValuesRequest) FieldValuesRequestDto(fieldValuesRequestDto FieldValuesRequestDto) ApiCreateCostcenterCostAllocationValuesRequest {
	r.fieldValuesRequestDto = &fieldValuesRequestDto
	return r
}

func (r ApiCreateCostcenterCostAllocationValuesRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateCostcenterCostAllocationValuesExecute(r)
}

/*
CreateCostcenterCostAllocationValues Add the provided values to the costcenter field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiCreateCostcenterCostAllocationValuesRequest
*/
func (a *AccountSettingsAPIService) CreateCostcenterCostAllocationValues(ctx context.Context, accountUuid string) ApiCreateCostcenterCostAllocationValuesRequest {
	return ApiCreateCostcenterCostAllocationValuesRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
func (a *AccountSettingsAPIService) CreateCostcenterCostAllocationValuesExecute(r ApiCreateCostcenterCostAllocationValuesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.CreateCostcenterCostAllocationValues")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/costcenters"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fieldValuesRequestDto == nil {
		return nil, reportError("fieldValuesRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fieldValuesRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateProductCostAllocationValuesRequest struct {
	ctx                   context.Context
	ApiService            *AccountSettingsAPIService
	accountUuid           string
	fieldValuesRequestDto *FieldValuesRequestDto
}

func (r ApiCreateProductCostAllocationValuesRequest) FieldValuesRequestDto(fieldValuesRequestDto FieldValuesRequestDto) ApiCreateProductCostAllocationValuesRequest {
	r.fieldValuesRequestDto = &fieldValuesRequestDto
	return r
}

func (r ApiCreateProductCostAllocationValuesRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateProductCostAllocationValuesExecute(r)
}

/*
CreateProductCostAllocationValues Add the provided values to the product field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiCreateProductCostAllocationValuesRequest
*/
func (a *AccountSettingsAPIService) CreateProductCostAllocationValues(ctx context.Context, accountUuid string) ApiCreateProductCostAllocationValuesRequest {
	return ApiCreateProductCostAllocationValuesRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
func (a *AccountSettingsAPIService) CreateProductCostAllocationValuesExecute(r ApiCreateProductCostAllocationValuesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.CreateProductCostAllocationValues")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/products"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fieldValuesRequestDto == nil {
		return nil, reportError("fieldValuesRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fieldValuesRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCostcenterCostAllocationValueRequest struct {
	ctx         context.Context
	ApiService  *AccountSettingsAPIService
	accountUuid string
	key         string
}

func (r ApiDeleteCostcenterCostAllocationValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCostcenterCostAllocationValueExecute(r)
}

/*
DeleteCostcenterCostAllocationValue Delete a value by key on the costcenter field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param key The key for the field value.
	@return ApiDeleteCostcenterCostAllocationValueRequest
*/
func (a *AccountSettingsAPIService) DeleteCostcenterCostAllocationValue(ctx context.Context, accountUuid string, key string) ApiDeleteCostcenterCostAllocationValueRequest {
	return ApiDeleteCostcenterCostAllocationValueRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
		key:         key,
	}
}

// Execute executes the request
func (a *AccountSettingsAPIService) DeleteCostcenterCostAllocationValueExecute(r ApiDeleteCostcenterCostAllocationValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.DeleteCostcenterCostAllocationValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/costcenters/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteProductCostAllocationValueRequest struct {
	ctx         context.Context
	ApiService  *AccountSettingsAPIService
	accountUuid string
	key         string
}

func (r ApiDeleteProductCostAllocationValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProductCostAllocationValueExecute(r)
}

/*
DeleteProductCostAllocationValue Delete a value by key on the product field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param key The key for the field value.
	@return ApiDeleteProductCostAllocationValueRequest
*/
func (a *AccountSettingsAPIService) DeleteProductCostAllocationValue(ctx context.Context, accountUuid string, key string) ApiDeleteProductCostAllocationValueRequest {
	return ApiDeleteProductCostAllocationValueRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
		key:         key,
	}
}

// Execute executes the request
func (a *AccountSettingsAPIService) DeleteProductCostAllocationValueExecute(r ApiDeleteProductCostAllocationValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.DeleteProductCostAllocationValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/products/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListCostcenterCostAllocationValuesRequest struct {
	ctx         context.Context
	ApiService  *AccountSettingsAPIService
	accountUuid string
	page        *float32
	pageSize    *float32
}

// The number of the requested page. Can be increased as long as **hasNextPage** is true in the response.
func (r ApiListCostcenterCostAllocationValuesRequest) Page(page float32) ApiListCostcenterCostAllocationValuesRequest {
	r.page = &page
	return r
}

// Defines the requested number of entries for the next page.
func (r ApiListCostcenterCostAllocationValuesRequest) PageSize(pageSize float32) ApiListCostcenterCostAllocationValuesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListCostcenterCostAllocationValuesRequest) Execute() (*PaginatedFieldValueDto, *http.Response, error) {
	return r.ApiService.ListCostcenterCostAllocationValuesExecute(r)
}

/*
ListCostcenterCostAllocationValues Lists all possible values for the costcenter field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiListCostcenterCostAllocationValuesRequest
*/
func (a *AccountSettingsAPIService) ListCostcenterCostAllocationValues(ctx context.Context, accountUuid string) ApiListCostcenterCostAllocationValuesRequest {
	return ApiListCostcenterCostAllocationValuesRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return PaginatedFieldValueDto
func (a *AccountSettingsAPIService) ListCostcenterCostAllocationValuesExecute(r ApiListCostcenterCostAllocationValuesRequest) (*PaginatedFieldValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedFieldValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.ListCostcenterCostAllocationValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/costcenters"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProductCostAllocationValuesRequest struct {
	ctx         context.Context
	ApiService  *AccountSettingsAPIService
	accountUuid string
	page        *float32
	pageSize    *float32
}

// The number of the requested page. Can be increased as long as **hasNextPage** is true in the response.
func (r ApiListProductCostAllocationValuesRequest) Page(page float32) ApiListProductCostAllocationValuesRequest {
	r.page = &page
	return r
}

// Defines the requested number of entries for the next page.
func (r ApiListProductCostAllocationValuesRequest) PageSize(pageSize float32) ApiListProductCostAllocationValuesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListProductCostAllocationValuesRequest) Execute() (*PaginatedFieldValueDto, *http.Response, error) {
	return r.ApiService.ListProductCostAllocationValuesExecute(r)
}

/*
ListProductCostAllocationValues Lists all possible values for the product field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiListProductCostAllocationValuesRequest
*/
func (a *AccountSettingsAPIService) ListProductCostAllocationValues(ctx context.Context, accountUuid string) ApiListProductCostAllocationValuesRequest {
	return ApiListProductCostAllocationValuesRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return PaginatedFieldValueDto
func (a *AccountSettingsAPIService) ListProductCostAllocationValuesExecute(r ApiListProductCostAllocationValuesRequest) (*PaginatedFieldValueDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedFieldValueDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.ListProductCostAllocationValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/products"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCostcenterCostAllocationValuesRequest struct {
	ctx                   context.Context
	ApiService            *AccountSettingsAPIService
	accountUuid           string
	fieldValuesRequestDto *FieldValuesRequestDto
}

func (r ApiReplaceCostcenterCostAllocationValuesRequest) FieldValuesRequestDto(fieldValuesRequestDto FieldValuesRequestDto) ApiReplaceCostcenterCostAllocationValuesRequest {
	r.fieldValuesRequestDto = &fieldValuesRequestDto
	return r
}

func (r ApiReplaceCostcenterCostAllocationValuesRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReplaceCostcenterCostAllocationValuesExecute(r)
}

/*
ReplaceCostcenterCostAllocationValues Replace the current values of the costcenter field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiReplaceCostcenterCostAllocationValuesRequest
*/
func (a *AccountSettingsAPIService) ReplaceCostcenterCostAllocationValues(ctx context.Context, accountUuid string) ApiReplaceCostcenterCostAllocationValuesRequest {
	return ApiReplaceCostcenterCostAllocationValuesRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
func (a *AccountSettingsAPIService) ReplaceCostcenterCostAllocationValuesExecute(r ApiReplaceCostcenterCostAllocationValuesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.ReplaceCostcenterCostAllocationValues")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/costcenters"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fieldValuesRequestDto == nil {
		return nil, reportError("fieldValuesRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fieldValuesRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReplaceProductCostAllocationValuesRequest struct {
	ctx                   context.Context
	ApiService            *AccountSettingsAPIService
	accountUuid           string
	fieldValuesRequestDto *FieldValuesRequestDto
}

func (r ApiReplaceProductCostAllocationValuesRequest) FieldValuesRequestDto(fieldValuesRequestDto FieldValuesRequestDto) ApiReplaceProductCostAllocationValuesRequest {
	r.fieldValuesRequestDto = &fieldValuesRequestDto
	return r
}

func (r ApiReplaceProductCostAllocationValuesRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReplaceProductCostAllocationValuesExecute(r)
}

/*
ReplaceProductCostAllocationValues Replace the current values of the product field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiReplaceProductCostAllocationValuesRequest
*/
func (a *AccountSettingsAPIService) ReplaceProductCostAllocationValues(ctx context.Context, accountUuid string) ApiReplaceProductCostAllocationValuesRequest {
	return ApiReplaceProductCostAllocationValuesRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
func (a *AccountSettingsAPIService) ReplaceProductCostAllocationValuesExecute(r ApiReplaceProductCostAllocationValuesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountSettingsAPIService.ReplaceProductCostAllocationValues")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountUuid}/settings/products"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fieldValuesRequestDto == nil {
		return nil, reportError("fieldValuesRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fieldValuesRequestDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
