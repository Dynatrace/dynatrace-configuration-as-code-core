/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionCostListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCostListDto{}

// SubscriptionCostListDto struct for SubscriptionCostListDto
type SubscriptionCostListDto struct {
	// Cost data of the subscription.
	Data []SubscriptionCostBookingDto `json:"data"`
	// The time the subscription data was last modified in `2021-05-01T15:11:00Z` format.
	LastModifiedTime     string `json:"lastModifiedTime"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionCostListDto SubscriptionCostListDto

// NewSubscriptionCostListDto instantiates a new SubscriptionCostListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCostListDto(data []SubscriptionCostBookingDto, lastModifiedTime string) *SubscriptionCostListDto {
	this := SubscriptionCostListDto{}
	this.Data = data
	this.LastModifiedTime = lastModifiedTime
	return &this
}

// NewSubscriptionCostListDtoWithDefaults instantiates a new SubscriptionCostListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCostListDtoWithDefaults() *SubscriptionCostListDto {
	this := SubscriptionCostListDto{}
	return &this
}

// GetData returns the Data field value
func (o *SubscriptionCostListDto) GetData() []SubscriptionCostBookingDto {
	if o == nil {
		var ret []SubscriptionCostBookingDto
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCostListDto) GetDataOk() ([]SubscriptionCostBookingDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SubscriptionCostListDto) SetData(v []SubscriptionCostBookingDto) {
	o.Data = v
}

// GetLastModifiedTime returns the LastModifiedTime field value
func (o *SubscriptionCostListDto) GetLastModifiedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCostListDto) GetLastModifiedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedTime, true
}

// SetLastModifiedTime sets field value
func (o *SubscriptionCostListDto) SetLastModifiedTime(v string) {
	o.LastModifiedTime = v
}

func (o SubscriptionCostListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionCostListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["lastModifiedTime"] = o.LastModifiedTime

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionCostListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"lastModifiedTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionCostListDto := _SubscriptionCostListDto{}

	err = json.Unmarshal(data, &varSubscriptionCostListDto)

	if err != nil {
		return err
	}

	*o = SubscriptionCostListDto(varSubscriptionCostListDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "lastModifiedTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionCostListDto struct {
	value *SubscriptionCostListDto
	isSet bool
}

func (v NullableSubscriptionCostListDto) Get() *SubscriptionCostListDto {
	return v.value
}

func (v *NullableSubscriptionCostListDto) Set(val *SubscriptionCostListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCostListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCostListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCostListDto(val *SubscriptionCostListDto) *NullableSubscriptionCostListDto {
	return &NullableSubscriptionCostListDto{value: val, isSet: true}
}

func (v NullableSubscriptionCostListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCostListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
