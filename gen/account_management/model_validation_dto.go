/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the ValidationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationDto{}

// ValidationDto struct for ValidationDto
type ValidationDto struct {
	// A list of validation warnings.
	Warnings             []string `json:"warnings"`
	AdditionalProperties map[string]interface{}
}

type _ValidationDto ValidationDto

// NewValidationDto instantiates a new ValidationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationDto(warnings []string) *ValidationDto {
	this := ValidationDto{}
	this.Warnings = warnings
	return &this
}

// NewValidationDtoWithDefaults instantiates a new ValidationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationDtoWithDefaults() *ValidationDto {
	this := ValidationDto{}
	return &this
}

// GetWarnings returns the Warnings field value
func (o *ValidationDto) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *ValidationDto) GetWarningsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Warnings, true
}

// SetWarnings sets field value
func (o *ValidationDto) SetWarnings(v []string) {
	o.Warnings = v
}

func (o ValidationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["warnings"] = o.Warnings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ValidationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"warnings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidationDto := _ValidationDto{}

	err = json.Unmarshal(data, &varValidationDto)

	if err != nil {
		return err
	}

	*o = ValidationDto(varValidationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValidationDto struct {
	value *ValidationDto
	isSet bool
}

func (v NullableValidationDto) Get() *ValidationDto {
	return v.value
}

func (v *NullableValidationDto) Set(val *ValidationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationDto(val *ValidationDto) *NullableValidationDto {
	return &NullableValidationDto{value: val, isSet: true}
}

func (v NullableValidationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
