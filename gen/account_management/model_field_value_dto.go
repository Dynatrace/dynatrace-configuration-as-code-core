/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the FieldValueDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldValueDto{}

// FieldValueDto struct for FieldValueDto
type FieldValueDto struct {
	// The key of this value.
	Key                  string `json:"key"`
	AdditionalProperties map[string]interface{}
}

type _FieldValueDto FieldValueDto

// NewFieldValueDto instantiates a new FieldValueDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldValueDto(key string) *FieldValueDto {
	this := FieldValueDto{}
	this.Key = key
	return &this
}

// NewFieldValueDtoWithDefaults instantiates a new FieldValueDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldValueDtoWithDefaults() *FieldValueDto {
	this := FieldValueDto{}
	return &this
}

// GetKey returns the Key field value
func (o *FieldValueDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FieldValueDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FieldValueDto) SetKey(v string) {
	o.Key = v
}

func (o FieldValueDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldValueDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FieldValueDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFieldValueDto := _FieldValueDto{}

	err = json.Unmarshal(data, &varFieldValueDto)

	if err != nil {
		return err
	}

	*o = FieldValueDto(varFieldValueDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFieldValueDto struct {
	value *FieldValueDto
	isSet bool
}

func (v NullableFieldValueDto) Get() *FieldValueDto {
	return v.value
}

func (v *NullableFieldValueDto) Set(val *FieldValueDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldValueDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldValueDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldValueDto(val *FieldValueDto) *NullableFieldValueDto {
	return &NullableFieldValueDto{value: val, isSet: true}
}

func (v NullableFieldValueDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldValueDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
