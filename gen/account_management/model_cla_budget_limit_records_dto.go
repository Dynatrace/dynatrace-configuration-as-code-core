/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ClaBudgetLimitRecordsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaBudgetLimitRecordsDto{}

// ClaBudgetLimitRecordsDto struct for ClaBudgetLimitRecordsDto
type ClaBudgetLimitRecordsDto struct {
	// The ID of the cluster to which the limit applies.
	ClusterUuid string `json:"clusterUuid"`
	// The ID of the environment to which the limit applies.
	EnvironmentUuid string `json:"environmentUuid"`
	// The consumption units to which the limit applies.
	DimensionName string `json:"dimensionName"`
	TierType      string `json:"tierType"`
	// The date and time when the restriction takes effect in `2021-05-01T15:11:00Z` format.    The limit is not enforeced in real-time and might lead to overages.
	StartDate time.Time `json:"startDate"`
	// The date and time when the restriction ends in `2021-05-01T15:11:00Z` format.    The limit is not enforeced in real-time and might lead to overages.
	EndDate time.Time `json:"endDate"`
	// The limit for the cluster or environment.    If consumption exceeds the limit, monitoring will stop.
	Amount float32 `json:"amount"`
	// The ID of the Dynatrace Platform Subscription.
	SubscriptionId       float32 `json:"subscriptionId"`
	AdditionalProperties map[string]interface{}
}

type _ClaBudgetLimitRecordsDto ClaBudgetLimitRecordsDto

// NewClaBudgetLimitRecordsDto instantiates a new ClaBudgetLimitRecordsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaBudgetLimitRecordsDto(clusterUuid string, environmentUuid string, dimensionName string, tierType string, startDate time.Time, endDate time.Time, amount float32, subscriptionId float32) *ClaBudgetLimitRecordsDto {
	this := ClaBudgetLimitRecordsDto{}
	this.ClusterUuid = clusterUuid
	this.EnvironmentUuid = environmentUuid
	this.DimensionName = dimensionName
	this.TierType = tierType
	this.StartDate = startDate
	this.EndDate = endDate
	this.Amount = amount
	this.SubscriptionId = subscriptionId
	return &this
}

// NewClaBudgetLimitRecordsDtoWithDefaults instantiates a new ClaBudgetLimitRecordsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaBudgetLimitRecordsDtoWithDefaults() *ClaBudgetLimitRecordsDto {
	this := ClaBudgetLimitRecordsDto{}
	return &this
}

// GetClusterUuid returns the ClusterUuid field value
func (o *ClaBudgetLimitRecordsDto) GetClusterUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterUuid
}

// GetClusterUuidOk returns a tuple with the ClusterUuid field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetClusterUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterUuid, true
}

// SetClusterUuid sets field value
func (o *ClaBudgetLimitRecordsDto) SetClusterUuid(v string) {
	o.ClusterUuid = v
}

// GetEnvironmentUuid returns the EnvironmentUuid field value
func (o *ClaBudgetLimitRecordsDto) GetEnvironmentUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentUuid
}

// GetEnvironmentUuidOk returns a tuple with the EnvironmentUuid field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetEnvironmentUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentUuid, true
}

// SetEnvironmentUuid sets field value
func (o *ClaBudgetLimitRecordsDto) SetEnvironmentUuid(v string) {
	o.EnvironmentUuid = v
}

// GetDimensionName returns the DimensionName field value
func (o *ClaBudgetLimitRecordsDto) GetDimensionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DimensionName
}

// GetDimensionNameOk returns a tuple with the DimensionName field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetDimensionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DimensionName, true
}

// SetDimensionName sets field value
func (o *ClaBudgetLimitRecordsDto) SetDimensionName(v string) {
	o.DimensionName = v
}

// GetTierType returns the TierType field value
func (o *ClaBudgetLimitRecordsDto) GetTierType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TierType
}

// GetTierTypeOk returns a tuple with the TierType field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetTierTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TierType, true
}

// SetTierType sets field value
func (o *ClaBudgetLimitRecordsDto) SetTierType(v string) {
	o.TierType = v
}

// GetStartDate returns the StartDate field value
func (o *ClaBudgetLimitRecordsDto) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *ClaBudgetLimitRecordsDto) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *ClaBudgetLimitRecordsDto) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *ClaBudgetLimitRecordsDto) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetAmount returns the Amount field value
func (o *ClaBudgetLimitRecordsDto) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ClaBudgetLimitRecordsDto) SetAmount(v float32) {
	o.Amount = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *ClaBudgetLimitRecordsDto) GetSubscriptionId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *ClaBudgetLimitRecordsDto) GetSubscriptionIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *ClaBudgetLimitRecordsDto) SetSubscriptionId(v float32) {
	o.SubscriptionId = v
}

func (o ClaBudgetLimitRecordsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaBudgetLimitRecordsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterUuid"] = o.ClusterUuid
	toSerialize["environmentUuid"] = o.EnvironmentUuid
	toSerialize["dimensionName"] = o.DimensionName
	toSerialize["tierType"] = o.TierType
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate
	toSerialize["amount"] = o.Amount
	toSerialize["subscriptionId"] = o.SubscriptionId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClaBudgetLimitRecordsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterUuid",
		"environmentUuid",
		"dimensionName",
		"tierType",
		"startDate",
		"endDate",
		"amount",
		"subscriptionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaBudgetLimitRecordsDto := _ClaBudgetLimitRecordsDto{}

	err = json.Unmarshal(data, &varClaBudgetLimitRecordsDto)

	if err != nil {
		return err
	}

	*o = ClaBudgetLimitRecordsDto(varClaBudgetLimitRecordsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterUuid")
		delete(additionalProperties, "environmentUuid")
		delete(additionalProperties, "dimensionName")
		delete(additionalProperties, "tierType")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "subscriptionId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClaBudgetLimitRecordsDto struct {
	value *ClaBudgetLimitRecordsDto
	isSet bool
}

func (v NullableClaBudgetLimitRecordsDto) Get() *ClaBudgetLimitRecordsDto {
	return v.value
}

func (v *NullableClaBudgetLimitRecordsDto) Set(val *ClaBudgetLimitRecordsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClaBudgetLimitRecordsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClaBudgetLimitRecordsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaBudgetLimitRecordsDto(val *ClaBudgetLimitRecordsDto) *NullableClaBudgetLimitRecordsDto {
	return &NullableClaBudgetLimitRecordsDto{value: val, isSet: true}
}

func (v NullableClaBudgetLimitRecordsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaBudgetLimitRecordsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
