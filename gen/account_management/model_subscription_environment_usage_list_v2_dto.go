/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the SubscriptionEnvironmentUsageListV2Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionEnvironmentUsageListV2Dto{}

// SubscriptionEnvironmentUsageListV2Dto struct for SubscriptionEnvironmentUsageListV2Dto
type SubscriptionEnvironmentUsageListV2Dto struct {
	// Subscription usage data
	Data []SubscriptionEnvironmentUsageV2Dto `json:"data"`
	// The time the subscription data was last modified in `2021-05-01T15:11:00Z` format.
	LastModifiedTime string `json:"lastModifiedTime"`
}

// NewSubscriptionEnvironmentUsageListV2Dto instantiates a new SubscriptionEnvironmentUsageListV2Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionEnvironmentUsageListV2Dto(data []SubscriptionEnvironmentUsageV2Dto, lastModifiedTime string) *SubscriptionEnvironmentUsageListV2Dto {
	this := SubscriptionEnvironmentUsageListV2Dto{}
	this.Data = data
	this.LastModifiedTime = lastModifiedTime
	return &this
}

// NewSubscriptionEnvironmentUsageListV2DtoWithDefaults instantiates a new SubscriptionEnvironmentUsageListV2Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionEnvironmentUsageListV2DtoWithDefaults() *SubscriptionEnvironmentUsageListV2Dto {
	this := SubscriptionEnvironmentUsageListV2Dto{}
	return &this
}

// GetData returns the Data field value
func (o *SubscriptionEnvironmentUsageListV2Dto) GetData() []SubscriptionEnvironmentUsageV2Dto {
	if o == nil {
		var ret []SubscriptionEnvironmentUsageV2Dto
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentUsageListV2Dto) GetDataOk() ([]SubscriptionEnvironmentUsageV2Dto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SubscriptionEnvironmentUsageListV2Dto) SetData(v []SubscriptionEnvironmentUsageV2Dto) {
	o.Data = v
}

// GetLastModifiedTime returns the LastModifiedTime field value
func (o *SubscriptionEnvironmentUsageListV2Dto) GetLastModifiedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value
// and a boolean to check if the value has been set.
func (o *SubscriptionEnvironmentUsageListV2Dto) GetLastModifiedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedTime, true
}

// SetLastModifiedTime sets field value
func (o *SubscriptionEnvironmentUsageListV2Dto) SetLastModifiedTime(v string) {
	o.LastModifiedTime = v
}

func (o SubscriptionEnvironmentUsageListV2Dto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionEnvironmentUsageListV2Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["lastModifiedTime"] = o.LastModifiedTime
	return toSerialize, nil
}

type NullableSubscriptionEnvironmentUsageListV2Dto struct {
	value *SubscriptionEnvironmentUsageListV2Dto
	isSet bool
}

func (v NullableSubscriptionEnvironmentUsageListV2Dto) Get() *SubscriptionEnvironmentUsageListV2Dto {
	return v.value
}

func (v *NullableSubscriptionEnvironmentUsageListV2Dto) Set(val *SubscriptionEnvironmentUsageListV2Dto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionEnvironmentUsageListV2Dto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionEnvironmentUsageListV2Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionEnvironmentUsageListV2Dto(val *SubscriptionEnvironmentUsageListV2Dto) *NullableSubscriptionEnvironmentUsageListV2Dto {
	return &NullableSubscriptionEnvironmentUsageListV2Dto{value: val, isSet: true}
}

func (v NullableSubscriptionEnvironmentUsageListV2Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionEnvironmentUsageListV2Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
