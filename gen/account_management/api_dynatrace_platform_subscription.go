/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// DynatracePlatformSubscriptionAPIService DynatracePlatformSubscriptionAPI service
type DynatracePlatformSubscriptionAPIService service

type ApiGetCostAllocationBreakdownPageRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	subscriptionUuid string
	field            *string
	environmentId    *string
	from             *string
	to               *string
	pageSize         *float32
	pageKey          *string
}

// Field by which costs and usage should be split. Allowed values: &#x60;COSTCENTER&#x60;, &#x60;PRODUCT&#x60; (required unless page-key is provided)
func (r ApiGetCostAllocationBreakdownPageRequest) Field(field string) ApiGetCostAllocationBreakdownPageRequest {
	r.field = &field
	return r
}

// The identifier of an environment. (required unless page-key is provided)
func (r ApiGetCostAllocationBreakdownPageRequest) EnvironmentId(environmentId string) ApiGetCostAllocationBreakdownPageRequest {
	r.environmentId = &environmentId
	return r
}

// The start of the requested timeframe in &#x60;2021-05-01&#x60; format.
func (r ApiGetCostAllocationBreakdownPageRequest) From(from string) ApiGetCostAllocationBreakdownPageRequest {
	r.from = &from
	return r
}

// The end of the requested timeframe in &#x60;2021-05-01&#x60; format.
func (r ApiGetCostAllocationBreakdownPageRequest) To(to string) ApiGetCostAllocationBreakdownPageRequest {
	r.to = &to
	return r
}

// Defines the requested number of entries for the next page.
func (r ApiGetCostAllocationBreakdownPageRequest) PageSize(pageSize float32) ApiGetCostAllocationBreakdownPageRequest {
	r.pageSize = &pageSize
	return r
}

// A base64 encoded key to retrieve a specific page. If this query parameter is set, no other query parameters can be set.
func (r ApiGetCostAllocationBreakdownPageRequest) PageKey(pageKey string) ApiGetCostAllocationBreakdownPageRequest {
	r.pageKey = &pageKey
	return r
}

func (r ApiGetCostAllocationBreakdownPageRequest) Execute() (*PaginatedEnvironmentBreakdownDto, *http.Response, error) {
	return r.ApiService.GetCostAllocationBreakdownPageExecute(r)
}

/*
GetCostAllocationBreakdownPage Get usage data by cost allocation field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request. (required)
	@return ApiGetCostAllocationBreakdownPageRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetCostAllocationBreakdownPage(ctx context.Context, subscriptionUuid string) ApiGetCostAllocationBreakdownPageRequest {
	return ApiGetCostAllocationBreakdownPageRequest{
		ApiService:       a,
		ctx:              ctx,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return PaginatedEnvironmentBreakdownDto
func (a *DynatracePlatformSubscriptionAPIService) GetCostAllocationBreakdownPageExecute(r ApiGetCostAllocationBreakdownPageRequest) (*PaginatedEnvironmentBreakdownDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedEnvironmentBreakdownDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetCostAllocationBreakdownPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptions/{subscription-uuid}/cost-allocation"
	localVarPath = strings.Replace(localVarPath, "{"+"subscription-uuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.field != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "field", r.field, "form", "")
	}
	if r.environmentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environment-id", r.environmentId, "form", "")
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "form", "")
	}
	if r.pageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-key", r.pageKey, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentCostRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	startTime        *time.Time
	endTime          *time.Time
	environmentIds   *[]string
	capabilityKeys   *[]string
}

// The start time of the query in &#x60;2021-05-01T15:11:00Z&#x60; format.
func (r ApiGetEnvironmentCostRequest) StartTime(startTime time.Time) ApiGetEnvironmentCostRequest {
	r.startTime = &startTime
	return r
}

// The end time of the query in &#x60;2021-05-01T15:11:00Z&#x60; format.
func (r ApiGetEnvironmentCostRequest) EndTime(endTime time.Time) ApiGetEnvironmentCostRequest {
	r.endTime = &endTime
	return r
}

// A list of environments for which you want to read the usage data. To specify several environments, separate them with a comma (&#x60;,&#x60;).
func (r ApiGetEnvironmentCostRequest) EnvironmentIds(environmentIds []string) ApiGetEnvironmentCostRequest {
	r.environmentIds = &environmentIds
	return r
}

// A list of capabilities for which you want to read the usage data. To specify several capabilities, separate them with a comma (&#x60;,&#x60;).   To obtain capability keys, use the [GET subscriptions](https://dt-url.net/qd43uld) call and look for the **capabilities** field of the response.
func (r ApiGetEnvironmentCostRequest) CapabilityKeys(capabilityKeys []string) ApiGetEnvironmentCostRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiGetEnvironmentCostRequest) Execute() (*SubscriptionEnvironmentCostListV2Dto, *http.Response, error) {
	return r.ApiService.GetEnvironmentCostExecute(r)
}

/*
GetEnvironmentCost Gets the account costs of a SaaS subscription per environment

This endpoint is SaaS only.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required SaaS account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetEnvironmentCostRequest

Deprecated
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentCost(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetEnvironmentCostRequest {
	return ApiGetEnvironmentCostRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionEnvironmentCostListV2Dto
//
// Deprecated
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentCostExecute(r ApiGetEnvironmentCostRequest) (*SubscriptionEnvironmentCostListV2Dto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionEnvironmentCostListV2Dto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEnvironmentCost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "form", "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentCostV3Request struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	startTime        *time.Time
	endTime          *time.Time
	environmentIds   *[]string
	capabilityKeys   *[]string
	clusterIds       *[]string
	pageKey          *string
	pageSize         *float32
}

// The start time of the query in &#x60;2021-05-01T15:11:00Z&#x60; format. Timeframe limits (startTime, endTime) are both required, unless a \&quot;page-key\&quot; is provided instead.
func (r ApiGetEnvironmentCostV3Request) StartTime(startTime time.Time) ApiGetEnvironmentCostV3Request {
	r.startTime = &startTime
	return r
}

// The end time of the query in &#x60;2021-05-01T15:11:00Z&#x60; format. Timeframe limits (startTime, endTime) are both required, unless a \&quot;page-key\&quot; is provided instead.
func (r ApiGetEnvironmentCostV3Request) EndTime(endTime time.Time) ApiGetEnvironmentCostV3Request {
	r.endTime = &endTime
	return r
}

// A list of environments for which you want to read the usage data. To specify several environments, separate them with a comma (&#x60;,&#x60;).
func (r ApiGetEnvironmentCostV3Request) EnvironmentIds(environmentIds []string) ApiGetEnvironmentCostV3Request {
	r.environmentIds = &environmentIds
	return r
}

// A list of capabilities for which you want to read the usage data. To specify several capabilities, separate them with a comma (&#x60;,&#x60;).   To obtain capability keys, use the [GET subscriptions](https://dt-url.net/qd43uld) call and look for the **capabilities** field of the response.
func (r ApiGetEnvironmentCostV3Request) CapabilityKeys(capabilityKeys []string) ApiGetEnvironmentCostV3Request {
	r.capabilityKeys = &capabilityKeys
	return r
}

// A list of Managed clusters for which you want to read the usage data.    Not applicable to SaaS environments.
func (r ApiGetEnvironmentCostV3Request) ClusterIds(clusterIds []string) ApiGetEnvironmentCostV3Request {
	r.clusterIds = &clusterIds
	return r
}

// The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.
func (r ApiGetEnvironmentCostV3Request) PageKey(pageKey string) ApiGetEnvironmentCostV3Request {
	r.pageKey = &pageKey
	return r
}

// Defines the requested number of entries for the next page.
func (r ApiGetEnvironmentCostV3Request) PageSize(pageSize float32) ApiGetEnvironmentCostV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetEnvironmentCostV3Request) Execute() (*SubscriptionEnvironmentCostListV3Dto, *http.Response, error) {
	return r.ApiService.GetEnvironmentCostV3Execute(r)
}

/*
GetEnvironmentCostV3 Gets cost data of a subscription by environment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetEnvironmentCostV3Request
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentCostV3(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetEnvironmentCostV3Request {
	return ApiGetEnvironmentCostV3Request{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionEnvironmentCostListV3Dto
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentCostV3Execute(r ApiGetEnvironmentCostV3Request) (*SubscriptionEnvironmentCostListV3Dto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionEnvironmentCostListV3Dto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEnvironmentCostV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v3/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "form", "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "form", "multi")
		}
	}
	if r.clusterIds != nil {
		t := *r.clusterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", t, "form", "multi")
		}
	}
	if r.pageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-key", r.pageKey, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentUsageRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	startTime        *time.Time
	endTime          *time.Time
	environmentIds   *[]string
	capabilityKeys   *[]string
}

// The start of the requested timeframe in &#x60;2021-05-01T15:11:00Z&#x60; format.
func (r ApiGetEnvironmentUsageRequest) StartTime(startTime time.Time) ApiGetEnvironmentUsageRequest {
	r.startTime = &startTime
	return r
}

// The end of the requested timeframe in &#x60;2021-05-01T15:11:00Z&#x60; format.
func (r ApiGetEnvironmentUsageRequest) EndTime(endTime time.Time) ApiGetEnvironmentUsageRequest {
	r.endTime = &endTime
	return r
}

// A list of environments for which you want to read the usage data. To specify several environments, separate them with a comma (&#x60;,&#x60;).
func (r ApiGetEnvironmentUsageRequest) EnvironmentIds(environmentIds []string) ApiGetEnvironmentUsageRequest {
	r.environmentIds = &environmentIds
	return r
}

// A list of capabilities for which you want to read the usage data. To specify several capabilities, separate them with a comma (&#x60;,&#x60;).   To obtain capability keys, use the [GET subscriptions](https://dt-url.net/qd43uld) call and look for the **capabilities** field of the response.
func (r ApiGetEnvironmentUsageRequest) CapabilityKeys(capabilityKeys []string) ApiGetEnvironmentUsageRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiGetEnvironmentUsageRequest) Execute() (*SubscriptionEnvironmentUsageListV2Dto, *http.Response, error) {
	return r.ApiService.GetEnvironmentUsageExecute(r)
}

/*
GetEnvironmentUsage Gets the account usage of a SaaS subscription per environment

This endpoint is SaaS only.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required SaaS account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetEnvironmentUsageRequest

Deprecated
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentUsage(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetEnvironmentUsageRequest {
	return ApiGetEnvironmentUsageRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionEnvironmentUsageListV2Dto
//
// Deprecated
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentUsageExecute(r ApiGetEnvironmentUsageRequest) (*SubscriptionEnvironmentUsageListV2Dto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionEnvironmentUsageListV2Dto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEnvironmentUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "form", "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentUsageV3Request struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	startTime        *time.Time
	endTime          *time.Time
	environmentIds   *[]string
	capabilityKeys   *[]string
	clusterIds       *[]string
	pageKey          *string
	pageSize         *float32
}

// The start time of the query in &#x60;2021-05-01T15:11:00Z&#x60; format. Timeframe limits (startTime, endTime) are both required, unless a \&quot;page-key\&quot; is provided instead.
func (r ApiGetEnvironmentUsageV3Request) StartTime(startTime time.Time) ApiGetEnvironmentUsageV3Request {
	r.startTime = &startTime
	return r
}

// The end time of the query in &#x60;2021-05-01T15:11:00Z&#x60; format. Timeframe limits (startTime, endTime) are both required, unless a \&quot;page-key\&quot; is provided instead.
func (r ApiGetEnvironmentUsageV3Request) EndTime(endTime time.Time) ApiGetEnvironmentUsageV3Request {
	r.endTime = &endTime
	return r
}

// A list of environments for which you want to read the usage data. To specify several environments, separate them with a comma (&#x60;,&#x60;).
func (r ApiGetEnvironmentUsageV3Request) EnvironmentIds(environmentIds []string) ApiGetEnvironmentUsageV3Request {
	r.environmentIds = &environmentIds
	return r
}

// A list of capabilities for which you want to read the usage data. To specify several capabilities, separate them with a comma (&#x60;,&#x60;).   To obtain capability keys, use the [GET subscriptions](https://dt-url.net/qd43uld) call and look for the **capabilities** field of the response.
func (r ApiGetEnvironmentUsageV3Request) CapabilityKeys(capabilityKeys []string) ApiGetEnvironmentUsageV3Request {
	r.capabilityKeys = &capabilityKeys
	return r
}

// A list of Managed clusters for which you want to read the usage data.    Not applicable to SaaS environments.
func (r ApiGetEnvironmentUsageV3Request) ClusterIds(clusterIds []string) ApiGetEnvironmentUsageV3Request {
	r.clusterIds = &clusterIds
	return r
}

// The cursor for the next page of results. You can find it in the **nextPageKey** field of the previous response.
func (r ApiGetEnvironmentUsageV3Request) PageKey(pageKey string) ApiGetEnvironmentUsageV3Request {
	r.pageKey = &pageKey
	return r
}

// Defines the requested number of entries for the next page.
func (r ApiGetEnvironmentUsageV3Request) PageSize(pageSize float32) ApiGetEnvironmentUsageV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetEnvironmentUsageV3Request) Execute() (*SubscriptionEnvironmentUsageListV3Dto, *http.Response, error) {
	return r.ApiService.GetEnvironmentUsageV3Execute(r)
}

/*
GetEnvironmentUsageV3 Gets usage data of a subsctiption by environment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetEnvironmentUsageV3Request
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentUsageV3(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetEnvironmentUsageV3Request {
	return ApiGetEnvironmentUsageV3Request{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionEnvironmentUsageListV3Dto
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentUsageV3Execute(r ApiGetEnvironmentUsageV3Request) (*SubscriptionEnvironmentUsageListV3Dto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionEnvironmentUsageListV3Dto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEnvironmentUsageV3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v3/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "form", "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "form", "multi")
		}
	}
	if r.clusterIds != nil {
		t := *r.clusterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", t, "form", "multi")
		}
	}
	if r.pageKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-key", r.pageKey, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page-size", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventsRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
	startTime   *time.Time
	endTime     *time.Time
	eventType   *string
}

// The start of the requested timeframe in &#x60;2021-05-01T15:11:00Z&#x60; format.
func (r ApiGetEventsRequest) StartTime(startTime time.Time) ApiGetEventsRequest {
	r.startTime = &startTime
	return r
}

// The end of the requested timeframe in &#x60;2021-05-01T15:11:00Z&#x60; format.
func (r ApiGetEventsRequest) EndTime(endTime time.Time) ApiGetEventsRequest {
	r.endTime = &endTime
	return r
}

// The type of the requested events: cost or forecast.    If not set, all events are returned.
func (r ApiGetEventsRequest) EventType(eventType string) ApiGetEventsRequest {
	r.eventType = &eventType
	return r
}

func (r ApiGetEventsRequest) Execute() ([]Event, *http.Response, error) {
	return r.ApiService.GetEventsExecute(r)
}

/*
GetEvents Lists all notifications for an account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiGetEventsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEvents(ctx context.Context, accountUuid string) ApiGetEventsRequest {
	return ApiGetEventsRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return []Event
func (a *DynatracePlatformSubscriptionAPIService) GetEventsExecute(r ApiGetEventsRequest) ([]Event, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/events"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetForecastRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiGetForecastRequest) Execute() (*Forecast, *http.Response, error) {
	return r.ApiService.GetForecastExecute(r)
}

/*
GetForecast Gets a forecast of the subscription usage by the end of the annual commitment period

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiGetForecastRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetForecast(ctx context.Context, accountUuid string) ApiGetForecastRequest {
	return ApiGetForecastRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return Forecast
func (a *DynatracePlatformSubscriptionAPIService) GetForecastExecute(r ApiGetForecastRequest) (*Forecast, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Forecast
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/forecast"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubscriptionRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
}

func (r ApiGetSubscriptionRequest) Execute() (*SubscriptionDto, *http.Response, error) {
	return r.ApiService.GetSubscriptionExecute(r)
}

/*
GetSubscription Get a subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetSubscriptionRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetSubscription(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetSubscriptionRequest {
	return ApiGetSubscriptionRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionDto
func (a *DynatracePlatformSubscriptionAPIService) GetSubscriptionExecute(r ApiGetSubscriptionRequest) (*SubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTotalSubscriptionCostRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	environmentIds   *[]string
	capabilityKeys   *[]string
	clusterIds       *[]string
}

// A list of environments for which you want to read the usage data. To specify several environments, separate them with a comma (&#x60;,&#x60;).
func (r ApiGetTotalSubscriptionCostRequest) EnvironmentIds(environmentIds []string) ApiGetTotalSubscriptionCostRequest {
	r.environmentIds = &environmentIds
	return r
}

// A list of capabilities for which you want to read the usage data. To specify several capabilities, separate them with a comma (&#x60;,&#x60;).   To obtain capability keys, use the [GET subscriptions](https://dt-url.net/qd43uld) call and look for the **capabilities** field of the response.
func (r ApiGetTotalSubscriptionCostRequest) CapabilityKeys(capabilityKeys []string) ApiGetTotalSubscriptionCostRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

// A list of Managed clusters for which you want to read the usage data.    Not applicable to SaaS environments.
func (r ApiGetTotalSubscriptionCostRequest) ClusterIds(clusterIds []string) ApiGetTotalSubscriptionCostRequest {
	r.clusterIds = &clusterIds
	return r
}

func (r ApiGetTotalSubscriptionCostRequest) Execute() (*SubscriptionCostListDto, *http.Response, error) {
	return r.ApiService.GetTotalSubscriptionCostExecute(r)
}

/*
GetTotalSubscriptionCost Gets aggregated cost data of a subscription by date

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetTotalSubscriptionCostRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionCost(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetTotalSubscriptionCostRequest {
	return ApiGetTotalSubscriptionCostRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionCostListDto
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionCostExecute(r ApiGetTotalSubscriptionCostRequest) (*SubscriptionCostListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionCostListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetTotalSubscriptionCost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "form", "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "form", "multi")
		}
	}
	if r.clusterIds != nil {
		t := *r.clusterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTotalSubscriptionUsageRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	environmentIds   *[]string
	capabilityKeys   *[]string
	clusterIds       *[]string
}

// A list of environments for which you want to read the usage data. To specify several environments, separate them with a comma (&#x60;,&#x60;).
func (r ApiGetTotalSubscriptionUsageRequest) EnvironmentIds(environmentIds []string) ApiGetTotalSubscriptionUsageRequest {
	r.environmentIds = &environmentIds
	return r
}

// A list of capabilities for which you want to read the usage data. To specify several capabilities, separate them with a comma (&#x60;,&#x60;).   To obtain capability keys, use the [GET subscriptions](https://dt-url.net/qd43uld) call and look for the **capabilities** field of the response.
func (r ApiGetTotalSubscriptionUsageRequest) CapabilityKeys(capabilityKeys []string) ApiGetTotalSubscriptionUsageRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

// A list of Managed clusters for which you want to read the usage data.    Not applicable to SaaS environments.
func (r ApiGetTotalSubscriptionUsageRequest) ClusterIds(clusterIds []string) ApiGetTotalSubscriptionUsageRequest {
	r.clusterIds = &clusterIds
	return r
}

func (r ApiGetTotalSubscriptionUsageRequest) Execute() (*SubscriptionUsageListDto, *http.Response, error) {
	return r.ApiService.GetTotalSubscriptionUsageExecute(r)
}

/*
GetTotalSubscriptionUsage Gets usage data of a subscription by date

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription.   Fetch the list of subscriptions via the [GET all subscriptions](https://dt-url.net/jq03jvq) request.
	@return ApiGetTotalSubscriptionUsageRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionUsage(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetTotalSubscriptionUsageRequest {
	return ApiGetTotalSubscriptionUsageRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionUsageListDto
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionUsageExecute(r ApiGetTotalSubscriptionUsageRequest) (*SubscriptionUsageListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionUsageListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetTotalSubscriptionUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "form", "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "form", "multi")
		}
	}
	if r.clusterIds != nil {
		t := *r.clusterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRateCardsRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiListRateCardsRequest) Execute() ([]RateCardSummaryDto, *http.Response, error) {
	return r.ApiService.ListRateCardsExecute(r)
}

/*
ListRateCards Lists all rate cards of an account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiListRateCardsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) ListRateCards(ctx context.Context, accountUuid string) ApiListRateCardsRequest {
	return ApiListRateCardsRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return []RateCardSummaryDto
func (a *DynatracePlatformSubscriptionAPIService) ListRateCardsExecute(r ApiListRateCardsRequest) ([]RateCardSummaryDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RateCardSummaryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.ListRateCards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v1/accounts/{accountUuid}/rate-cards"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSubscriptionsRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiListSubscriptionsRequest) Execute() (*SubscriptionListDto, *http.Response, error) {
	return r.ApiService.ListSubscriptionsExecute(r)
}

/*
ListSubscriptions Lists all subscriptions of an account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiListSubscriptionsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) ListSubscriptions(ctx context.Context, accountUuid string) ApiListSubscriptionsRequest {
	return ApiListSubscriptionsRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionListDto
func (a *DynatracePlatformSubscriptionAPIService) ListSubscriptionsExecute(r ApiListSubscriptionsRequest) (*SubscriptionListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.ListSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
