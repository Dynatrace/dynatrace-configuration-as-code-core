/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// DynatracePlatformSubscriptionAPIService DynatracePlatformSubscriptionAPI service
type DynatracePlatformSubscriptionAPIService service

type ApiGetEnvironmentCostRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	startTime        *time.Time
	endTime          *time.Time
	environmentIds   *[]string
	capabilityKeys   *[]string
}

// Date as ISO string
func (r ApiGetEnvironmentCostRequest) StartTime(startTime time.Time) ApiGetEnvironmentCostRequest {
	r.startTime = &startTime
	return r
}

// Date as ISO string
func (r ApiGetEnvironmentCostRequest) EndTime(endTime time.Time) ApiGetEnvironmentCostRequest {
	r.endTime = &endTime
	return r
}

func (r ApiGetEnvironmentCostRequest) EnvironmentIds(environmentIds []string) ApiGetEnvironmentCostRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiGetEnvironmentCostRequest) CapabilityKeys(capabilityKeys []string) ApiGetEnvironmentCostRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiGetEnvironmentCostRequest) Execute() (*SubscriptionEnvironmentCostListV2Dto, *http.Response, error) {
	return r.ApiService.GetEnvironmentCostExecute(r)
}

/*
GetEnvironmentCost Get cost summary grouped by environment for a given subscription - SaaS only

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required SaaS account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription
	@return ApiGetEnvironmentCostRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentCost(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetEnvironmentCostRequest {
	return ApiGetEnvironmentCostRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionEnvironmentCostListV2Dto
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentCostExecute(r ApiGetEnvironmentCostRequest) (*SubscriptionEnvironmentCostListV2Dto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionEnvironmentCostListV2Dto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEnvironmentCost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEnvironmentUsageRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	startTime        *time.Time
	endTime          *time.Time
	environmentIds   *[]string
	capabilityKeys   *[]string
}

// Date as ISO string
func (r ApiGetEnvironmentUsageRequest) StartTime(startTime time.Time) ApiGetEnvironmentUsageRequest {
	r.startTime = &startTime
	return r
}

// Date as ISO string
func (r ApiGetEnvironmentUsageRequest) EndTime(endTime time.Time) ApiGetEnvironmentUsageRequest {
	r.endTime = &endTime
	return r
}

func (r ApiGetEnvironmentUsageRequest) EnvironmentIds(environmentIds []string) ApiGetEnvironmentUsageRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiGetEnvironmentUsageRequest) CapabilityKeys(capabilityKeys []string) ApiGetEnvironmentUsageRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiGetEnvironmentUsageRequest) Execute() (*SubscriptionEnvironmentUsageListV2Dto, *http.Response, error) {
	return r.ApiService.GetEnvironmentUsageExecute(r)
}

/*
GetEnvironmentUsage Get usage summary grouped by environment for a given subscription - SaaS only

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required SaaS account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription
	@return ApiGetEnvironmentUsageRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentUsage(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetEnvironmentUsageRequest {
	return ApiGetEnvironmentUsageRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionEnvironmentUsageListV2Dto
func (a *DynatracePlatformSubscriptionAPIService) GetEnvironmentUsageExecute(r ApiGetEnvironmentUsageRequest) (*SubscriptionEnvironmentUsageListV2Dto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionEnvironmentUsageListV2Dto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEnvironmentUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/environments/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventsRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
	startTime   *time.Time
	endTime     *time.Time
	eventType   *string
}

// Date as ISO string
func (r ApiGetEventsRequest) StartTime(startTime time.Time) ApiGetEventsRequest {
	r.startTime = &startTime
	return r
}

// Date as ISO string
func (r ApiGetEventsRequest) EndTime(endTime time.Time) ApiGetEventsRequest {
	r.endTime = &endTime
	return r
}

func (r ApiGetEventsRequest) EventType(eventType string) ApiGetEventsRequest {
	r.eventType = &eventType
	return r
}

func (r ApiGetEventsRequest) Execute() ([]Event, *http.Response, error) {
	return r.ApiService.GetEventsExecute(r)
}

/*
GetEvents Get all notification events for a given subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@return ApiGetEventsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetEvents(ctx context.Context, accountUuid string) ApiGetEventsRequest {
	return ApiGetEventsRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return []Event
func (a *DynatracePlatformSubscriptionAPIService) GetEventsExecute(r ApiGetEventsRequest) ([]Event, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/events"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetForecastRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiGetForecastRequest) Execute() (*Forecast, *http.Response, error) {
	return r.ApiService.GetForecastExecute(r)
}

/*
GetForecast Get forecast snapshot for a given account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@return ApiGetForecastRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetForecast(ctx context.Context, accountUuid string) ApiGetForecastRequest {
	return ApiGetForecastRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return Forecast
func (a *DynatracePlatformSubscriptionAPIService) GetForecastExecute(r ApiGetForecastRequest) (*Forecast, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Forecast
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/forecast"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubscriptionRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
}

func (r ApiGetSubscriptionRequest) Execute() (*SubscriptionDto, *http.Response, error) {
	return r.ApiService.GetSubscriptionExecute(r)
}

/*
GetSubscription Get specific subscription by uuid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription
	@return ApiGetSubscriptionRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetSubscription(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetSubscriptionRequest {
	return ApiGetSubscriptionRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionDto
func (a *DynatracePlatformSubscriptionAPIService) GetSubscriptionExecute(r ApiGetSubscriptionRequest) (*SubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTotalSubscriptionCostRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	environmentIds   *[]string
	capabilityKeys   *[]string
	clusterIds       *[]string
}

func (r ApiGetTotalSubscriptionCostRequest) EnvironmentIds(environmentIds []string) ApiGetTotalSubscriptionCostRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiGetTotalSubscriptionCostRequest) CapabilityKeys(capabilityKeys []string) ApiGetTotalSubscriptionCostRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiGetTotalSubscriptionCostRequest) ClusterIds(clusterIds []string) ApiGetTotalSubscriptionCostRequest {
	r.clusterIds = &clusterIds
	return r
}

func (r ApiGetTotalSubscriptionCostRequest) Execute() (*SubscriptionCostListDto, *http.Response, error) {
	return r.ApiService.GetTotalSubscriptionCostExecute(r)
}

/*
GetTotalSubscriptionCost Get aggregated cost data grouped by date for a given subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription
	@return ApiGetTotalSubscriptionCostRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionCost(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetTotalSubscriptionCostRequest {
	return ApiGetTotalSubscriptionCostRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionCostListDto
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionCostExecute(r ApiGetTotalSubscriptionCostRequest) (*SubscriptionCostListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionCostListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetTotalSubscriptionCost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/cost"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	if r.clusterIds != nil {
		t := *r.clusterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTotalSubscriptionUsageRequest struct {
	ctx              context.Context
	ApiService       *DynatracePlatformSubscriptionAPIService
	accountUuid      string
	subscriptionUuid string
	environmentIds   *[]string
	capabilityKeys   *[]string
	clusterIds       *[]string
}

func (r ApiGetTotalSubscriptionUsageRequest) EnvironmentIds(environmentIds []string) ApiGetTotalSubscriptionUsageRequest {
	r.environmentIds = &environmentIds
	return r
}

func (r ApiGetTotalSubscriptionUsageRequest) CapabilityKeys(capabilityKeys []string) ApiGetTotalSubscriptionUsageRequest {
	r.capabilityKeys = &capabilityKeys
	return r
}

func (r ApiGetTotalSubscriptionUsageRequest) ClusterIds(clusterIds []string) ApiGetTotalSubscriptionUsageRequest {
	r.clusterIds = &clusterIds
	return r
}

func (r ApiGetTotalSubscriptionUsageRequest) Execute() (*SubscriptionUsageListDto, *http.Response, error) {
	return r.ApiService.GetTotalSubscriptionUsageExecute(r)
}

/*
GetTotalSubscriptionUsage Get aggregated usage data grouped by date for a given subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@param subscriptionUuid The UUID of the requested subscription
	@return ApiGetTotalSubscriptionUsageRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionUsage(ctx context.Context, accountUuid string, subscriptionUuid string) ApiGetTotalSubscriptionUsageRequest {
	return ApiGetTotalSubscriptionUsageRequest{
		ApiService:       a,
		ctx:              ctx,
		accountUuid:      accountUuid,
		subscriptionUuid: subscriptionUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionUsageListDto
func (a *DynatracePlatformSubscriptionAPIService) GetTotalSubscriptionUsageExecute(r ApiGetTotalSubscriptionUsageRequest) (*SubscriptionUsageListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionUsageListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.GetTotalSubscriptionUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions/{subscriptionUuid}/usage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionUuid"+"}", url.PathEscape(parameterValueToString(r.subscriptionUuid, "subscriptionUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentIds != nil {
		t := *r.environmentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "environmentIds", t, "multi")
		}
	}
	if r.capabilityKeys != nil {
		t := *r.capabilityKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "capabilityKeys", t, "multi")
		}
	}
	if r.clusterIds != nil {
		t := *r.clusterIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusterIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSubscriptionsRequest struct {
	ctx         context.Context
	ApiService  *DynatracePlatformSubscriptionAPIService
	accountUuid string
}

func (r ApiListSubscriptionsRequest) Execute() (*SubscriptionListDto, *http.Response, error) {
	return r.ApiService.ListSubscriptionsExecute(r)
}

/*
ListSubscriptions Get list of subscriptions by account uuid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.
	@return ApiListSubscriptionsRequest
*/
func (a *DynatracePlatformSubscriptionAPIService) ListSubscriptions(ctx context.Context, accountUuid string) ApiListSubscriptionsRequest {
	return ApiListSubscriptionsRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return SubscriptionListDto
func (a *DynatracePlatformSubscriptionAPIService) ListSubscriptionsExecute(r ApiListSubscriptionsRequest) (*SubscriptionListDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionListDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynatracePlatformSubscriptionAPIService.ListSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub/v2/accounts/{accountUuid}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
