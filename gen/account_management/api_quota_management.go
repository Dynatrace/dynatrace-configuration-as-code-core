/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// QuotaManagementAPIService QuotaManagementAPI service
type QuotaManagementAPIService service

type ApiEnableOverageRequest struct {
	ctx                             context.Context
	ApiService                      *QuotaManagementAPIService
	accountUuid                     string
	environmentUuid                 string
	hostMonitoringOverageEnabledDto *HostMonitoringOverageEnabledDto
}

// The JSON body of the request. Contains the [host units](https://dt-url.net/hu03ub5) overage setting.
func (r ApiEnableOverageRequest) HostMonitoringOverageEnabledDto(hostMonitoringOverageEnabledDto HostMonitoringOverageEnabledDto) ApiEnableOverageRequest {
	r.hostMonitoringOverageEnabledDto = &hostMonitoringOverageEnabledDto
	return r
}

func (r ApiEnableOverageRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnableOverageExecute(r)
}

/*
EnableOverage Sets the host units overage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@param environmentUuid The ID of the environment where you want to set the overage.
	@return ApiEnableOverageRequest
*/
func (a *QuotaManagementAPIService) EnableOverage(ctx context.Context, accountUuid string, environmentUuid string) ApiEnableOverageRequest {
	return ApiEnableOverageRequest{
		ApiService:      a,
		ctx:             ctx,
		accountUuid:     accountUuid,
		environmentUuid: environmentUuid,
	}
}

// Execute executes the request
func (a *QuotaManagementAPIService) EnableOverageExecute(r ApiEnableOverageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuotaManagementAPIService.EnableOverage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/env/v1/accounts/{accountUuid}/quotas/host-monitoring/environments/{environmentUuid}/overage"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentUuid"+"}", url.PathEscape(parameterValueToString(r.environmentUuid, "environmentUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hostMonitoringOverageEnabledDto == nil {
		return nil, reportError("hostMonitoringOverageEnabledDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hostMonitoringOverageEnabledDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetQuotaRequest struct {
	ctx         context.Context
	ApiService  *QuotaManagementAPIService
	accountUuid string
}

func (r ApiGetQuotaRequest) Execute() (*ContractLimitDto, *http.Response, error) {
	return r.ApiService.GetQuotaExecute(r)
}

/*
GetQuota Gets the host units quota of an account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiGetQuotaRequest
*/
func (a *QuotaManagementAPIService) GetQuota(ctx context.Context, accountUuid string) ApiGetQuotaRequest {
	return ApiGetQuotaRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
//
//	@return ContractLimitDto
func (a *QuotaManagementAPIService) GetQuotaExecute(r ApiGetQuotaRequest) (*ContractLimitDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContractLimitDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuotaManagementAPIService.GetQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/env/v1/accounts/{accountUuid}/quotas/host-monitoring"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSplitHostMonitoringCreditsRequest struct {
	ctx                      context.Context
	ApiService               *QuotaManagementAPIService
	accountUuid              string
	environmentChangeListDto *[]EnvironmentChangeListDto
}

// The JSON body of the request. Contains the list of environment-level quotas to be set.
func (r ApiSplitHostMonitoringCreditsRequest) EnvironmentChangeListDto(environmentChangeListDto []EnvironmentChangeListDto) ApiSplitHostMonitoringCreditsRequest {
	r.environmentChangeListDto = &environmentChangeListDto
	return r
}

func (r ApiSplitHostMonitoringCreditsRequest) Execute() (*http.Response, error) {
	return r.ApiService.SplitHostMonitoringCreditsExecute(r)
}

/*
SplitHostMonitoringCredits Updates environment-level host unit quotas

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountUuid The ID of the required account.    You can find the UUID on the **Account Management** > **Identity & access management** > **OAuth clients** page, during creation of an OAuth client.
	@return ApiSplitHostMonitoringCreditsRequest
*/
func (a *QuotaManagementAPIService) SplitHostMonitoringCredits(ctx context.Context, accountUuid string) ApiSplitHostMonitoringCreditsRequest {
	return ApiSplitHostMonitoringCreditsRequest{
		ApiService:  a,
		ctx:         ctx,
		accountUuid: accountUuid,
	}
}

// Execute executes the request
func (a *QuotaManagementAPIService) SplitHostMonitoringCreditsExecute(r ApiSplitHostMonitoringCreditsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuotaManagementAPIService.SplitHostMonitoringCredits")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/env/v1/accounts/{accountUuid}/quotas/host-monitoring"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUuid"+"}", url.PathEscape(parameterValueToString(r.accountUuid, "accountUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.environmentChangeListDto == nil {
		return nil, reportError("environmentChangeListDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.environmentChangeListDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
