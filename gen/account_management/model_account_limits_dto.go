/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the AccountLimitsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountLimitsDto{}

// AccountLimitsDto struct for AccountLimitsDto
type AccountLimitsDto struct {
	CurrentValue         float32 `json:"currentValue"`
	LimitType            string  `json:"limitType"`
	LimitValue           float32 `json:"limitValue"`
	AdditionalProperties map[string]interface{}
}

type _AccountLimitsDto AccountLimitsDto

// NewAccountLimitsDto instantiates a new AccountLimitsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountLimitsDto(currentValue float32, limitType string, limitValue float32) *AccountLimitsDto {
	this := AccountLimitsDto{}
	this.CurrentValue = currentValue
	this.LimitType = limitType
	this.LimitValue = limitValue
	return &this
}

// NewAccountLimitsDtoWithDefaults instantiates a new AccountLimitsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountLimitsDtoWithDefaults() *AccountLimitsDto {
	this := AccountLimitsDto{}
	return &this
}

// GetCurrentValue returns the CurrentValue field value
func (o *AccountLimitsDto) GetCurrentValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value
// and a boolean to check if the value has been set.
func (o *AccountLimitsDto) GetCurrentValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentValue, true
}

// SetCurrentValue sets field value
func (o *AccountLimitsDto) SetCurrentValue(v float32) {
	o.CurrentValue = v
}

// GetLimitType returns the LimitType field value
func (o *AccountLimitsDto) GetLimitType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LimitType
}

// GetLimitTypeOk returns a tuple with the LimitType field value
// and a boolean to check if the value has been set.
func (o *AccountLimitsDto) GetLimitTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitType, true
}

// SetLimitType sets field value
func (o *AccountLimitsDto) SetLimitType(v string) {
	o.LimitType = v
}

// GetLimitValue returns the LimitValue field value
func (o *AccountLimitsDto) GetLimitValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LimitValue
}

// GetLimitValueOk returns a tuple with the LimitValue field value
// and a boolean to check if the value has been set.
func (o *AccountLimitsDto) GetLimitValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LimitValue, true
}

// SetLimitValue sets field value
func (o *AccountLimitsDto) SetLimitValue(v float32) {
	o.LimitValue = v
}

func (o AccountLimitsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountLimitsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currentValue"] = o.CurrentValue
	toSerialize["limitType"] = o.LimitType
	toSerialize["limitValue"] = o.LimitValue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountLimitsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currentValue",
		"limitType",
		"limitValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountLimitsDto := _AccountLimitsDto{}

	err = json.Unmarshal(data, &varAccountLimitsDto)

	if err != nil {
		return err
	}

	*o = AccountLimitsDto(varAccountLimitsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currentValue")
		delete(additionalProperties, "limitType")
		delete(additionalProperties, "limitValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountLimitsDto struct {
	value *AccountLimitsDto
	isSet bool
}

func (v NullableAccountLimitsDto) Get() *AccountLimitsDto {
	return v.value
}

func (v *NullableAccountLimitsDto) Set(val *AccountLimitsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountLimitsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountLimitsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountLimitsDto(val *AccountLimitsDto) *NullableAccountLimitsDto {
	return &NullableAccountLimitsDto{value: val, isSet: true}
}

func (v NullableAccountLimitsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountLimitsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
