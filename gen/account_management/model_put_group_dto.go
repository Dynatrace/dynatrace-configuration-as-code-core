/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the PutGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutGroupDto{}

// PutGroupDto struct for PutGroupDto
type PutGroupDto struct {
	// The UUID of the user group.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the user group.
	Name string `json:"name"`
	// A short description of the user group.
	Description *string `json:"description,omitempty"`
	// A list of values associating this group with the corresponding claim from an identity provider. If present, sets `owner` to SAML, otherwise `owner` will be LOCAL
	FederatedAttributeValues []string `json:"federatedAttributeValues,omitempty"`
	// The owner type of the group.
	Owner map[string]interface{} `json:"owner,omitempty"`
}

// NewPutGroupDto instantiates a new PutGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutGroupDto(name string) *PutGroupDto {
	this := PutGroupDto{}
	this.Name = name
	return &this
}

// NewPutGroupDtoWithDefaults instantiates a new PutGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutGroupDtoWithDefaults() *PutGroupDto {
	this := PutGroupDto{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PutGroupDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutGroupDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PutGroupDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PutGroupDto) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value
func (o *PutGroupDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PutGroupDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PutGroupDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PutGroupDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutGroupDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PutGroupDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PutGroupDto) SetDescription(v string) {
	o.Description = &v
}

// GetFederatedAttributeValues returns the FederatedAttributeValues field value if set, zero value otherwise.
func (o *PutGroupDto) GetFederatedAttributeValues() []string {
	if o == nil || IsNil(o.FederatedAttributeValues) {
		var ret []string
		return ret
	}
	return o.FederatedAttributeValues
}

// GetFederatedAttributeValuesOk returns a tuple with the FederatedAttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutGroupDto) GetFederatedAttributeValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.FederatedAttributeValues) {
		return nil, false
	}
	return o.FederatedAttributeValues, true
}

// HasFederatedAttributeValues returns a boolean if a field has been set.
func (o *PutGroupDto) HasFederatedAttributeValues() bool {
	if o != nil && !IsNil(o.FederatedAttributeValues) {
		return true
	}

	return false
}

// SetFederatedAttributeValues gets a reference to the given []string and assigns it to the FederatedAttributeValues field.
func (o *PutGroupDto) SetFederatedAttributeValues(v []string) {
	o.FederatedAttributeValues = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *PutGroupDto) GetOwner() map[string]interface{} {
	if o == nil || IsNil(o.Owner) {
		var ret map[string]interface{}
		return ret
	}
	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutGroupDto) GetOwnerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Owner) {
		return map[string]interface{}{}, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PutGroupDto) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given map[string]interface{} and assigns it to the Owner field.
func (o *PutGroupDto) SetOwner(v map[string]interface{}) {
	o.Owner = v
}

func (o PutGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FederatedAttributeValues) {
		toSerialize["federatedAttributeValues"] = o.FederatedAttributeValues
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullablePutGroupDto struct {
	value *PutGroupDto
	isSet bool
}

func (v NullablePutGroupDto) Get() *PutGroupDto {
	return v.value
}

func (v *NullablePutGroupDto) Set(val *PutGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePutGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePutGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutGroupDto(val *PutGroupDto) *NullablePutGroupDto {
	return &NullablePutGroupDto{value: val, isSet: true}
}

func (v NullablePutGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
