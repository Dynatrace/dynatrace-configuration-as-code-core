/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentDto{}

// EnvironmentDto struct for EnvironmentDto
type EnvironmentDto struct {
	// The UUID of the environment.
	Id string `json:"id"`
	// Friendly name of the environment
	Name *string `json:"name,omitempty"`
	// Property to determine if environment is active
	Active bool `json:"active"`
	// The url of the environment
	Url                  string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _EnvironmentDto EnvironmentDto

// NewEnvironmentDto instantiates a new EnvironmentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentDto(id string, active bool, url string) *EnvironmentDto {
	this := EnvironmentDto{}
	this.Id = id
	this.Active = active
	this.Url = url
	return &this
}

// NewEnvironmentDtoWithDefaults instantiates a new EnvironmentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentDtoWithDefaults() *EnvironmentDto {
	this := EnvironmentDto{}
	return &this
}

// GetId returns the Id field value
func (o *EnvironmentDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentDto) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value
func (o *EnvironmentDto) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *EnvironmentDto) SetActive(v bool) {
	o.Active = v
}

// GetUrl returns the Url field value
func (o *EnvironmentDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *EnvironmentDto) SetUrl(v string) {
	o.Url = v
}

func (o EnvironmentDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["active"] = o.Active
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvironmentDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"active",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentDto := _EnvironmentDto{}

	err = json.Unmarshal(data, &varEnvironmentDto)

	if err != nil {
		return err
	}

	*o = EnvironmentDto(varEnvironmentDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "active")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvironmentDto struct {
	value *EnvironmentDto
	isSet bool
}

func (v NullableEnvironmentDto) Get() *EnvironmentDto {
	return v.value
}

func (v *NullableEnvironmentDto) Set(val *EnvironmentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentDto(val *EnvironmentDto) *NullableEnvironmentDto {
	return &NullableEnvironmentDto{value: val, isSet: true}
}

func (v NullableEnvironmentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
