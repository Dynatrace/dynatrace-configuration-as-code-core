/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
)

// checks if the UserListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserListDto{}

// UserListDto struct for UserListDto
type UserListDto struct {
	// The number of entries in the list.
	Count float32 `json:"count"`
	// A list of the account's users.
	Items []UsersDto `json:"items"`
}

// NewUserListDto instantiates a new UserListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserListDto(count float32, items []UsersDto) *UserListDto {
	this := UserListDto{}
	this.Count = count
	this.Items = items
	return &this
}

// NewUserListDtoWithDefaults instantiates a new UserListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserListDtoWithDefaults() *UserListDto {
	this := UserListDto{}
	return &this
}

// GetCount returns the Count field value
func (o *UserListDto) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *UserListDto) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *UserListDto) SetCount(v float32) {
	o.Count = v
}

// GetItems returns the Items field value
func (o *UserListDto) GetItems() []UsersDto {
	if o == nil {
		var ret []UsersDto
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *UserListDto) GetItemsOk() ([]UsersDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *UserListDto) SetItems(v []UsersDto) {
	o.Items = v
}

func (o UserListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

type NullableUserListDto struct {
	value *UserListDto
	isSet bool
}

func (v NullableUserListDto) Get() *UserListDto {
	return v.value
}

func (v *NullableUserListDto) Set(val *UserListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserListDto(val *UserListDto) *NullableUserListDto {
	return &NullableUserListDto{value: val, isSet: true}
}

func (v NullableUserListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
