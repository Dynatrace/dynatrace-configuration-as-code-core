/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the ExternalServiceUserWithGroupUuidDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalServiceUserWithGroupUuidDto{}

// ExternalServiceUserWithGroupUuidDto struct for ExternalServiceUserWithGroupUuidDto
type ExternalServiceUserWithGroupUuidDto struct {
	// UUID of service user
	Uid string `json:"uid"`
	// Email of service user
	Email string `json:"email"`
	// Name of service user
	Name string `json:"name"`
	// Surname of service user
	Surname *string `json:"surname,omitempty"`
	// The description of the service user
	Description *string `json:"description,omitempty"`
	// The date and time when the user was created in `2021-05-01T15:11:00Z` format.
	CreatedAt string `json:"createdAt"`
	// Uuid of the group which enables assigning policy to service user
	GroupUuid            string `json:"groupUuid"`
	AdditionalProperties map[string]interface{}
}

type _ExternalServiceUserWithGroupUuidDto ExternalServiceUserWithGroupUuidDto

// NewExternalServiceUserWithGroupUuidDto instantiates a new ExternalServiceUserWithGroupUuidDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalServiceUserWithGroupUuidDto(uid string, email string, name string, createdAt string, groupUuid string) *ExternalServiceUserWithGroupUuidDto {
	this := ExternalServiceUserWithGroupUuidDto{}
	this.Uid = uid
	this.Email = email
	this.Name = name
	this.CreatedAt = createdAt
	this.GroupUuid = groupUuid
	return &this
}

// NewExternalServiceUserWithGroupUuidDtoWithDefaults instantiates a new ExternalServiceUserWithGroupUuidDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalServiceUserWithGroupUuidDtoWithDefaults() *ExternalServiceUserWithGroupUuidDto {
	this := ExternalServiceUserWithGroupUuidDto{}
	return &this
}

// GetUid returns the Uid field value
func (o *ExternalServiceUserWithGroupUuidDto) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *ExternalServiceUserWithGroupUuidDto) SetUid(v string) {
	o.Uid = v
}

// GetEmail returns the Email field value
func (o *ExternalServiceUserWithGroupUuidDto) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ExternalServiceUserWithGroupUuidDto) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value
func (o *ExternalServiceUserWithGroupUuidDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExternalServiceUserWithGroupUuidDto) SetName(v string) {
	o.Name = v
}

// GetSurname returns the Surname field value if set, zero value otherwise.
func (o *ExternalServiceUserWithGroupUuidDto) GetSurname() string {
	if o == nil || IsNil(o.Surname) {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *ExternalServiceUserWithGroupUuidDto) HasSurname() bool {
	if o != nil && !IsNil(o.Surname) {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *ExternalServiceUserWithGroupUuidDto) SetSurname(v string) {
	o.Surname = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExternalServiceUserWithGroupUuidDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExternalServiceUserWithGroupUuidDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExternalServiceUserWithGroupUuidDto) SetDescription(v string) {
	o.Description = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ExternalServiceUserWithGroupUuidDto) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ExternalServiceUserWithGroupUuidDto) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetGroupUuid returns the GroupUuid field value
func (o *ExternalServiceUserWithGroupUuidDto) GetGroupUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupUuid
}

// GetGroupUuidOk returns a tuple with the GroupUuid field value
// and a boolean to check if the value has been set.
func (o *ExternalServiceUserWithGroupUuidDto) GetGroupUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupUuid, true
}

// SetGroupUuid sets field value
func (o *ExternalServiceUserWithGroupUuidDto) SetGroupUuid(v string) {
	o.GroupUuid = v
}

func (o ExternalServiceUserWithGroupUuidDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalServiceUserWithGroupUuidDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uid"] = o.Uid
	toSerialize["email"] = o.Email
	toSerialize["name"] = o.Name
	if !IsNil(o.Surname) {
		toSerialize["surname"] = o.Surname
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["groupUuid"] = o.GroupUuid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExternalServiceUserWithGroupUuidDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uid",
		"email",
		"name",
		"createdAt",
		"groupUuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalServiceUserWithGroupUuidDto := _ExternalServiceUserWithGroupUuidDto{}

	err = json.Unmarshal(data, &varExternalServiceUserWithGroupUuidDto)

	if err != nil {
		return err
	}

	*o = ExternalServiceUserWithGroupUuidDto(varExternalServiceUserWithGroupUuidDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uid")
		delete(additionalProperties, "email")
		delete(additionalProperties, "name")
		delete(additionalProperties, "surname")
		delete(additionalProperties, "description")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "groupUuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExternalServiceUserWithGroupUuidDto struct {
	value *ExternalServiceUserWithGroupUuidDto
	isSet bool
}

func (v NullableExternalServiceUserWithGroupUuidDto) Get() *ExternalServiceUserWithGroupUuidDto {
	return v.value
}

func (v *NullableExternalServiceUserWithGroupUuidDto) Set(val *ExternalServiceUserWithGroupUuidDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalServiceUserWithGroupUuidDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalServiceUserWithGroupUuidDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalServiceUserWithGroupUuidDto(val *ExternalServiceUserWithGroupUuidDto) *NullableExternalServiceUserWithGroupUuidDto {
	return &NullableExternalServiceUserWithGroupUuidDto{value: val, isSet: true}
}

func (v NullableExternalServiceUserWithGroupUuidDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalServiceUserWithGroupUuidDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
