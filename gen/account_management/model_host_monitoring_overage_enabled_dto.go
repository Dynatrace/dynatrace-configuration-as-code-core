/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the HostMonitoringOverageEnabledDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostMonitoringOverageEnabledDto{}

// HostMonitoringOverageEnabledDto struct for HostMonitoringOverageEnabledDto
type HostMonitoringOverageEnabledDto struct {
	// The overage is (`true`) or is not (`false`) enabled for the environment.   If the overage is enabled, the environment can exceed the quota.
	HostUnitOverageAllowed bool `json:"hostUnitOverageAllowed"`
	AdditionalProperties   map[string]interface{}
}

type _HostMonitoringOverageEnabledDto HostMonitoringOverageEnabledDto

// NewHostMonitoringOverageEnabledDto instantiates a new HostMonitoringOverageEnabledDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostMonitoringOverageEnabledDto(hostUnitOverageAllowed bool) *HostMonitoringOverageEnabledDto {
	this := HostMonitoringOverageEnabledDto{}
	this.HostUnitOverageAllowed = hostUnitOverageAllowed
	return &this
}

// NewHostMonitoringOverageEnabledDtoWithDefaults instantiates a new HostMonitoringOverageEnabledDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostMonitoringOverageEnabledDtoWithDefaults() *HostMonitoringOverageEnabledDto {
	this := HostMonitoringOverageEnabledDto{}
	return &this
}

// GetHostUnitOverageAllowed returns the HostUnitOverageAllowed field value
func (o *HostMonitoringOverageEnabledDto) GetHostUnitOverageAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HostUnitOverageAllowed
}

// GetHostUnitOverageAllowedOk returns a tuple with the HostUnitOverageAllowed field value
// and a boolean to check if the value has been set.
func (o *HostMonitoringOverageEnabledDto) GetHostUnitOverageAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostUnitOverageAllowed, true
}

// SetHostUnitOverageAllowed sets field value
func (o *HostMonitoringOverageEnabledDto) SetHostUnitOverageAllowed(v bool) {
	o.HostUnitOverageAllowed = v
}

func (o HostMonitoringOverageEnabledDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostMonitoringOverageEnabledDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostUnitOverageAllowed"] = o.HostUnitOverageAllowed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HostMonitoringOverageEnabledDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hostUnitOverageAllowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostMonitoringOverageEnabledDto := _HostMonitoringOverageEnabledDto{}

	err = json.Unmarshal(data, &varHostMonitoringOverageEnabledDto)

	if err != nil {
		return err
	}

	*o = HostMonitoringOverageEnabledDto(varHostMonitoringOverageEnabledDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hostUnitOverageAllowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHostMonitoringOverageEnabledDto struct {
	value *HostMonitoringOverageEnabledDto
	isSet bool
}

func (v NullableHostMonitoringOverageEnabledDto) Get() *HostMonitoringOverageEnabledDto {
	return v.value
}

func (v *NullableHostMonitoringOverageEnabledDto) Set(val *HostMonitoringOverageEnabledDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMonitoringOverageEnabledDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMonitoringOverageEnabledDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMonitoringOverageEnabledDto(val *HostMonitoringOverageEnabledDto) *NullableHostMonitoringOverageEnabledDto {
	return &NullableHostMonitoringOverageEnabledDto{value: val, isSet: true}
}

func (v NullableHostMonitoringOverageEnabledDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMonitoringOverageEnabledDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
