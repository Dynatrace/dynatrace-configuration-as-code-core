/*
Dynatrace Account Management API

The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmanagement

import (
	"encoding/json"
	"fmt"
)

// checks if the AllowlistItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowlistItem{}

// AllowlistItem struct for AllowlistItem
type AllowlistItem struct {
	// The name of the list.
	Name string `json:"name"`
	// One ip address or the range of ip addresses. Supports the CIDR format.
	IpRange              string `json:"ipRange"`
	AdditionalProperties map[string]interface{}
}

type _AllowlistItem AllowlistItem

// NewAllowlistItem instantiates a new AllowlistItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowlistItem(name string, ipRange string) *AllowlistItem {
	this := AllowlistItem{}
	this.Name = name
	this.IpRange = ipRange
	return &this
}

// NewAllowlistItemWithDefaults instantiates a new AllowlistItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowlistItemWithDefaults() *AllowlistItem {
	this := AllowlistItem{}
	return &this
}

// GetName returns the Name field value
func (o *AllowlistItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AllowlistItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AllowlistItem) SetName(v string) {
	o.Name = v
}

// GetIpRange returns the IpRange field value
func (o *AllowlistItem) GetIpRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpRange
}

// GetIpRangeOk returns a tuple with the IpRange field value
// and a boolean to check if the value has been set.
func (o *AllowlistItem) GetIpRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpRange, true
}

// SetIpRange sets field value
func (o *AllowlistItem) SetIpRange(v string) {
	o.IpRange = v
}

func (o AllowlistItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowlistItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["ipRange"] = o.IpRange

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AllowlistItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"ipRange",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllowlistItem := _AllowlistItem{}

	err = json.Unmarshal(data, &varAllowlistItem)

	if err != nil {
		return err
	}

	*o = AllowlistItem(varAllowlistItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "ipRange")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAllowlistItem struct {
	value *AllowlistItem
	isSet bool
}

func (v NullableAllowlistItem) Get() *AllowlistItem {
	return v.value
}

func (v *NullableAllowlistItem) Set(val *AllowlistItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowlistItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowlistItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowlistItem(val *AllowlistItem) *NullableAllowlistItem {
	return &NullableAllowlistItem{value: val, isSet: true}
}

func (v NullableAllowlistItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowlistItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
