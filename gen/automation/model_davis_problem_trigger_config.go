/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the DavisProblemTriggerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavisProblemTriggerConfig{}

// DavisProblemTriggerConfig struct for DavisProblemTriggerConfig
type DavisProblemTriggerConfig struct {
	Type  string             `json:"type"`
	Value DavisProblemConfig `json:"value"`
}

// NewDavisProblemTriggerConfig instantiates a new DavisProblemTriggerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavisProblemTriggerConfig(type_ string, value DavisProblemConfig) *DavisProblemTriggerConfig {
	this := DavisProblemTriggerConfig{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewDavisProblemTriggerConfigWithDefaults instantiates a new DavisProblemTriggerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavisProblemTriggerConfigWithDefaults() *DavisProblemTriggerConfig {
	this := DavisProblemTriggerConfig{}
	return &this
}

// GetType returns the Type field value
func (o *DavisProblemTriggerConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DavisProblemTriggerConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DavisProblemTriggerConfig) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *DavisProblemTriggerConfig) GetValue() DavisProblemConfig {
	if o == nil {
		var ret DavisProblemConfig
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DavisProblemTriggerConfig) GetValueOk() (*DavisProblemConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DavisProblemTriggerConfig) SetValue(v DavisProblemConfig) {
	o.Value = v
}

func (o DavisProblemTriggerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavisProblemTriggerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableDavisProblemTriggerConfig struct {
	value *DavisProblemTriggerConfig
	isSet bool
}

func (v NullableDavisProblemTriggerConfig) Get() *DavisProblemTriggerConfig {
	return v.value
}

func (v *NullableDavisProblemTriggerConfig) Set(val *DavisProblemTriggerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisProblemTriggerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisProblemTriggerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisProblemTriggerConfig(val *DavisProblemTriggerConfig) *NullableDavisProblemTriggerConfig {
	return &NullableDavisProblemTriggerConfig{value: val, isSet: true}
}

func (v NullableDavisProblemTriggerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisProblemTriggerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
