/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the Execution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Execution{}

// Execution struct for Execution
type Execution struct {
	Id *string `json:"id,omitempty"`
	// Executed Workflow
	Workflow NullableString `json:"workflow,omitempty"`
	// * `RUNNING` - RUNNING * `SUCCESS` - SUCCESS * `ERROR` - ERROR * `WAITING` - WAITING * `IDLE` - IDLE * `PAUSED` - PAUSED * `DELAYED` - DELAYED * `CANCELLED` - CANCELLED
	State     *string                `json:"state,omitempty"`
	StateInfo NullableString         `json:"stateInfo,omitempty"`
	Input     map[string]interface{} `json:"input,omitempty"`
	Params    map[string]interface{} `json:"params,omitempty"`
	StartedAt *time.Time             `json:"startedAt,omitempty"`
	EndedAt   NullableTime           `json:"endedAt,omitempty"`
	// Calculate the runtime of an execution in seconds. If the Execution is not ended, runtime is calculated until now.
	Runtime      int32          `json:"runtime"`
	Trigger      NullableString `json:"trigger,omitempty"`
	Schedule     NullableString `json:"schedule,omitempty"`
	EventTrigger NullableString `json:"eventTrigger,omitempty"`
	Task         string         `json:"task"`
	User         NullableString `json:"user,omitempty"`
	Actor        string         `json:"actor"`
	Title        string         `json:"title"`
	TriggerType  string         `json:"triggerType"`
}

// NewExecution instantiates a new Execution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecution(runtime int32, task string, actor string, title string, triggerType string) *Execution {
	this := Execution{}
	this.Runtime = runtime
	this.Task = task
	this.Actor = actor
	this.Title = title
	this.TriggerType = triggerType
	return &this
}

// NewExecutionWithDefaults instantiates a new Execution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionWithDefaults() *Execution {
	this := Execution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Execution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Execution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Execution) SetId(v string) {
	o.Id = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow.Get()) {
		var ret string
		return ret
	}
	return *o.Workflow.Get()
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetWorkflowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workflow.Get(), o.Workflow.IsSet()
}

// HasWorkflow returns a boolean if a field has been set.
func (o *Execution) HasWorkflow() bool {
	if o != nil && o.Workflow.IsSet() {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given NullableString and assigns it to the Workflow field.
func (o *Execution) SetWorkflow(v string) {
	o.Workflow.Set(&v)
}

// SetWorkflowNil sets the value for Workflow to be an explicit nil
func (o *Execution) SetWorkflowNil() {
	o.Workflow.Set(nil)
}

// UnsetWorkflow ensures that no value is present for Workflow, not even an explicit nil
func (o *Execution) UnsetWorkflow() {
	o.Workflow.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Execution) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Execution) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Execution) SetState(v string) {
	o.State = &v
}

// GetStateInfo returns the StateInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetStateInfo() string {
	if o == nil || IsNil(o.StateInfo.Get()) {
		var ret string
		return ret
	}
	return *o.StateInfo.Get()
}

// GetStateInfoOk returns a tuple with the StateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetStateInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateInfo.Get(), o.StateInfo.IsSet()
}

// HasStateInfo returns a boolean if a field has been set.
func (o *Execution) HasStateInfo() bool {
	if o != nil && o.StateInfo.IsSet() {
		return true
	}

	return false
}

// SetStateInfo gets a reference to the given NullableString and assigns it to the StateInfo field.
func (o *Execution) SetStateInfo(v string) {
	o.StateInfo.Set(&v)
}

// SetStateInfoNil sets the value for StateInfo to be an explicit nil
func (o *Execution) SetStateInfoNil() {
	o.StateInfo.Set(nil)
}

// UnsetStateInfo ensures that no value is present for StateInfo, not even an explicit nil
func (o *Execution) UnsetStateInfo() {
	o.StateInfo.Unset()
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *Execution) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *Execution) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *Execution) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *Execution) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *Execution) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *Execution) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *Execution) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *Execution) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *Execution) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt.Get()
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndedAt.Get(), o.EndedAt.IsSet()
}

// HasEndedAt returns a boolean if a field has been set.
func (o *Execution) HasEndedAt() bool {
	if o != nil && o.EndedAt.IsSet() {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given NullableTime and assigns it to the EndedAt field.
func (o *Execution) SetEndedAt(v time.Time) {
	o.EndedAt.Set(&v)
}

// SetEndedAtNil sets the value for EndedAt to be an explicit nil
func (o *Execution) SetEndedAtNil() {
	o.EndedAt.Set(nil)
}

// UnsetEndedAt ensures that no value is present for EndedAt, not even an explicit nil
func (o *Execution) UnsetEndedAt() {
	o.EndedAt.Unset()
}

// GetRuntime returns the Runtime field value
func (o *Execution) GetRuntime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Runtime
}

// GetRuntimeOk returns a tuple with the Runtime field value
// and a boolean to check if the value has been set.
func (o *Execution) GetRuntimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Runtime, true
}

// SetRuntime sets field value
func (o *Execution) SetRuntime(v int32) {
	o.Runtime = v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetTrigger() string {
	if o == nil || IsNil(o.Trigger.Get()) {
		var ret string
		return ret
	}
	return *o.Trigger.Get()
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trigger.Get(), o.Trigger.IsSet()
}

// HasTrigger returns a boolean if a field has been set.
func (o *Execution) HasTrigger() bool {
	if o != nil && o.Trigger.IsSet() {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given NullableString and assigns it to the Trigger field.
func (o *Execution) SetTrigger(v string) {
	o.Trigger.Set(&v)
}

// SetTriggerNil sets the value for Trigger to be an explicit nil
func (o *Execution) SetTriggerNil() {
	o.Trigger.Set(nil)
}

// UnsetTrigger ensures that no value is present for Trigger, not even an explicit nil
func (o *Execution) UnsetTrigger() {
	o.Trigger.Unset()
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetSchedule() string {
	if o == nil || IsNil(o.Schedule.Get()) {
		var ret string
		return ret
	}
	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// HasSchedule returns a boolean if a field has been set.
func (o *Execution) HasSchedule() bool {
	if o != nil && o.Schedule.IsSet() {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given NullableString and assigns it to the Schedule field.
func (o *Execution) SetSchedule(v string) {
	o.Schedule.Set(&v)
}

// SetScheduleNil sets the value for Schedule to be an explicit nil
func (o *Execution) SetScheduleNil() {
	o.Schedule.Set(nil)
}

// UnsetSchedule ensures that no value is present for Schedule, not even an explicit nil
func (o *Execution) UnsetSchedule() {
	o.Schedule.Unset()
}

// GetEventTrigger returns the EventTrigger field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetEventTrigger() string {
	if o == nil || IsNil(o.EventTrigger.Get()) {
		var ret string
		return ret
	}
	return *o.EventTrigger.Get()
}

// GetEventTriggerOk returns a tuple with the EventTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetEventTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTrigger.Get(), o.EventTrigger.IsSet()
}

// HasEventTrigger returns a boolean if a field has been set.
func (o *Execution) HasEventTrigger() bool {
	if o != nil && o.EventTrigger.IsSet() {
		return true
	}

	return false
}

// SetEventTrigger gets a reference to the given NullableString and assigns it to the EventTrigger field.
func (o *Execution) SetEventTrigger(v string) {
	o.EventTrigger.Set(&v)
}

// SetEventTriggerNil sets the value for EventTrigger to be an explicit nil
func (o *Execution) SetEventTriggerNil() {
	o.EventTrigger.Set(nil)
}

// UnsetEventTrigger ensures that no value is present for EventTrigger, not even an explicit nil
func (o *Execution) UnsetEventTrigger() {
	o.EventTrigger.Unset()
}

// GetTask returns the Task field value
func (o *Execution) GetTask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Task
}

// GetTaskOk returns a tuple with the Task field value
// and a boolean to check if the value has been set.
func (o *Execution) GetTaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Task, true
}

// SetTask sets field value
func (o *Execution) SetTask(v string) {
	o.Task = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Execution) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Execution) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *Execution) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *Execution) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *Execution) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *Execution) UnsetUser() {
	o.User.Unset()
}

// GetActor returns the Actor field value
func (o *Execution) GetActor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *Execution) GetActorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *Execution) SetActor(v string) {
	o.Actor = v
}

// GetTitle returns the Title field value
func (o *Execution) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Execution) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Execution) SetTitle(v string) {
	o.Title = v
}

// GetTriggerType returns the TriggerType field value
func (o *Execution) GetTriggerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerType
}

// GetTriggerTypeOk returns a tuple with the TriggerType field value
// and a boolean to check if the value has been set.
func (o *Execution) GetTriggerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerType, true
}

// SetTriggerType sets field value
func (o *Execution) SetTriggerType(v string) {
	o.TriggerType = v
}

func (o Execution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Execution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Workflow.IsSet() {
		toSerialize["workflow"] = o.Workflow.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StateInfo.IsSet() {
		toSerialize["stateInfo"] = o.StateInfo.Get()
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if o.EndedAt.IsSet() {
		toSerialize["endedAt"] = o.EndedAt.Get()
	}
	toSerialize["runtime"] = o.Runtime
	if o.Trigger.IsSet() {
		toSerialize["trigger"] = o.Trigger.Get()
	}
	if o.Schedule.IsSet() {
		toSerialize["schedule"] = o.Schedule.Get()
	}
	if o.EventTrigger.IsSet() {
		toSerialize["eventTrigger"] = o.EventTrigger.Get()
	}
	toSerialize["task"] = o.Task
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	toSerialize["actor"] = o.Actor
	toSerialize["title"] = o.Title
	toSerialize["triggerType"] = o.TriggerType
	return toSerialize, nil
}

type NullableExecution struct {
	value *Execution
	isSet bool
}

func (v NullableExecution) Get() *Execution {
	return v.value
}

func (v *NullableExecution) Set(val *Execution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecution(val *Execution) *NullableExecution {
	return &NullableExecution{value: val, isSet: true}
}

func (v NullableExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
