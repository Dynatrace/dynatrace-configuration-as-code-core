/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	Name               *string                `json:"name,omitempty"`
	Action             *string                `json:"action,omitempty"`
	Description        *string                `json:"description,omitempty"`
	Input              map[string]interface{} `json:"input,omitempty"`
	Active             *TaskActive            `json:"active,omitempty"`
	Position           *TaskPosition          `json:"position,omitempty"`
	CustomSampleResult interface{}            `json:"customSampleResult,omitempty"`
	Predecessors       []string               `json:"predecessors,omitempty"`
	Conditions         *TaskConditionOption   `json:"conditions,omitempty"`
	WithItems          *string                `json:"withItems,omitempty"`
	Concurrency        *TaskConcurrency       `json:"concurrency,omitempty"`
	Retry              *TaskRetryOption       `json:"retry,omitempty"`
	Timeout            *TaskTimeout           `json:"timeout,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	var active TaskActive = true
	this.Active = &active
	var timeout TaskTimeout = 900
	this.Timeout = &timeout
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	var active TaskActive = true
	this.Active = &active
	var timeout TaskTimeout = 900
	this.Timeout = &timeout
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Task) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Task) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Task) SetName(v string) {
	o.Name = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Task) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Task) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Task) SetAction(v string) {
	o.Action = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *Task) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *Task) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *Task) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Task) GetActive() TaskActive {
	if o == nil || IsNil(o.Active) {
		var ret TaskActive
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetActiveOk() (*TaskActive, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Task) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given TaskActive and assigns it to the Active field.
func (o *Task) SetActive(v TaskActive) {
	o.Active = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *Task) GetPosition() TaskPosition {
	if o == nil || IsNil(o.Position) {
		var ret TaskPosition
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPositionOk() (*TaskPosition, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *Task) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given TaskPosition and assigns it to the Position field.
func (o *Task) SetPosition(v TaskPosition) {
	o.Position = &v
}

// GetCustomSampleResult returns the CustomSampleResult field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetCustomSampleResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CustomSampleResult
}

// GetCustomSampleResultOk returns a tuple with the CustomSampleResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetCustomSampleResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CustomSampleResult) {
		return nil, false
	}
	return &o.CustomSampleResult, true
}

// HasCustomSampleResult returns a boolean if a field has been set.
func (o *Task) HasCustomSampleResult() bool {
	if o != nil && IsNil(o.CustomSampleResult) {
		return true
	}

	return false
}

// SetCustomSampleResult gets a reference to the given interface{} and assigns it to the CustomSampleResult field.
func (o *Task) SetCustomSampleResult(v interface{}) {
	o.CustomSampleResult = v
}

// GetPredecessors returns the Predecessors field value if set, zero value otherwise.
func (o *Task) GetPredecessors() []string {
	if o == nil || IsNil(o.Predecessors) {
		var ret []string
		return ret
	}
	return o.Predecessors
}

// GetPredecessorsOk returns a tuple with the Predecessors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPredecessorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Predecessors) {
		return nil, false
	}
	return o.Predecessors, true
}

// HasPredecessors returns a boolean if a field has been set.
func (o *Task) HasPredecessors() bool {
	if o != nil && !IsNil(o.Predecessors) {
		return true
	}

	return false
}

// SetPredecessors gets a reference to the given []string and assigns it to the Predecessors field.
func (o *Task) SetPredecessors(v []string) {
	o.Predecessors = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Task) GetConditions() TaskConditionOption {
	if o == nil || IsNil(o.Conditions) {
		var ret TaskConditionOption
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetConditionsOk() (*TaskConditionOption, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Task) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given TaskConditionOption and assigns it to the Conditions field.
func (o *Task) SetConditions(v TaskConditionOption) {
	o.Conditions = &v
}

// GetWithItems returns the WithItems field value if set, zero value otherwise.
func (o *Task) GetWithItems() string {
	if o == nil || IsNil(o.WithItems) {
		var ret string
		return ret
	}
	return *o.WithItems
}

// GetWithItemsOk returns a tuple with the WithItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetWithItemsOk() (*string, bool) {
	if o == nil || IsNil(o.WithItems) {
		return nil, false
	}
	return o.WithItems, true
}

// HasWithItems returns a boolean if a field has been set.
func (o *Task) HasWithItems() bool {
	if o != nil && !IsNil(o.WithItems) {
		return true
	}

	return false
}

// SetWithItems gets a reference to the given string and assigns it to the WithItems field.
func (o *Task) SetWithItems(v string) {
	o.WithItems = &v
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *Task) GetConcurrency() TaskConcurrency {
	if o == nil || IsNil(o.Concurrency) {
		var ret TaskConcurrency
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetConcurrencyOk() (*TaskConcurrency, bool) {
	if o == nil || IsNil(o.Concurrency) {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *Task) HasConcurrency() bool {
	if o != nil && !IsNil(o.Concurrency) {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given TaskConcurrency and assigns it to the Concurrency field.
func (o *Task) SetConcurrency(v TaskConcurrency) {
	o.Concurrency = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *Task) GetRetry() TaskRetryOption {
	if o == nil || IsNil(o.Retry) {
		var ret TaskRetryOption
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRetryOk() (*TaskRetryOption, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *Task) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given TaskRetryOption and assigns it to the Retry field.
func (o *Task) SetRetry(v TaskRetryOption) {
	o.Retry = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Task) GetTimeout() TaskTimeout {
	if o == nil || IsNil(o.Timeout) {
		var ret TaskTimeout
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTimeoutOk() (*TaskTimeout, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Task) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given TaskTimeout and assigns it to the Timeout field.
func (o *Task) SetTimeout(v TaskTimeout) {
	o.Timeout = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if o.CustomSampleResult != nil {
		toSerialize["customSampleResult"] = o.CustomSampleResult
	}
	if !IsNil(o.Predecessors) {
		toSerialize["predecessors"] = o.Predecessors
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.WithItems) {
		toSerialize["withItems"] = o.WithItems
	}
	if !IsNil(o.Concurrency) {
		toSerialize["concurrency"] = o.Concurrency
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
