/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the EventTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTrigger{}

// EventTrigger struct for EventTrigger
type EventTrigger struct {
	IsActive             *bool               `json:"isActive,omitempty"`
	FilterQuery          string              `json:"filterQuery"`
	UniqueExpression     NullableString      `json:"uniqueExpression"`
	TriggerConfiguration *EventTriggerConfig `json:"triggerConfiguration,omitempty"`
}

// NewEventTrigger instantiates a new EventTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTrigger(filterQuery string, uniqueExpression NullableString) *EventTrigger {
	this := EventTrigger{}
	this.FilterQuery = filterQuery
	this.UniqueExpression = uniqueExpression
	return &this
}

// NewEventTriggerWithDefaults instantiates a new EventTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTriggerWithDefaults() *EventTrigger {
	this := EventTrigger{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *EventTrigger) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTrigger) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *EventTrigger) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *EventTrigger) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetFilterQuery returns the FilterQuery field value
func (o *EventTrigger) GetFilterQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterQuery
}

// GetFilterQueryOk returns a tuple with the FilterQuery field value
// and a boolean to check if the value has been set.
func (o *EventTrigger) GetFilterQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterQuery, true
}

// SetFilterQuery sets field value
func (o *EventTrigger) SetFilterQuery(v string) {
	o.FilterQuery = v
}

// GetUniqueExpression returns the UniqueExpression field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EventTrigger) GetUniqueExpression() string {
	if o == nil || o.UniqueExpression.Get() == nil {
		var ret string
		return ret
	}

	return *o.UniqueExpression.Get()
}

// GetUniqueExpressionOk returns a tuple with the UniqueExpression field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventTrigger) GetUniqueExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UniqueExpression.Get(), o.UniqueExpression.IsSet()
}

// SetUniqueExpression sets field value
func (o *EventTrigger) SetUniqueExpression(v string) {
	o.UniqueExpression.Set(&v)
}

// GetTriggerConfiguration returns the TriggerConfiguration field value if set, zero value otherwise.
func (o *EventTrigger) GetTriggerConfiguration() EventTriggerConfig {
	if o == nil || IsNil(o.TriggerConfiguration) {
		var ret EventTriggerConfig
		return ret
	}
	return *o.TriggerConfiguration
}

// GetTriggerConfigurationOk returns a tuple with the TriggerConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTrigger) GetTriggerConfigurationOk() (*EventTriggerConfig, bool) {
	if o == nil || IsNil(o.TriggerConfiguration) {
		return nil, false
	}
	return o.TriggerConfiguration, true
}

// HasTriggerConfiguration returns a boolean if a field has been set.
func (o *EventTrigger) HasTriggerConfiguration() bool {
	if o != nil && !IsNil(o.TriggerConfiguration) {
		return true
	}

	return false
}

// SetTriggerConfiguration gets a reference to the given EventTriggerConfig and assigns it to the TriggerConfiguration field.
func (o *EventTrigger) SetTriggerConfiguration(v EventTriggerConfig) {
	o.TriggerConfiguration = &v
}

func (o EventTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	toSerialize["filterQuery"] = o.FilterQuery
	toSerialize["uniqueExpression"] = o.UniqueExpression.Get()
	if !IsNil(o.TriggerConfiguration) {
		toSerialize["triggerConfiguration"] = o.TriggerConfiguration
	}
	return toSerialize, nil
}

type NullableEventTrigger struct {
	value *EventTrigger
	isSet bool
}

func (v NullableEventTrigger) Get() *EventTrigger {
	return v.value
}

func (v *NullableEventTrigger) Set(val *EventTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTrigger(val *EventTrigger) *NullableEventTrigger {
	return &NullableEventTrigger{value: val, isSet: true}
}

func (v NullableEventTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
