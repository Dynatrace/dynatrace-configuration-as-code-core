/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"fmt"
)

// EntityTagsMatch Entity tags match choices.
type EntityTagsMatch string

// List of EntityTagsMatch
const (
	ALL EntityTagsMatch = "all"
	ANY EntityTagsMatch = "any"
)

// All allowed values of EntityTagsMatch enum
var AllowedEntityTagsMatchEnumValues = []EntityTagsMatch{
	"all",
	"any",
}

func (v *EntityTagsMatch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntityTagsMatch(value)
	for _, existing := range AllowedEntityTagsMatchEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntityTagsMatch", value)
}

// NewEntityTagsMatchFromValue returns a pointer to a valid EntityTagsMatch
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityTagsMatchFromValue(v string) (*EntityTagsMatch, error) {
	ev := EntityTagsMatch(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntityTagsMatch: valid values are %v", v, AllowedEntityTagsMatchEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityTagsMatch) IsValid() bool {
	for _, existing := range AllowedEntityTagsMatchEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntityTagsMatch value
func (v EntityTagsMatch) Ptr() *EntityTagsMatch {
	return &v
}

type NullableEntityTagsMatch struct {
	value *EntityTagsMatch
	isSet bool
}

func (v NullableEntityTagsMatch) Get() *EntityTagsMatch {
	return v.value
}

func (v *NullableEntityTagsMatch) Set(val *EntityTagsMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTagsMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTagsMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTagsMatch(val *EntityTagsMatch) *NullableEntityTagsMatch {
	return &NullableEntityTagsMatch{value: val, isSet: true}
}

func (v NullableEntityTagsMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTagsMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
