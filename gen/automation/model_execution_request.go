/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the ExecutionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionRequest{}

// ExecutionRequest struct for ExecutionRequest
type ExecutionRequest struct {
	Id *string `json:"id,omitempty"`
	// Executed Workflow
	Workflow NullableString `json:"workflow,omitempty"`
	// * `RUNNING` - RUNNING * `SUCCESS` - SUCCESS * `ERROR` - ERROR * `WAITING` - WAITING * `IDLE` - IDLE * `PAUSED` - PAUSED * `DELAYED` - DELAYED * `CANCELLED` - CANCELLED
	State        *string                `json:"state,omitempty"`
	StateInfo    NullableString         `json:"stateInfo,omitempty"`
	Input        map[string]interface{} `json:"input,omitempty"`
	Params       map[string]interface{} `json:"params,omitempty"`
	StartedAt    *time.Time             `json:"startedAt,omitempty"`
	EndedAt      NullableTime           `json:"endedAt,omitempty"`
	Trigger      NullableString         `json:"trigger,omitempty"`
	Schedule     NullableString         `json:"schedule,omitempty"`
	EventTrigger NullableString         `json:"eventTrigger,omitempty"`
	User         NullableString         `json:"user,omitempty"`
}

// NewExecutionRequest instantiates a new ExecutionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionRequest() *ExecutionRequest {
	this := ExecutionRequest{}
	return &this
}

// NewExecutionRequestWithDefaults instantiates a new ExecutionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionRequestWithDefaults() *ExecutionRequest {
	this := ExecutionRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExecutionRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExecutionRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExecutionRequest) SetId(v string) {
	o.Id = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow.Get()) {
		var ret string
		return ret
	}
	return *o.Workflow.Get()
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetWorkflowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workflow.Get(), o.Workflow.IsSet()
}

// HasWorkflow returns a boolean if a field has been set.
func (o *ExecutionRequest) HasWorkflow() bool {
	if o != nil && o.Workflow.IsSet() {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given NullableString and assigns it to the Workflow field.
func (o *ExecutionRequest) SetWorkflow(v string) {
	o.Workflow.Set(&v)
}

// SetWorkflowNil sets the value for Workflow to be an explicit nil
func (o *ExecutionRequest) SetWorkflowNil() {
	o.Workflow.Set(nil)
}

// UnsetWorkflow ensures that no value is present for Workflow, not even an explicit nil
func (o *ExecutionRequest) UnsetWorkflow() {
	o.Workflow.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ExecutionRequest) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionRequest) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ExecutionRequest) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ExecutionRequest) SetState(v string) {
	o.State = &v
}

// GetStateInfo returns the StateInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetStateInfo() string {
	if o == nil || IsNil(o.StateInfo.Get()) {
		var ret string
		return ret
	}
	return *o.StateInfo.Get()
}

// GetStateInfoOk returns a tuple with the StateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetStateInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateInfo.Get(), o.StateInfo.IsSet()
}

// HasStateInfo returns a boolean if a field has been set.
func (o *ExecutionRequest) HasStateInfo() bool {
	if o != nil && o.StateInfo.IsSet() {
		return true
	}

	return false
}

// SetStateInfo gets a reference to the given NullableString and assigns it to the StateInfo field.
func (o *ExecutionRequest) SetStateInfo(v string) {
	o.StateInfo.Set(&v)
}

// SetStateInfoNil sets the value for StateInfo to be an explicit nil
func (o *ExecutionRequest) SetStateInfoNil() {
	o.StateInfo.Set(nil)
}

// UnsetStateInfo ensures that no value is present for StateInfo, not even an explicit nil
func (o *ExecutionRequest) UnsetStateInfo() {
	o.StateInfo.Unset()
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ExecutionRequest) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionRequest) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ExecutionRequest) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *ExecutionRequest) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ExecutionRequest) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionRequest) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ExecutionRequest) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *ExecutionRequest) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ExecutionRequest) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionRequest) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ExecutionRequest) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ExecutionRequest) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt.Get()
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndedAt.Get(), o.EndedAt.IsSet()
}

// HasEndedAt returns a boolean if a field has been set.
func (o *ExecutionRequest) HasEndedAt() bool {
	if o != nil && o.EndedAt.IsSet() {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given NullableTime and assigns it to the EndedAt field.
func (o *ExecutionRequest) SetEndedAt(v time.Time) {
	o.EndedAt.Set(&v)
}

// SetEndedAtNil sets the value for EndedAt to be an explicit nil
func (o *ExecutionRequest) SetEndedAtNil() {
	o.EndedAt.Set(nil)
}

// UnsetEndedAt ensures that no value is present for EndedAt, not even an explicit nil
func (o *ExecutionRequest) UnsetEndedAt() {
	o.EndedAt.Unset()
}

// GetTrigger returns the Trigger field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetTrigger() string {
	if o == nil || IsNil(o.Trigger.Get()) {
		var ret string
		return ret
	}
	return *o.Trigger.Get()
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trigger.Get(), o.Trigger.IsSet()
}

// HasTrigger returns a boolean if a field has been set.
func (o *ExecutionRequest) HasTrigger() bool {
	if o != nil && o.Trigger.IsSet() {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given NullableString and assigns it to the Trigger field.
func (o *ExecutionRequest) SetTrigger(v string) {
	o.Trigger.Set(&v)
}

// SetTriggerNil sets the value for Trigger to be an explicit nil
func (o *ExecutionRequest) SetTriggerNil() {
	o.Trigger.Set(nil)
}

// UnsetTrigger ensures that no value is present for Trigger, not even an explicit nil
func (o *ExecutionRequest) UnsetTrigger() {
	o.Trigger.Unset()
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetSchedule() string {
	if o == nil || IsNil(o.Schedule.Get()) {
		var ret string
		return ret
	}
	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// HasSchedule returns a boolean if a field has been set.
func (o *ExecutionRequest) HasSchedule() bool {
	if o != nil && o.Schedule.IsSet() {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given NullableString and assigns it to the Schedule field.
func (o *ExecutionRequest) SetSchedule(v string) {
	o.Schedule.Set(&v)
}

// SetScheduleNil sets the value for Schedule to be an explicit nil
func (o *ExecutionRequest) SetScheduleNil() {
	o.Schedule.Set(nil)
}

// UnsetSchedule ensures that no value is present for Schedule, not even an explicit nil
func (o *ExecutionRequest) UnsetSchedule() {
	o.Schedule.Unset()
}

// GetEventTrigger returns the EventTrigger field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetEventTrigger() string {
	if o == nil || IsNil(o.EventTrigger.Get()) {
		var ret string
		return ret
	}
	return *o.EventTrigger.Get()
}

// GetEventTriggerOk returns a tuple with the EventTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetEventTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTrigger.Get(), o.EventTrigger.IsSet()
}

// HasEventTrigger returns a boolean if a field has been set.
func (o *ExecutionRequest) HasEventTrigger() bool {
	if o != nil && o.EventTrigger.IsSet() {
		return true
	}

	return false
}

// SetEventTrigger gets a reference to the given NullableString and assigns it to the EventTrigger field.
func (o *ExecutionRequest) SetEventTrigger(v string) {
	o.EventTrigger.Set(&v)
}

// SetEventTriggerNil sets the value for EventTrigger to be an explicit nil
func (o *ExecutionRequest) SetEventTriggerNil() {
	o.EventTrigger.Set(nil)
}

// UnsetEventTrigger ensures that no value is present for EventTrigger, not even an explicit nil
func (o *ExecutionRequest) UnsetEventTrigger() {
	o.EventTrigger.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExecutionRequest) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExecutionRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *ExecutionRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *ExecutionRequest) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *ExecutionRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *ExecutionRequest) UnsetUser() {
	o.User.Unset()
}

func (o ExecutionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Workflow.IsSet() {
		toSerialize["workflow"] = o.Workflow.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StateInfo.IsSet() {
		toSerialize["stateInfo"] = o.StateInfo.Get()
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if o.EndedAt.IsSet() {
		toSerialize["endedAt"] = o.EndedAt.Get()
	}
	if o.Trigger.IsSet() {
		toSerialize["trigger"] = o.Trigger.Get()
	}
	if o.Schedule.IsSet() {
		toSerialize["schedule"] = o.Schedule.Get()
	}
	if o.EventTrigger.IsSet() {
		toSerialize["eventTrigger"] = o.EventTrigger.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	return toSerialize, nil
}

type NullableExecutionRequest struct {
	value *ExecutionRequest
	isSet bool
}

func (v NullableExecutionRequest) Get() *ExecutionRequest {
	return v.value
}

func (v *NullableExecutionRequest) Set(val *ExecutionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionRequest(val *ExecutionRequest) *NullableExecutionRequest {
	return &NullableExecutionRequest{value: val, isSet: true}
}

func (v NullableExecutionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
