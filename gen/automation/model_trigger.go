/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	Schedule     NullableSchedule     `json:"schedule,omitempty"`
	EventTrigger NullableEventTrigger `json:"eventTrigger,omitempty"`
}

// NewTrigger instantiates a new Trigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigger() *Trigger {
	this := Trigger{}
	return &this
}

// NewTriggerWithDefaults instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefaults() *Trigger {
	this := Trigger{}
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetSchedule() Schedule {
	if o == nil || IsNil(o.Schedule.Get()) {
		var ret Schedule
		return ret
	}
	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetScheduleOk() (*Schedule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// HasSchedule returns a boolean if a field has been set.
func (o *Trigger) HasSchedule() bool {
	if o != nil && o.Schedule.IsSet() {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given NullableSchedule and assigns it to the Schedule field.
func (o *Trigger) SetSchedule(v Schedule) {
	o.Schedule.Set(&v)
}

// SetScheduleNil sets the value for Schedule to be an explicit nil
func (o *Trigger) SetScheduleNil() {
	o.Schedule.Set(nil)
}

// UnsetSchedule ensures that no value is present for Schedule, not even an explicit nil
func (o *Trigger) UnsetSchedule() {
	o.Schedule.Unset()
}

// GetEventTrigger returns the EventTrigger field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetEventTrigger() EventTrigger {
	if o == nil || IsNil(o.EventTrigger.Get()) {
		var ret EventTrigger
		return ret
	}
	return *o.EventTrigger.Get()
}

// GetEventTriggerOk returns a tuple with the EventTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetEventTriggerOk() (*EventTrigger, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTrigger.Get(), o.EventTrigger.IsSet()
}

// HasEventTrigger returns a boolean if a field has been set.
func (o *Trigger) HasEventTrigger() bool {
	if o != nil && o.EventTrigger.IsSet() {
		return true
	}

	return false
}

// SetEventTrigger gets a reference to the given NullableEventTrigger and assigns it to the EventTrigger field.
func (o *Trigger) SetEventTrigger(v EventTrigger) {
	o.EventTrigger.Set(&v)
}

// SetEventTriggerNil sets the value for EventTrigger to be an explicit nil
func (o *Trigger) SetEventTriggerNil() {
	o.EventTrigger.Set(nil)
}

// UnsetEventTrigger ensures that no value is present for EventTrigger, not even an explicit nil
func (o *Trigger) UnsetEventTrigger() {
	o.EventTrigger.Unset()
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Schedule.IsSet() {
		toSerialize["schedule"] = o.Schedule.Get()
	}
	if o.EventTrigger.IsSet() {
		toSerialize["eventTrigger"] = o.EventTrigger.Get()
	}
	return toSerialize, nil
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
