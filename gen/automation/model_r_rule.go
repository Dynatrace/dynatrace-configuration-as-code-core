/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the RRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RRule{}

// RRule struct for RRule
type RRule struct {
	Freq string `json:"freq"`
	// The recurrence start.
	Datestart string `json:"datestart"`
	// The interval between each freq iteration.
	Interval *int32 `json:"interval,omitempty"`
	// The week start day.
	Wkst *string `json:"wkst,omitempty"`
	// Specifying the upper-bound limit of the recurrence.
	Until *time.Time `json:"until,omitempty"`
	// Each given integer will specify an occurrence number, corresponding to the nth occurrence of the rule inside the frequency period
	Bysetpos []int32 `json:"bysetpos,omitempty"`
	// The months to apply the recurrence to.
	Bymonth []int32 `json:"bymonth,omitempty"`
	// The month days to apply the recurrence to.
	Bymonthday []int32 `json:"bymonthday,omitempty"`
	// The year days to apply the recurrence to.
	Byyearday []int32 `json:"byyearday,omitempty"`
	// The week numbers to apply the recurrence to.
	Byweekno []int32 `json:"byweekno,omitempty"`
	// Define the weekdays where the recurrence will be applied.
	Byday     []string `json:"byday,omitempty"`
	Byworkday *string  `json:"byworkday,omitempty"`
}

// NewRRule instantiates a new RRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRRule(freq string, datestart string) *RRule {
	this := RRule{}
	this.Freq = freq
	this.Datestart = datestart
	var interval int32 = 1
	this.Interval = &interval
	return &this
}

// NewRRuleWithDefaults instantiates a new RRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRRuleWithDefaults() *RRule {
	this := RRule{}
	var interval int32 = 1
	this.Interval = &interval
	return &this
}

// GetFreq returns the Freq field value
func (o *RRule) GetFreq() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Freq
}

// GetFreqOk returns a tuple with the Freq field value
// and a boolean to check if the value has been set.
func (o *RRule) GetFreqOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Freq, true
}

// SetFreq sets field value
func (o *RRule) SetFreq(v string) {
	o.Freq = v
}

// GetDatestart returns the Datestart field value
func (o *RRule) GetDatestart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datestart
}

// GetDatestartOk returns a tuple with the Datestart field value
// and a boolean to check if the value has been set.
func (o *RRule) GetDatestartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datestart, true
}

// SetDatestart sets field value
func (o *RRule) SetDatestart(v string) {
	o.Datestart = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *RRule) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *RRule) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *RRule) SetInterval(v int32) {
	o.Interval = &v
}

// GetWkst returns the Wkst field value if set, zero value otherwise.
func (o *RRule) GetWkst() string {
	if o == nil || IsNil(o.Wkst) {
		var ret string
		return ret
	}
	return *o.Wkst
}

// GetWkstOk returns a tuple with the Wkst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetWkstOk() (*string, bool) {
	if o == nil || IsNil(o.Wkst) {
		return nil, false
	}
	return o.Wkst, true
}

// HasWkst returns a boolean if a field has been set.
func (o *RRule) HasWkst() bool {
	if o != nil && !IsNil(o.Wkst) {
		return true
	}

	return false
}

// SetWkst gets a reference to the given string and assigns it to the Wkst field.
func (o *RRule) SetWkst(v string) {
	o.Wkst = &v
}

// GetUntil returns the Until field value if set, zero value otherwise.
func (o *RRule) GetUntil() time.Time {
	if o == nil || IsNil(o.Until) {
		var ret time.Time
		return ret
	}
	return *o.Until
}

// GetUntilOk returns a tuple with the Until field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Until) {
		return nil, false
	}
	return o.Until, true
}

// HasUntil returns a boolean if a field has been set.
func (o *RRule) HasUntil() bool {
	if o != nil && !IsNil(o.Until) {
		return true
	}

	return false
}

// SetUntil gets a reference to the given time.Time and assigns it to the Until field.
func (o *RRule) SetUntil(v time.Time) {
	o.Until = &v
}

// GetBysetpos returns the Bysetpos field value if set, zero value otherwise.
func (o *RRule) GetBysetpos() []int32 {
	if o == nil || IsNil(o.Bysetpos) {
		var ret []int32
		return ret
	}
	return o.Bysetpos
}

// GetBysetposOk returns a tuple with the Bysetpos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetBysetposOk() ([]int32, bool) {
	if o == nil || IsNil(o.Bysetpos) {
		return nil, false
	}
	return o.Bysetpos, true
}

// HasBysetpos returns a boolean if a field has been set.
func (o *RRule) HasBysetpos() bool {
	if o != nil && !IsNil(o.Bysetpos) {
		return true
	}

	return false
}

// SetBysetpos gets a reference to the given []int32 and assigns it to the Bysetpos field.
func (o *RRule) SetBysetpos(v []int32) {
	o.Bysetpos = v
}

// GetBymonth returns the Bymonth field value if set, zero value otherwise.
func (o *RRule) GetBymonth() []int32 {
	if o == nil || IsNil(o.Bymonth) {
		var ret []int32
		return ret
	}
	return o.Bymonth
}

// GetBymonthOk returns a tuple with the Bymonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetBymonthOk() ([]int32, bool) {
	if o == nil || IsNil(o.Bymonth) {
		return nil, false
	}
	return o.Bymonth, true
}

// HasBymonth returns a boolean if a field has been set.
func (o *RRule) HasBymonth() bool {
	if o != nil && !IsNil(o.Bymonth) {
		return true
	}

	return false
}

// SetBymonth gets a reference to the given []int32 and assigns it to the Bymonth field.
func (o *RRule) SetBymonth(v []int32) {
	o.Bymonth = v
}

// GetBymonthday returns the Bymonthday field value if set, zero value otherwise.
func (o *RRule) GetBymonthday() []int32 {
	if o == nil || IsNil(o.Bymonthday) {
		var ret []int32
		return ret
	}
	return o.Bymonthday
}

// GetBymonthdayOk returns a tuple with the Bymonthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetBymonthdayOk() ([]int32, bool) {
	if o == nil || IsNil(o.Bymonthday) {
		return nil, false
	}
	return o.Bymonthday, true
}

// HasBymonthday returns a boolean if a field has been set.
func (o *RRule) HasBymonthday() bool {
	if o != nil && !IsNil(o.Bymonthday) {
		return true
	}

	return false
}

// SetBymonthday gets a reference to the given []int32 and assigns it to the Bymonthday field.
func (o *RRule) SetBymonthday(v []int32) {
	o.Bymonthday = v
}

// GetByyearday returns the Byyearday field value if set, zero value otherwise.
func (o *RRule) GetByyearday() []int32 {
	if o == nil || IsNil(o.Byyearday) {
		var ret []int32
		return ret
	}
	return o.Byyearday
}

// GetByyeardayOk returns a tuple with the Byyearday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetByyeardayOk() ([]int32, bool) {
	if o == nil || IsNil(o.Byyearday) {
		return nil, false
	}
	return o.Byyearday, true
}

// HasByyearday returns a boolean if a field has been set.
func (o *RRule) HasByyearday() bool {
	if o != nil && !IsNil(o.Byyearday) {
		return true
	}

	return false
}

// SetByyearday gets a reference to the given []int32 and assigns it to the Byyearday field.
func (o *RRule) SetByyearday(v []int32) {
	o.Byyearday = v
}

// GetByweekno returns the Byweekno field value if set, zero value otherwise.
func (o *RRule) GetByweekno() []int32 {
	if o == nil || IsNil(o.Byweekno) {
		var ret []int32
		return ret
	}
	return o.Byweekno
}

// GetByweeknoOk returns a tuple with the Byweekno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetByweeknoOk() ([]int32, bool) {
	if o == nil || IsNil(o.Byweekno) {
		return nil, false
	}
	return o.Byweekno, true
}

// HasByweekno returns a boolean if a field has been set.
func (o *RRule) HasByweekno() bool {
	if o != nil && !IsNil(o.Byweekno) {
		return true
	}

	return false
}

// SetByweekno gets a reference to the given []int32 and assigns it to the Byweekno field.
func (o *RRule) SetByweekno(v []int32) {
	o.Byweekno = v
}

// GetByday returns the Byday field value if set, zero value otherwise.
func (o *RRule) GetByday() []string {
	if o == nil || IsNil(o.Byday) {
		var ret []string
		return ret
	}
	return o.Byday
}

// GetBydayOk returns a tuple with the Byday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetBydayOk() ([]string, bool) {
	if o == nil || IsNil(o.Byday) {
		return nil, false
	}
	return o.Byday, true
}

// HasByday returns a boolean if a field has been set.
func (o *RRule) HasByday() bool {
	if o != nil && !IsNil(o.Byday) {
		return true
	}

	return false
}

// SetByday gets a reference to the given []string and assigns it to the Byday field.
func (o *RRule) SetByday(v []string) {
	o.Byday = v
}

// GetByworkday returns the Byworkday field value if set, zero value otherwise.
func (o *RRule) GetByworkday() string {
	if o == nil || IsNil(o.Byworkday) {
		var ret string
		return ret
	}
	return *o.Byworkday
}

// GetByworkdayOk returns a tuple with the Byworkday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRule) GetByworkdayOk() (*string, bool) {
	if o == nil || IsNil(o.Byworkday) {
		return nil, false
	}
	return o.Byworkday, true
}

// HasByworkday returns a boolean if a field has been set.
func (o *RRule) HasByworkday() bool {
	if o != nil && !IsNil(o.Byworkday) {
		return true
	}

	return false
}

// SetByworkday gets a reference to the given string and assigns it to the Byworkday field.
func (o *RRule) SetByworkday(v string) {
	o.Byworkday = &v
}

func (o RRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["freq"] = o.Freq
	toSerialize["datestart"] = o.Datestart
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Wkst) {
		toSerialize["wkst"] = o.Wkst
	}
	if !IsNil(o.Until) {
		toSerialize["until"] = o.Until
	}
	if !IsNil(o.Bysetpos) {
		toSerialize["bysetpos"] = o.Bysetpos
	}
	if !IsNil(o.Bymonth) {
		toSerialize["bymonth"] = o.Bymonth
	}
	if !IsNil(o.Bymonthday) {
		toSerialize["bymonthday"] = o.Bymonthday
	}
	if !IsNil(o.Byyearday) {
		toSerialize["byyearday"] = o.Byyearday
	}
	if !IsNil(o.Byweekno) {
		toSerialize["byweekno"] = o.Byweekno
	}
	if !IsNil(o.Byday) {
		toSerialize["byday"] = o.Byday
	}
	if !IsNil(o.Byworkday) {
		toSerialize["byworkday"] = o.Byworkday
	}
	return toSerialize, nil
}

type NullableRRule struct {
	value *RRule
	isSet bool
}

func (v NullableRRule) Get() *RRule {
	return v.value
}

func (v *NullableRRule) Set(val *RRule) {
	v.value = val
	v.isSet = true
}

func (v NullableRRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRRule(val *RRule) *NullableRRule {
	return &NullableRRule{value: val, isSet: true}
}

func (v NullableRRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
