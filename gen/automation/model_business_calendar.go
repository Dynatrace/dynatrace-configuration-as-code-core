/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the BusinessCalendar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessCalendar{}

// BusinessCalendar struct for BusinessCalendar
type BusinessCalendar struct {
	Id               *string          `json:"id,omitempty"`
	Title            string           `json:"title"`
	Version          int32            `json:"version"`
	Weekstart        *int32           `json:"weekstart,omitempty"`
	Weekdays         []string         `json:"weekdays,omitempty"`
	Holidays         []Holiday        `json:"holidays,omitempty"`
	ValidFrom        *string          `json:"validFrom,omitempty"`
	ValidTo          *string          `json:"validTo,omitempty"`
	Description      *string          `json:"description,omitempty"`
	ModificationInfo ModificationInfo `json:"modificationInfo"`
}

// NewBusinessCalendar instantiates a new BusinessCalendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessCalendar(title string, version int32, modificationInfo ModificationInfo) *BusinessCalendar {
	this := BusinessCalendar{}
	this.Title = title
	this.Version = version
	this.ModificationInfo = modificationInfo
	return &this
}

// NewBusinessCalendarWithDefaults instantiates a new BusinessCalendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessCalendarWithDefaults() *BusinessCalendar {
	this := BusinessCalendar{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BusinessCalendar) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BusinessCalendar) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BusinessCalendar) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *BusinessCalendar) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *BusinessCalendar) SetTitle(v string) {
	o.Title = v
}

// GetVersion returns the Version field value
func (o *BusinessCalendar) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *BusinessCalendar) SetVersion(v int32) {
	o.Version = v
}

// GetWeekstart returns the Weekstart field value if set, zero value otherwise.
func (o *BusinessCalendar) GetWeekstart() int32 {
	if o == nil || IsNil(o.Weekstart) {
		var ret int32
		return ret
	}
	return *o.Weekstart
}

// GetWeekstartOk returns a tuple with the Weekstart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetWeekstartOk() (*int32, bool) {
	if o == nil || IsNil(o.Weekstart) {
		return nil, false
	}
	return o.Weekstart, true
}

// HasWeekstart returns a boolean if a field has been set.
func (o *BusinessCalendar) HasWeekstart() bool {
	if o != nil && !IsNil(o.Weekstart) {
		return true
	}

	return false
}

// SetWeekstart gets a reference to the given int32 and assigns it to the Weekstart field.
func (o *BusinessCalendar) SetWeekstart(v int32) {
	o.Weekstart = &v
}

// GetWeekdays returns the Weekdays field value if set, zero value otherwise.
func (o *BusinessCalendar) GetWeekdays() []string {
	if o == nil || IsNil(o.Weekdays) {
		var ret []string
		return ret
	}
	return o.Weekdays
}

// GetWeekdaysOk returns a tuple with the Weekdays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetWeekdaysOk() ([]string, bool) {
	if o == nil || IsNil(o.Weekdays) {
		return nil, false
	}
	return o.Weekdays, true
}

// HasWeekdays returns a boolean if a field has been set.
func (o *BusinessCalendar) HasWeekdays() bool {
	if o != nil && !IsNil(o.Weekdays) {
		return true
	}

	return false
}

// SetWeekdays gets a reference to the given []string and assigns it to the Weekdays field.
func (o *BusinessCalendar) SetWeekdays(v []string) {
	o.Weekdays = v
}

// GetHolidays returns the Holidays field value if set, zero value otherwise.
func (o *BusinessCalendar) GetHolidays() []Holiday {
	if o == nil || IsNil(o.Holidays) {
		var ret []Holiday
		return ret
	}
	return o.Holidays
}

// GetHolidaysOk returns a tuple with the Holidays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetHolidaysOk() ([]Holiday, bool) {
	if o == nil || IsNil(o.Holidays) {
		return nil, false
	}
	return o.Holidays, true
}

// HasHolidays returns a boolean if a field has been set.
func (o *BusinessCalendar) HasHolidays() bool {
	if o != nil && !IsNil(o.Holidays) {
		return true
	}

	return false
}

// SetHolidays gets a reference to the given []Holiday and assigns it to the Holidays field.
func (o *BusinessCalendar) SetHolidays(v []Holiday) {
	o.Holidays = v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *BusinessCalendar) GetValidFrom() string {
	if o == nil || IsNil(o.ValidFrom) {
		var ret string
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetValidFromOk() (*string, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *BusinessCalendar) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given string and assigns it to the ValidFrom field.
func (o *BusinessCalendar) SetValidFrom(v string) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *BusinessCalendar) GetValidTo() string {
	if o == nil || IsNil(o.ValidTo) {
		var ret string
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetValidToOk() (*string, bool) {
	if o == nil || IsNil(o.ValidTo) {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *BusinessCalendar) HasValidTo() bool {
	if o != nil && !IsNil(o.ValidTo) {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given string and assigns it to the ValidTo field.
func (o *BusinessCalendar) SetValidTo(v string) {
	o.ValidTo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BusinessCalendar) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BusinessCalendar) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BusinessCalendar) SetDescription(v string) {
	o.Description = &v
}

// GetModificationInfo returns the ModificationInfo field value
func (o *BusinessCalendar) GetModificationInfo() ModificationInfo {
	if o == nil {
		var ret ModificationInfo
		return ret
	}

	return o.ModificationInfo
}

// GetModificationInfoOk returns a tuple with the ModificationInfo field value
// and a boolean to check if the value has been set.
func (o *BusinessCalendar) GetModificationInfoOk() (*ModificationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModificationInfo, true
}

// SetModificationInfo sets field value
func (o *BusinessCalendar) SetModificationInfo(v ModificationInfo) {
	o.ModificationInfo = v
}

func (o BusinessCalendar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessCalendar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	toSerialize["version"] = o.Version
	if !IsNil(o.Weekstart) {
		toSerialize["weekstart"] = o.Weekstart
	}
	if !IsNil(o.Weekdays) {
		toSerialize["weekdays"] = o.Weekdays
	}
	if !IsNil(o.Holidays) {
		toSerialize["holidays"] = o.Holidays
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["validFrom"] = o.ValidFrom
	}
	if !IsNil(o.ValidTo) {
		toSerialize["validTo"] = o.ValidTo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["modificationInfo"] = o.ModificationInfo
	return toSerialize, nil
}

type NullableBusinessCalendar struct {
	value *BusinessCalendar
	isSet bool
}

func (v NullableBusinessCalendar) Get() *BusinessCalendar {
	return v.value
}

func (v *NullableBusinessCalendar) Set(val *BusinessCalendar) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessCalendar(val *BusinessCalendar) *NullableBusinessCalendar {
	return &NullableBusinessCalendar{value: val, isSet: true}
}

func (v NullableBusinessCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
