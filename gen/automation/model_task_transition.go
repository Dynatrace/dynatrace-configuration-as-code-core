/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the TaskTransition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskTransition{}

// TaskTransition The TaskTransitionSerializer inlines the related workflow object and list of variables. Runtime is added as a property and calculated using the started_at and ended_at timestamps.
type TaskTransition struct {
	Id           string `json:"id"`
	TaskNameFrom string `json:"taskNameFrom"`
	TaskNameTo   string `json:"taskNameTo"`
}

// NewTaskTransition instantiates a new TaskTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskTransition(id string, taskNameFrom string, taskNameTo string) *TaskTransition {
	this := TaskTransition{}
	this.Id = id
	this.TaskNameFrom = taskNameFrom
	this.TaskNameTo = taskNameTo
	return &this
}

// NewTaskTransitionWithDefaults instantiates a new TaskTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskTransitionWithDefaults() *TaskTransition {
	this := TaskTransition{}
	return &this
}

// GetId returns the Id field value
func (o *TaskTransition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TaskTransition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TaskTransition) SetId(v string) {
	o.Id = v
}

// GetTaskNameFrom returns the TaskNameFrom field value
func (o *TaskTransition) GetTaskNameFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskNameFrom
}

// GetTaskNameFromOk returns a tuple with the TaskNameFrom field value
// and a boolean to check if the value has been set.
func (o *TaskTransition) GetTaskNameFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskNameFrom, true
}

// SetTaskNameFrom sets field value
func (o *TaskTransition) SetTaskNameFrom(v string) {
	o.TaskNameFrom = v
}

// GetTaskNameTo returns the TaskNameTo field value
func (o *TaskTransition) GetTaskNameTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskNameTo
}

// GetTaskNameToOk returns a tuple with the TaskNameTo field value
// and a boolean to check if the value has been set.
func (o *TaskTransition) GetTaskNameToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskNameTo, true
}

// SetTaskNameTo sets field value
func (o *TaskTransition) SetTaskNameTo(v string) {
	o.TaskNameTo = v
}

func (o TaskTransition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskTransition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["taskNameFrom"] = o.TaskNameFrom
	toSerialize["taskNameTo"] = o.TaskNameTo
	return toSerialize, nil
}

type NullableTaskTransition struct {
	value *TaskTransition
	isSet bool
}

func (v NullableTaskTransition) Get() *TaskTransition {
	return v.value
}

func (v *NullableTaskTransition) Set(val *TaskTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskTransition(val *TaskTransition) *NullableTaskTransition {
	return &NullableTaskTransition{value: val, isSet: true}
}

func (v NullableTaskTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
