/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the IntervalTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntervalTrigger{}

// IntervalTrigger struct for IntervalTrigger
type IntervalTrigger struct {
	Type            string  `json:"type"`
	IntervalMinutes int32   `json:"intervalMinutes"`
	BetweenStart    *string `json:"betweenStart,omitempty"`
	BetweenEnd      *string `json:"betweenEnd,omitempty"`
}

// NewIntervalTrigger instantiates a new IntervalTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalTrigger(type_ string, intervalMinutes int32) *IntervalTrigger {
	this := IntervalTrigger{}
	this.Type = type_
	this.IntervalMinutes = intervalMinutes
	return &this
}

// NewIntervalTriggerWithDefaults instantiates a new IntervalTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalTriggerWithDefaults() *IntervalTrigger {
	this := IntervalTrigger{}
	return &this
}

// GetType returns the Type field value
func (o *IntervalTrigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntervalTrigger) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntervalTrigger) SetType(v string) {
	o.Type = v
}

// GetIntervalMinutes returns the IntervalMinutes field value
func (o *IntervalTrigger) GetIntervalMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalMinutes
}

// GetIntervalMinutesOk returns a tuple with the IntervalMinutes field value
// and a boolean to check if the value has been set.
func (o *IntervalTrigger) GetIntervalMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalMinutes, true
}

// SetIntervalMinutes sets field value
func (o *IntervalTrigger) SetIntervalMinutes(v int32) {
	o.IntervalMinutes = v
}

// GetBetweenStart returns the BetweenStart field value if set, zero value otherwise.
func (o *IntervalTrigger) GetBetweenStart() string {
	if o == nil || IsNil(o.BetweenStart) {
		var ret string
		return ret
	}
	return *o.BetweenStart
}

// GetBetweenStartOk returns a tuple with the BetweenStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalTrigger) GetBetweenStartOk() (*string, bool) {
	if o == nil || IsNil(o.BetweenStart) {
		return nil, false
	}
	return o.BetweenStart, true
}

// HasBetweenStart returns a boolean if a field has been set.
func (o *IntervalTrigger) HasBetweenStart() bool {
	if o != nil && !IsNil(o.BetweenStart) {
		return true
	}

	return false
}

// SetBetweenStart gets a reference to the given string and assigns it to the BetweenStart field.
func (o *IntervalTrigger) SetBetweenStart(v string) {
	o.BetweenStart = &v
}

// GetBetweenEnd returns the BetweenEnd field value if set, zero value otherwise.
func (o *IntervalTrigger) GetBetweenEnd() string {
	if o == nil || IsNil(o.BetweenEnd) {
		var ret string
		return ret
	}
	return *o.BetweenEnd
}

// GetBetweenEndOk returns a tuple with the BetweenEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalTrigger) GetBetweenEndOk() (*string, bool) {
	if o == nil || IsNil(o.BetweenEnd) {
		return nil, false
	}
	return o.BetweenEnd, true
}

// HasBetweenEnd returns a boolean if a field has been set.
func (o *IntervalTrigger) HasBetweenEnd() bool {
	if o != nil && !IsNil(o.BetweenEnd) {
		return true
	}

	return false
}

// SetBetweenEnd gets a reference to the given string and assigns it to the BetweenEnd field.
func (o *IntervalTrigger) SetBetweenEnd(v string) {
	o.BetweenEnd = &v
}

func (o IntervalTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntervalTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["intervalMinutes"] = o.IntervalMinutes
	if !IsNil(o.BetweenStart) {
		toSerialize["betweenStart"] = o.BetweenStart
	}
	if !IsNil(o.BetweenEnd) {
		toSerialize["betweenEnd"] = o.BetweenEnd
	}
	return toSerialize, nil
}

type NullableIntervalTrigger struct {
	value *IntervalTrigger
	isSet bool
}

func (v NullableIntervalTrigger) Get() *IntervalTrigger {
	return v.value
}

func (v *NullableIntervalTrigger) Set(val *IntervalTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalTrigger(val *IntervalTrigger) *NullableIntervalTrigger {
	return &NullableIntervalTrigger{value: val, isSet: true}
}

func (v NullableIntervalTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
