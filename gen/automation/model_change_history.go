/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the ChangeHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeHistory{}

// ChangeHistory struct for ChangeHistory
type ChangeHistory struct {
	Id          int32     `json:"id"`
	User        string    `json:"user"`
	DateCreated time.Time `json:"dateCreated"`
	Version     *int32    `json:"version,omitempty"`
}

// NewChangeHistory instantiates a new ChangeHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeHistory(id int32, user string, dateCreated time.Time) *ChangeHistory {
	this := ChangeHistory{}
	this.Id = id
	this.User = user
	this.DateCreated = dateCreated
	return &this
}

// NewChangeHistoryWithDefaults instantiates a new ChangeHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeHistoryWithDefaults() *ChangeHistory {
	this := ChangeHistory{}
	return &this
}

// GetId returns the Id field value
func (o *ChangeHistory) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChangeHistory) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChangeHistory) SetId(v int32) {
	o.Id = v
}

// GetUser returns the User field value
func (o *ChangeHistory) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ChangeHistory) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ChangeHistory) SetUser(v string) {
	o.User = v
}

// GetDateCreated returns the DateCreated field value
func (o *ChangeHistory) GetDateCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value
// and a boolean to check if the value has been set.
func (o *ChangeHistory) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateCreated, true
}

// SetDateCreated sets field value
func (o *ChangeHistory) SetDateCreated(v time.Time) {
	o.DateCreated = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ChangeHistory) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeHistory) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ChangeHistory) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *ChangeHistory) SetVersion(v int32) {
	o.Version = &v
}

func (o ChangeHistory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user"] = o.User
	toSerialize["dateCreated"] = o.DateCreated
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableChangeHistory struct {
	value *ChangeHistory
	isSet bool
}

func (v NullableChangeHistory) Get() *ChangeHistory {
	return v.value
}

func (v *NullableChangeHistory) Set(val *ChangeHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeHistory(val *ChangeHistory) *NullableChangeHistory {
	return &NullableChangeHistory{value: val, isSet: true}
}

func (v NullableChangeHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
