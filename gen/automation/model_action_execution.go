/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the ActionExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionExecution{}

// ActionExecution struct for ActionExecution
type ActionExecution struct {
	Id *string `json:"id,omitempty"`
	// Parent task execution
	TaskExe NullableString `json:"taskExe,omitempty"`
	// * `WAITING` - WAITING * `RUNNING` - RUNNING * `SUSPENDED` - SUSPENDED * `SUCCESS` - SUCCESS * `ERROR` - ERROR
	State             *string                `json:"state,omitempty"`
	StateInfo         NullableString         `json:"stateInfo,omitempty"`
	Input             map[string]interface{} `json:"input,omitempty"`
	Result            map[string]interface{} `json:"result,omitempty"`
	StartedAt         NullableTime           `json:"startedAt,omitempty"`
	EndedAt           NullableTime           `json:"endedAt,omitempty"`
	Runtime           NullableInt32          `json:"runtime,omitempty"`
	ActionExecutionId NullableString         `json:"actionExecutionId,omitempty"`
	Attempt           *int32                 `json:"attempt,omitempty"`
	LoopItem          map[string]interface{} `json:"loopItem,omitempty"`
	Action            string                 `json:"action"`
}

// NewActionExecution instantiates a new ActionExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionExecution(action string) *ActionExecution {
	this := ActionExecution{}
	this.Action = action
	return &this
}

// NewActionExecutionWithDefaults instantiates a new ActionExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionExecutionWithDefaults() *ActionExecution {
	this := ActionExecution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActionExecution) SetId(v string) {
	o.Id = &v
}

// GetTaskExe returns the TaskExe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionExecution) GetTaskExe() string {
	if o == nil || IsNil(o.TaskExe.Get()) {
		var ret string
		return ret
	}
	return *o.TaskExe.Get()
}

// GetTaskExeOk returns a tuple with the TaskExe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionExecution) GetTaskExeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskExe.Get(), o.TaskExe.IsSet()
}

// HasTaskExe returns a boolean if a field has been set.
func (o *ActionExecution) HasTaskExe() bool {
	if o != nil && o.TaskExe.IsSet() {
		return true
	}

	return false
}

// SetTaskExe gets a reference to the given NullableString and assigns it to the TaskExe field.
func (o *ActionExecution) SetTaskExe(v string) {
	o.TaskExe.Set(&v)
}

// SetTaskExeNil sets the value for TaskExe to be an explicit nil
func (o *ActionExecution) SetTaskExeNil() {
	o.TaskExe.Set(nil)
}

// UnsetTaskExe ensures that no value is present for TaskExe, not even an explicit nil
func (o *ActionExecution) UnsetTaskExe() {
	o.TaskExe.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ActionExecution) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ActionExecution) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ActionExecution) SetState(v string) {
	o.State = &v
}

// GetStateInfo returns the StateInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionExecution) GetStateInfo() string {
	if o == nil || IsNil(o.StateInfo.Get()) {
		var ret string
		return ret
	}
	return *o.StateInfo.Get()
}

// GetStateInfoOk returns a tuple with the StateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionExecution) GetStateInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateInfo.Get(), o.StateInfo.IsSet()
}

// HasStateInfo returns a boolean if a field has been set.
func (o *ActionExecution) HasStateInfo() bool {
	if o != nil && o.StateInfo.IsSet() {
		return true
	}

	return false
}

// SetStateInfo gets a reference to the given NullableString and assigns it to the StateInfo field.
func (o *ActionExecution) SetStateInfo(v string) {
	o.StateInfo.Set(&v)
}

// SetStateInfoNil sets the value for StateInfo to be an explicit nil
func (o *ActionExecution) SetStateInfoNil() {
	o.StateInfo.Set(nil)
}

// UnsetStateInfo ensures that no value is present for StateInfo, not even an explicit nil
func (o *ActionExecution) UnsetStateInfo() {
	o.StateInfo.Unset()
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ActionExecution) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ActionExecution) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *ActionExecution) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ActionExecution) GetResult() map[string]interface{} {
	if o == nil || IsNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ActionExecution) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *ActionExecution) SetResult(v map[string]interface{}) {
	o.Result = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionExecution) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionExecution) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ActionExecution) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *ActionExecution) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}

// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *ActionExecution) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *ActionExecution) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionExecution) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt.Get()
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionExecution) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndedAt.Get(), o.EndedAt.IsSet()
}

// HasEndedAt returns a boolean if a field has been set.
func (o *ActionExecution) HasEndedAt() bool {
	if o != nil && o.EndedAt.IsSet() {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given NullableTime and assigns it to the EndedAt field.
func (o *ActionExecution) SetEndedAt(v time.Time) {
	o.EndedAt.Set(&v)
}

// SetEndedAtNil sets the value for EndedAt to be an explicit nil
func (o *ActionExecution) SetEndedAtNil() {
	o.EndedAt.Set(nil)
}

// UnsetEndedAt ensures that no value is present for EndedAt, not even an explicit nil
func (o *ActionExecution) UnsetEndedAt() {
	o.EndedAt.Unset()
}

// GetRuntime returns the Runtime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionExecution) GetRuntime() int32 {
	if o == nil || IsNil(o.Runtime.Get()) {
		var ret int32
		return ret
	}
	return *o.Runtime.Get()
}

// GetRuntimeOk returns a tuple with the Runtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionExecution) GetRuntimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Runtime.Get(), o.Runtime.IsSet()
}

// HasRuntime returns a boolean if a field has been set.
func (o *ActionExecution) HasRuntime() bool {
	if o != nil && o.Runtime.IsSet() {
		return true
	}

	return false
}

// SetRuntime gets a reference to the given NullableInt32 and assigns it to the Runtime field.
func (o *ActionExecution) SetRuntime(v int32) {
	o.Runtime.Set(&v)
}

// SetRuntimeNil sets the value for Runtime to be an explicit nil
func (o *ActionExecution) SetRuntimeNil() {
	o.Runtime.Set(nil)
}

// UnsetRuntime ensures that no value is present for Runtime, not even an explicit nil
func (o *ActionExecution) UnsetRuntime() {
	o.Runtime.Unset()
}

// GetActionExecutionId returns the ActionExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActionExecution) GetActionExecutionId() string {
	if o == nil || IsNil(o.ActionExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ActionExecutionId.Get()
}

// GetActionExecutionIdOk returns a tuple with the ActionExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionExecution) GetActionExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionExecutionId.Get(), o.ActionExecutionId.IsSet()
}

// HasActionExecutionId returns a boolean if a field has been set.
func (o *ActionExecution) HasActionExecutionId() bool {
	if o != nil && o.ActionExecutionId.IsSet() {
		return true
	}

	return false
}

// SetActionExecutionId gets a reference to the given NullableString and assigns it to the ActionExecutionId field.
func (o *ActionExecution) SetActionExecutionId(v string) {
	o.ActionExecutionId.Set(&v)
}

// SetActionExecutionIdNil sets the value for ActionExecutionId to be an explicit nil
func (o *ActionExecution) SetActionExecutionIdNil() {
	o.ActionExecutionId.Set(nil)
}

// UnsetActionExecutionId ensures that no value is present for ActionExecutionId, not even an explicit nil
func (o *ActionExecution) UnsetActionExecutionId() {
	o.ActionExecutionId.Unset()
}

// GetAttempt returns the Attempt field value if set, zero value otherwise.
func (o *ActionExecution) GetAttempt() int32 {
	if o == nil || IsNil(o.Attempt) {
		var ret int32
		return ret
	}
	return *o.Attempt
}

// GetAttemptOk returns a tuple with the Attempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetAttemptOk() (*int32, bool) {
	if o == nil || IsNil(o.Attempt) {
		return nil, false
	}
	return o.Attempt, true
}

// HasAttempt returns a boolean if a field has been set.
func (o *ActionExecution) HasAttempt() bool {
	if o != nil && !IsNil(o.Attempt) {
		return true
	}

	return false
}

// SetAttempt gets a reference to the given int32 and assigns it to the Attempt field.
func (o *ActionExecution) SetAttempt(v int32) {
	o.Attempt = &v
}

// GetLoopItem returns the LoopItem field value if set, zero value otherwise.
func (o *ActionExecution) GetLoopItem() map[string]interface{} {
	if o == nil || IsNil(o.LoopItem) {
		var ret map[string]interface{}
		return ret
	}
	return o.LoopItem
}

// GetLoopItemOk returns a tuple with the LoopItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetLoopItemOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LoopItem) {
		return map[string]interface{}{}, false
	}
	return o.LoopItem, true
}

// HasLoopItem returns a boolean if a field has been set.
func (o *ActionExecution) HasLoopItem() bool {
	if o != nil && !IsNil(o.LoopItem) {
		return true
	}

	return false
}

// SetLoopItem gets a reference to the given map[string]interface{} and assigns it to the LoopItem field.
func (o *ActionExecution) SetLoopItem(v map[string]interface{}) {
	o.LoopItem = v
}

// GetAction returns the Action field value
func (o *ActionExecution) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ActionExecution) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ActionExecution) SetAction(v string) {
	o.Action = v
}

func (o ActionExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.TaskExe.IsSet() {
		toSerialize["taskExe"] = o.TaskExe.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StateInfo.IsSet() {
		toSerialize["stateInfo"] = o.StateInfo.Get()
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if o.StartedAt.IsSet() {
		toSerialize["startedAt"] = o.StartedAt.Get()
	}
	if o.EndedAt.IsSet() {
		toSerialize["endedAt"] = o.EndedAt.Get()
	}
	if o.Runtime.IsSet() {
		toSerialize["runtime"] = o.Runtime.Get()
	}
	if o.ActionExecutionId.IsSet() {
		toSerialize["actionExecutionId"] = o.ActionExecutionId.Get()
	}
	if !IsNil(o.Attempt) {
		toSerialize["attempt"] = o.Attempt
	}
	if !IsNil(o.LoopItem) {
		toSerialize["loopItem"] = o.LoopItem
	}
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

type NullableActionExecution struct {
	value *ActionExecution
	isSet bool
}

func (v NullableActionExecution) Get() *ActionExecution {
	return v.value
}

func (v *NullableActionExecution) Set(val *ActionExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableActionExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableActionExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionExecution(val *ActionExecution) *NullableActionExecution {
	return &NullableActionExecution{value: val, isSet: true}
}

func (v NullableActionExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
