/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the TaskRetryOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskRetryOption{}

// TaskRetryOption struct for TaskRetryOption
type TaskRetryOption struct {
	Count TaskRetryOptionCount  `json:"count"`
	Delay *TaskRetryOptionDelay `json:"delay,omitempty"`
	// Specifies whether retrying the failed iterations or the whole loop. Default: True.
	FailedLoopIterationsOnly *bool `json:"failedLoopIterationsOnly,omitempty"`
}

// NewTaskRetryOption instantiates a new TaskRetryOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskRetryOption(count TaskRetryOptionCount) *TaskRetryOption {
	this := TaskRetryOption{}
	this.Count = count
	var failedLoopIterationsOnly bool = true
	this.FailedLoopIterationsOnly = &failedLoopIterationsOnly
	return &this
}

// NewTaskRetryOptionWithDefaults instantiates a new TaskRetryOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskRetryOptionWithDefaults() *TaskRetryOption {
	this := TaskRetryOption{}
	var failedLoopIterationsOnly bool = true
	this.FailedLoopIterationsOnly = &failedLoopIterationsOnly
	return &this
}

// GetCount returns the Count field value
func (o *TaskRetryOption) GetCount() TaskRetryOptionCount {
	if o == nil {
		var ret TaskRetryOptionCount
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TaskRetryOption) GetCountOk() (*TaskRetryOptionCount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TaskRetryOption) SetCount(v TaskRetryOptionCount) {
	o.Count = v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *TaskRetryOption) GetDelay() TaskRetryOptionDelay {
	if o == nil || IsNil(o.Delay) {
		var ret TaskRetryOptionDelay
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskRetryOption) GetDelayOk() (*TaskRetryOptionDelay, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *TaskRetryOption) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given TaskRetryOptionDelay and assigns it to the Delay field.
func (o *TaskRetryOption) SetDelay(v TaskRetryOptionDelay) {
	o.Delay = &v
}

// GetFailedLoopIterationsOnly returns the FailedLoopIterationsOnly field value if set, zero value otherwise.
func (o *TaskRetryOption) GetFailedLoopIterationsOnly() bool {
	if o == nil || IsNil(o.FailedLoopIterationsOnly) {
		var ret bool
		return ret
	}
	return *o.FailedLoopIterationsOnly
}

// GetFailedLoopIterationsOnlyOk returns a tuple with the FailedLoopIterationsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskRetryOption) GetFailedLoopIterationsOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.FailedLoopIterationsOnly) {
		return nil, false
	}
	return o.FailedLoopIterationsOnly, true
}

// HasFailedLoopIterationsOnly returns a boolean if a field has been set.
func (o *TaskRetryOption) HasFailedLoopIterationsOnly() bool {
	if o != nil && !IsNil(o.FailedLoopIterationsOnly) {
		return true
	}

	return false
}

// SetFailedLoopIterationsOnly gets a reference to the given bool and assigns it to the FailedLoopIterationsOnly field.
func (o *TaskRetryOption) SetFailedLoopIterationsOnly(v bool) {
	o.FailedLoopIterationsOnly = &v
}

func (o TaskRetryOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskRetryOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.FailedLoopIterationsOnly) {
		toSerialize["failedLoopIterationsOnly"] = o.FailedLoopIterationsOnly
	}
	return toSerialize, nil
}

type NullableTaskRetryOption struct {
	value *TaskRetryOption
	isSet bool
}

func (v NullableTaskRetryOption) Get() *TaskRetryOption {
	return v.value
}

func (v *NullableTaskRetryOption) Set(val *TaskRetryOption) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskRetryOption) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskRetryOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskRetryOption(val *TaskRetryOption) *NullableTaskRetryOption {
	return &NullableTaskRetryOption{value: val, isSet: true}
}

func (v NullableTaskRetryOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskRetryOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
