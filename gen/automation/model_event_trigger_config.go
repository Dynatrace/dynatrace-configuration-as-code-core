/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"fmt"
)

// EventTriggerConfig - struct for EventTriggerConfig
type EventTriggerConfig struct {
	DavisEventTriggerConfig   *DavisEventTriggerConfig
	DavisProblemTriggerConfig *DavisProblemTriggerConfig
	EventQueryTriggerConfig   *EventQueryTriggerConfig
}

// DavisEventTriggerConfigAsEventTriggerConfig is a convenience function that returns DavisEventTriggerConfig wrapped in EventTriggerConfig
func DavisEventTriggerConfigAsEventTriggerConfig(v *DavisEventTriggerConfig) EventTriggerConfig {
	return EventTriggerConfig{
		DavisEventTriggerConfig: v,
	}
}

// DavisProblemTriggerConfigAsEventTriggerConfig is a convenience function that returns DavisProblemTriggerConfig wrapped in EventTriggerConfig
func DavisProblemTriggerConfigAsEventTriggerConfig(v *DavisProblemTriggerConfig) EventTriggerConfig {
	return EventTriggerConfig{
		DavisProblemTriggerConfig: v,
	}
}

// EventQueryTriggerConfigAsEventTriggerConfig is a convenience function that returns EventQueryTriggerConfig wrapped in EventTriggerConfig
func EventQueryTriggerConfigAsEventTriggerConfig(v *EventQueryTriggerConfig) EventTriggerConfig {
	return EventTriggerConfig{
		EventQueryTriggerConfig: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventTriggerConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DavisEventTriggerConfig
	err = newStrictDecoder(data).Decode(&dst.DavisEventTriggerConfig)
	if err == nil {
		jsonDavisEventTriggerConfig, _ := json.Marshal(dst.DavisEventTriggerConfig)
		if string(jsonDavisEventTriggerConfig) == "{}" { // empty struct
			dst.DavisEventTriggerConfig = nil
		} else {
			match++
		}
	} else {
		dst.DavisEventTriggerConfig = nil
	}

	// try to unmarshal data into DavisProblemTriggerConfig
	err = newStrictDecoder(data).Decode(&dst.DavisProblemTriggerConfig)
	if err == nil {
		jsonDavisProblemTriggerConfig, _ := json.Marshal(dst.DavisProblemTriggerConfig)
		if string(jsonDavisProblemTriggerConfig) == "{}" { // empty struct
			dst.DavisProblemTriggerConfig = nil
		} else {
			match++
		}
	} else {
		dst.DavisProblemTriggerConfig = nil
	}

	// try to unmarshal data into EventQueryTriggerConfig
	err = newStrictDecoder(data).Decode(&dst.EventQueryTriggerConfig)
	if err == nil {
		jsonEventQueryTriggerConfig, _ := json.Marshal(dst.EventQueryTriggerConfig)
		if string(jsonEventQueryTriggerConfig) == "{}" { // empty struct
			dst.EventQueryTriggerConfig = nil
		} else {
			match++
		}
	} else {
		dst.EventQueryTriggerConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DavisEventTriggerConfig = nil
		dst.DavisProblemTriggerConfig = nil
		dst.EventQueryTriggerConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EventTriggerConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EventTriggerConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventTriggerConfig) MarshalJSON() ([]byte, error) {
	if src.DavisEventTriggerConfig != nil {
		return json.Marshal(&src.DavisEventTriggerConfig)
	}

	if src.DavisProblemTriggerConfig != nil {
		return json.Marshal(&src.DavisProblemTriggerConfig)
	}

	if src.EventQueryTriggerConfig != nil {
		return json.Marshal(&src.EventQueryTriggerConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventTriggerConfig) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DavisEventTriggerConfig != nil {
		return obj.DavisEventTriggerConfig
	}

	if obj.DavisProblemTriggerConfig != nil {
		return obj.DavisProblemTriggerConfig
	}

	if obj.EventQueryTriggerConfig != nil {
		return obj.EventQueryTriggerConfig
	}

	// all schemas are nil
	return nil
}

type NullableEventTriggerConfig struct {
	value *EventTriggerConfig
	isSet bool
}

func (v NullableEventTriggerConfig) Get() *EventTriggerConfig {
	return v.value
}

func (v *NullableEventTriggerConfig) Set(val *EventTriggerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTriggerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTriggerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTriggerConfig(val *EventTriggerConfig) *NullableEventTriggerConfig {
	return &NullableEventTriggerConfig{value: val, isSet: true}
}

func (v NullableEventTriggerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTriggerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
