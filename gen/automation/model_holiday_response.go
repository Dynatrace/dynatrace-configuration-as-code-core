/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the HolidayResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HolidayResponse{}

// HolidayResponse struct for HolidayResponse
type HolidayResponse struct {
	Count   int32         `json:"count"`
	Results []interface{} `json:"results"`
}

// NewHolidayResponse instantiates a new HolidayResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHolidayResponse(count int32, results []interface{}) *HolidayResponse {
	this := HolidayResponse{}
	this.Count = count
	this.Results = results
	return &this
}

// NewHolidayResponseWithDefaults instantiates a new HolidayResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHolidayResponseWithDefaults() *HolidayResponse {
	this := HolidayResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *HolidayResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *HolidayResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *HolidayResponse) SetCount(v int32) {
	o.Count = v
}

// GetResults returns the Results field value
func (o *HolidayResponse) GetResults() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *HolidayResponse) GetResultsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *HolidayResponse) SetResults(v []interface{}) {
	o.Results = v
}

func (o HolidayResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HolidayResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

type NullableHolidayResponse struct {
	value *HolidayResponse
	isSet bool
}

func (v NullableHolidayResponse) Get() *HolidayResponse {
	return v.value
}

func (v *NullableHolidayResponse) Set(val *HolidayResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHolidayResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHolidayResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHolidayResponse(val *HolidayResponse) *NullableHolidayResponse {
	return &NullableHolidayResponse{value: val, isSet: true}
}

func (v NullableHolidayResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHolidayResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
