/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the ScheduleInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleInput{}

// ScheduleInput struct for ScheduleInput
type ScheduleInput struct {
	Type  string             `json:"type"`
	Value ScheduleInputValue `json:"value"`
}

// NewScheduleInput instantiates a new ScheduleInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleInput(type_ string, value ScheduleInputValue) *ScheduleInput {
	this := ScheduleInput{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewScheduleInputWithDefaults instantiates a new ScheduleInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleInputWithDefaults() *ScheduleInput {
	this := ScheduleInput{}
	return &this
}

// GetType returns the Type field value
func (o *ScheduleInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScheduleInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScheduleInput) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *ScheduleInput) GetValue() ScheduleInputValue {
	if o == nil {
		var ret ScheduleInputValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ScheduleInput) GetValueOk() (*ScheduleInputValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ScheduleInput) SetValue(v ScheduleInputValue) {
	o.Value = v
}

func (o ScheduleInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableScheduleInput struct {
	value *ScheduleInput
	isSet bool
}

func (v NullableScheduleInput) Get() *ScheduleInput {
	return v.value
}

func (v *NullableScheduleInput) Set(val *ScheduleInput) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleInput) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleInput(val *ScheduleInput) *NullableScheduleInput {
	return &NullableScheduleInput{value: val, isSet: true}
}

func (v NullableScheduleInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
