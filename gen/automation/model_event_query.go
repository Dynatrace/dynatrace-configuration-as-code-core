/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the EventQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQuery{}

// EventQuery struct for EventQuery
type EventQuery struct {
	Query     string     `json:"query"`
	EventType *EventType `json:"eventType,omitempty"`
}

// NewEventQuery instantiates a new EventQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQuery(query string) *EventQuery {
	this := EventQuery{}
	this.Query = query
	return &this
}

// NewEventQueryWithDefaults instantiates a new EventQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryWithDefaults() *EventQuery {
	this := EventQuery{}
	return &this
}

// GetQuery returns the Query field value
func (o *EventQuery) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *EventQuery) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *EventQuery) SetQuery(v string) {
	o.Query = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventQuery) GetEventType() EventType {
	if o == nil || IsNil(o.EventType) {
		var ret EventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQuery) GetEventTypeOk() (*EventType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventQuery) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given EventType and assigns it to the EventType field.
func (o *EventQuery) SetEventType(v EventType) {
	o.EventType = &v
}

func (o EventQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	return toSerialize, nil
}

type NullableEventQuery struct {
	value *EventQuery
	isSet bool
}

func (v NullableEventQuery) Get() *EventQuery {
	return v.value
}

func (v *NullableEventQuery) Set(val *EventQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQuery(val *EventQuery) *NullableEventQuery {
	return &NullableEventQuery{value: val, isSet: true}
}

func (v NullableEventQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
