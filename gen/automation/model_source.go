/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the Source type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Source{}

// Source struct for Source
type Source struct {
	Model   string `json:"model"`
	Id      string `json:"id"`
	Str     string `json:"str"`
	UserStr string `json:"userStr"`
}

// NewSource instantiates a new Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSource(model string, id string, str string, userStr string) *Source {
	this := Source{}
	this.Model = model
	this.Id = id
	this.Str = str
	this.UserStr = userStr
	return &this
}

// NewSourceWithDefaults instantiates a new Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceWithDefaults() *Source {
	this := Source{}
	return &this
}

// GetModel returns the Model field value
func (o *Source) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *Source) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *Source) SetModel(v string) {
	o.Model = v
}

// GetId returns the Id field value
func (o *Source) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Source) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Source) SetId(v string) {
	o.Id = v
}

// GetStr returns the Str field value
func (o *Source) GetStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Str
}

// GetStrOk returns a tuple with the Str field value
// and a boolean to check if the value has been set.
func (o *Source) GetStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Str, true
}

// SetStr sets field value
func (o *Source) SetStr(v string) {
	o.Str = v
}

// GetUserStr returns the UserStr field value
func (o *Source) GetUserStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserStr
}

// GetUserStrOk returns a tuple with the UserStr field value
// and a boolean to check if the value has been set.
func (o *Source) GetUserStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserStr, true
}

// SetUserStr sets field value
func (o *Source) SetUserStr(v string) {
	o.UserStr = v
}

func (o Source) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Source) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	toSerialize["id"] = o.Id
	toSerialize["str"] = o.Str
	toSerialize["userStr"] = o.UserStr
	return toSerialize, nil
}

type NullableSource struct {
	value *Source
	isSet bool
}

func (v NullableSource) Get() *Source {
	return v.value
}

func (v *NullableSource) Set(val *Source) {
	v.value = val
	v.isSet = true
}

func (v NullableSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSource(val *Source) *NullableSource {
	return &NullableSource{value: val, isSet: true}
}

func (v NullableSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
