/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ExecutionsAPIService ExecutionsAPI service
type ExecutionsAPIService service

type ApiCancelExecutionRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiCancelExecutionRequest) AdminAccess(adminAccess bool) ApiCancelExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiCancelExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.CancelExecutionExecute(r)
}

/*
CancelExecution Method for CancelExecution

**Required scope:** automation:workflows:run<br/><br/>Tries to cancel an Execution.
Can only be done, if the Execution is in an active state.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiCancelExecutionRequest
*/
func (a *ExecutionsAPIService) CancelExecution(ctx context.Context, id string) ApiCancelExecutionRequest {
	return ApiCancelExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExecutionsAPIService) CancelExecutionExecute(r ApiCancelExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.CancelExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCancelTaskExecutionRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiCancelTaskExecutionRequest) AdminAccess(adminAccess bool) ApiCancelTaskExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiCancelTaskExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.CancelTaskExecutionExecute(r)
}

/*
CancelTaskExecution Method for CancelTaskExecution

**Required scope:** automation:workflows:run<br/><br/>Cancels task execution.
Canceling action executions cause the task to be cancelled, which
causes the workflow to be canceled.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@param id Task name
	@return ApiCancelTaskExecutionRequest
*/
func (a *ExecutionsAPIService) CancelTaskExecution(ctx context.Context, executionId string, id string) ApiCancelTaskExecutionRequest {
	return ApiCancelTaskExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		id:          id,
	}
}

// Execute executes the request
func (a *ExecutionsAPIService) CancelTaskExecutionExecute(r ApiCancelTaskExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.CancelTaskExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/tasks/{id}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllEventLogsRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetAllEventLogsRequest) AdminAccess(adminAccess bool) ApiGetAllEventLogsRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetAllEventLogsRequest) Execute() ([]EventLog, *http.Response, error) {
	return r.ApiService.GetAllEventLogsExecute(r)
}

/*
GetAllEventLogs Method for GetAllEventLogs

**Required scope:** automation:workflows:read<br/><br/>Get all event logs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiGetAllEventLogsRequest
*/
func (a *ExecutionsAPIService) GetAllEventLogs(ctx context.Context, id string) ApiGetAllEventLogsRequest {
	return ApiGetAllEventLogsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []EventLog
func (a *ExecutionsAPIService) GetAllEventLogsExecute(r ApiGetAllEventLogsRequest) ([]EventLog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EventLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetAllEventLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}/all-event-logs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetExecutionRequest) AdminAccess(adminAccess bool) ApiGetExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetExecutionRequest) Execute() (*Execution, *http.Response, error) {
	return r.ApiService.GetExecutionExecute(r)
}

/*
GetExecution Method for GetExecution

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiGetExecutionRequest
*/
func (a *ExecutionsAPIService) GetExecution(ctx context.Context, id string) ApiGetExecutionRequest {
	return ApiGetExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Execution
func (a *ExecutionsAPIService) GetExecutionExecute(r ApiGetExecutionRequest) (*Execution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Execution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionActionsRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetExecutionActionsRequest) AdminAccess(adminAccess bool) ApiGetExecutionActionsRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetExecutionActionsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.GetExecutionActionsExecute(r)
}

/*
GetExecutionActions Method for GetExecutionActions

**Required scope:** automation:workflows:read<br/><br/>Return list of actions assigned to tasks in a given Execution.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiGetExecutionActionsRequest
*/
func (a *ExecutionsAPIService) GetExecutionActions(ctx context.Context, id string) ApiGetExecutionActionsRequest {
	return ApiGetExecutionActionsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []string
func (a *ExecutionsAPIService) GetExecutionActionsExecute(r ApiGetExecutionActionsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetExecutionActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionLogRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetExecutionLogRequest) AdminAccess(adminAccess bool) ApiGetExecutionLogRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetExecutionLogRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetExecutionLogExecute(r)
}

/*
GetExecutionLog Method for GetExecutionLog

**Required scope:** automation:workflows:read<br/><br/>Gets the execution log

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiGetExecutionLogRequest
*/
func (a *ExecutionsAPIService) GetExecutionLog(ctx context.Context, id string) ApiGetExecutionLogRequest {
	return ApiGetExecutionLogRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return string
func (a *ExecutionsAPIService) GetExecutionLogExecute(r ApiGetExecutionLogRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetExecutionLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}/log"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; charset=utf-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionsRequest struct {
	ctx          context.Context
	ApiService   *ExecutionsAPIService
	adminAccess  *bool
	limit        *int32
	offset       *int32
	ordering     *string
	schedule     *[]string
	search       *string
	startedAtGte *time.Time
	startedAtLte *time.Time
	state        *[]string
	task         *string
	trigger      *string
	triggerType  *string
	user         *[]string
	workflow     *[]string
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetExecutionsRequest) AdminAccess(adminAccess bool) ApiGetExecutionsRequest {
	r.adminAccess = &adminAccess
	return r
}

// Number of results to return per page.
func (r ApiGetExecutionsRequest) Limit(limit int32) ApiGetExecutionsRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiGetExecutionsRequest) Offset(offset int32) ApiGetExecutionsRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiGetExecutionsRequest) Ordering(ordering string) ApiGetExecutionsRequest {
	r.ordering = &ordering
	return r
}

// Multiple values may be separated by commas.
func (r ApiGetExecutionsRequest) Schedule(schedule []string) ApiGetExecutionsRequest {
	r.schedule = &schedule
	return r
}

// A search term.
func (r ApiGetExecutionsRequest) Search(search string) ApiGetExecutionsRequest {
	r.search = &search
	return r
}

func (r ApiGetExecutionsRequest) StartedAtGte(startedAtGte time.Time) ApiGetExecutionsRequest {
	r.startedAtGte = &startedAtGte
	return r
}

func (r ApiGetExecutionsRequest) StartedAtLte(startedAtLte time.Time) ApiGetExecutionsRequest {
	r.startedAtLte = &startedAtLte
	return r
}

// Multiple values may be separated by commas.
func (r ApiGetExecutionsRequest) State(state []string) ApiGetExecutionsRequest {
	r.state = &state
	return r
}

func (r ApiGetExecutionsRequest) Task(task string) ApiGetExecutionsRequest {
	r.task = &task
	return r
}

func (r ApiGetExecutionsRequest) Trigger(trigger string) ApiGetExecutionsRequest {
	r.trigger = &trigger
	return r
}

func (r ApiGetExecutionsRequest) TriggerType(triggerType string) ApiGetExecutionsRequest {
	r.triggerType = &triggerType
	return r
}

// Multiple values may be separated by commas.
func (r ApiGetExecutionsRequest) User(user []string) ApiGetExecutionsRequest {
	r.user = &user
	return r
}

// Multiple values may be separated by commas.
func (r ApiGetExecutionsRequest) Workflow(workflow []string) ApiGetExecutionsRequest {
	r.workflow = &workflow
	return r
}

func (r ApiGetExecutionsRequest) Execute() (*PaginatedExecutionList, *http.Response, error) {
	return r.ApiService.GetExecutionsExecute(r)
}

/*
GetExecutions Method for GetExecutions

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExecutionsRequest
*/
func (a *ExecutionsAPIService) GetExecutions(ctx context.Context) ApiGetExecutionsRequest {
	return ApiGetExecutionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedExecutionList
func (a *ExecutionsAPIService) GetExecutionsExecute(r ApiGetExecutionsRequest) (*PaginatedExecutionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedExecutionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.schedule != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "schedule", r.schedule, "csv")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.startedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAt__gte", r.startedAtGte, "")
	}
	if r.startedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAt__lte", r.startedAtLte, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "csv")
	}
	if r.task != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task", r.task, "")
	}
	if r.trigger != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger", r.trigger, "")
	}
	if r.triggerType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "triggerType", r.triggerType, "")
	}
	if r.user != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "csv")
	}
	if r.workflow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workflow", r.workflow, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskExecutionRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetTaskExecutionRequest) AdminAccess(adminAccess bool) ApiGetTaskExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetTaskExecutionRequest) Execute() (*TaskExecution, *http.Response, error) {
	return r.ApiService.GetTaskExecutionExecute(r)
}

/*
GetTaskExecution Method for GetTaskExecution

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@param id Task name
	@return ApiGetTaskExecutionRequest
*/
func (a *ExecutionsAPIService) GetTaskExecution(ctx context.Context, executionId string, id string) ApiGetTaskExecutionRequest {
	return ApiGetTaskExecutionRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		id:          id,
	}
}

// Execute executes the request
//
//	@return TaskExecution
func (a *ExecutionsAPIService) GetTaskExecutionExecute(r ApiGetTaskExecutionRequest) (*TaskExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaskExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetTaskExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskExecutionInputRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetTaskExecutionInputRequest) AdminAccess(adminAccess bool) ApiGetTaskExecutionInputRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetTaskExecutionInputRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetTaskExecutionInputExecute(r)
}

/*
GetTaskExecutionInput Method for GetTaskExecutionInput

**Required scope:** automation:workflows:read<br/><br/>Returns merged inputs from all ActionExecutions belonging to the TaskExecution.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@param id Task name
	@return ApiGetTaskExecutionInputRequest
*/
func (a *ExecutionsAPIService) GetTaskExecutionInput(ctx context.Context, executionId string, id string) ApiGetTaskExecutionInputRequest {
	return ApiGetTaskExecutionInputRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		id:          id,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ExecutionsAPIService) GetTaskExecutionInputExecute(r ApiGetTaskExecutionInputRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetTaskExecutionInput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/tasks/{id}/input"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskExecutionLogRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetTaskExecutionLogRequest) AdminAccess(adminAccess bool) ApiGetTaskExecutionLogRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetTaskExecutionLogRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetTaskExecutionLogExecute(r)
}

/*
GetTaskExecutionLog Method for GetTaskExecutionLog

**Required scope:** automation:workflows:read<br/><br/>Returns the log output of a specific task.
This can be large as its the STDOUT of the Action
as defined by the user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@param id Task name
	@return ApiGetTaskExecutionLogRequest
*/
func (a *ExecutionsAPIService) GetTaskExecutionLog(ctx context.Context, executionId string, id string) ApiGetTaskExecutionLogRequest {
	return ApiGetTaskExecutionLogRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		id:          id,
	}
}

// Execute executes the request
//
//	@return string
func (a *ExecutionsAPIService) GetTaskExecutionLogExecute(r ApiGetTaskExecutionLogRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetTaskExecutionLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/tasks/{id}/log"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; charset=utf-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskExecutionResultRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetTaskExecutionResultRequest) AdminAccess(adminAccess bool) ApiGetTaskExecutionResultRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetTaskExecutionResultRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetTaskExecutionResultExecute(r)
}

/*
GetTaskExecutionResult Method for GetTaskExecutionResult

**Required scope:** automation:workflows:read<br/><br/>Returns merged results from all ActionExecutions belonging to the TaskExecution.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@param id Task name
	@return ApiGetTaskExecutionResultRequest
*/
func (a *ExecutionsAPIService) GetTaskExecutionResult(ctx context.Context, executionId string, id string) ApiGetTaskExecutionResultRequest {
	return ApiGetTaskExecutionResultRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
		id:          id,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *ExecutionsAPIService) GetTaskExecutionResultExecute(r ApiGetTaskExecutionResultRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetTaskExecutionResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/tasks/{id}/result"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskExecutionsRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetTaskExecutionsRequest) AdminAccess(adminAccess bool) ApiGetTaskExecutionsRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetTaskExecutionsRequest) Execute() (*map[string]TaskExecution, *http.Response, error) {
	return r.ApiService.GetTaskExecutionsExecute(r)
}

/*
GetTaskExecutions Method for GetTaskExecutions

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@return ApiGetTaskExecutionsRequest
*/
func (a *ExecutionsAPIService) GetTaskExecutions(ctx context.Context, executionId string) ApiGetTaskExecutionsRequest {
	return ApiGetTaskExecutionsRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
	}
}

// Execute executes the request
//
//	@return map[string]TaskExecution
func (a *ExecutionsAPIService) GetTaskExecutionsExecute(r ApiGetTaskExecutionsRequest) (*map[string]TaskExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *map[string]TaskExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetTaskExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTransitionsRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	executionId string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetTransitionsRequest) AdminAccess(adminAccess bool) ApiGetTransitionsRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetTransitionsRequest) Execute() (*map[string]TaskTransition, *http.Response, error) {
	return r.ApiService.GetTransitionsExecute(r)
}

/*
GetTransitions Method for GetTransitions

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param executionId
	@return ApiGetTransitionsRequest
*/
func (a *ExecutionsAPIService) GetTransitions(ctx context.Context, executionId string) ApiGetTransitionsRequest {
	return ApiGetTransitionsRequest{
		ApiService:  a,
		ctx:         ctx,
		executionId: executionId,
	}
}

// Execute executes the request
//
//	@return map[string]TaskTransition
func (a *ExecutionsAPIService) GetTransitionsExecute(r ApiGetTransitionsRequest) (*map[string]TaskTransition, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *map[string]TaskTransition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.GetTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{executionId}/transitions"
	localVarPath = strings.Replace(localVarPath, "{"+"executionId"+"}", url.PathEscape(parameterValueToString(r.executionId, "executionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPauseExecutionRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiPauseExecutionRequest) AdminAccess(adminAccess bool) ApiPauseExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiPauseExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.PauseExecutionExecute(r)
}

/*
PauseExecution Method for PauseExecution

**Required scope:** automation:workflows:run<br/><br/>Pauses an Execution.
Can only be done, if the Execution is in an active state.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiPauseExecutionRequest
*/
func (a *ExecutionsAPIService) PauseExecution(ctx context.Context, id string) ApiPauseExecutionRequest {
	return ApiPauseExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExecutionsAPIService) PauseExecutionExecute(r ApiPauseExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.PauseExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}/pause"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPreviewTaskInputRequest struct {
	ctx                     context.Context
	ApiService              *ExecutionsAPIService
	previewTaskInputRequest *PreviewTaskInputRequest
}

func (r ApiPreviewTaskInputRequest) PreviewTaskInputRequest(previewTaskInputRequest PreviewTaskInputRequest) ApiPreviewTaskInputRequest {
	r.previewTaskInputRequest = &previewTaskInputRequest
	return r
}

func (r ApiPreviewTaskInputRequest) Execute() (*PreviewTaskInputResponse, *http.Response, error) {
	return r.ApiService.PreviewTaskInputExecute(r)
}

/*
PreviewTaskInput Method for PreviewTaskInput

**Required scope:** automation:workflows:write<br/><br/>Returns preview expression by given task id from the workflow definition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPreviewTaskInputRequest
*/
func (a *ExecutionsAPIService) PreviewTaskInput(ctx context.Context) ApiPreviewTaskInputRequest {
	return ApiPreviewTaskInputRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PreviewTaskInputResponse
func (a *ExecutionsAPIService) PreviewTaskInputExecute(r ApiPreviewTaskInputRequest) (*PreviewTaskInputResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PreviewTaskInputResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.PreviewTaskInput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/task-input-preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.previewTaskInputRequest == nil {
		return localVarReturnValue, nil, reportError("previewTaskInputRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.previewTaskInputRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResumeExecutionRequest struct {
	ctx         context.Context
	ApiService  *ExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiResumeExecutionRequest) AdminAccess(adminAccess bool) ApiResumeExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiResumeExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResumeExecutionExecute(r)
}

/*
ResumeExecution Method for ResumeExecution

**Required scope:** automation:workflows:run<br/><br/>Resumes an Execution.
Can only be done, if the Execution is in an inactive state.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this execution.
	@return ApiResumeExecutionRequest
*/
func (a *ExecutionsAPIService) ResumeExecution(ctx context.Context, id string) ApiResumeExecutionRequest {
	return ApiResumeExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExecutionsAPIService) ResumeExecutionExecute(r ApiResumeExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionsAPIService.ResumeExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/executions/{id}/resume"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
