/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the FixedOffsetRulePreviewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedOffsetRulePreviewRequest{}

// FixedOffsetRulePreviewRequest struct for FixedOffsetRulePreviewRequest
type FixedOffsetRulePreviewRequest struct {
	Id               *string         `json:"id,omitempty"`
	Count            *int32          `json:"count,omitempty"`
	BusinessCalendar *string         `json:"businessCalendar,omitempty"`
	RuleType         string          `json:"ruleType"`
	FixedOffsetRule  FixedOffsetRule `json:"fixedOffsetRule"`
}

// NewFixedOffsetRulePreviewRequest instantiates a new FixedOffsetRulePreviewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedOffsetRulePreviewRequest(ruleType string, fixedOffsetRule FixedOffsetRule) *FixedOffsetRulePreviewRequest {
	this := FixedOffsetRulePreviewRequest{}
	var count int32 = 10
	this.Count = &count
	this.RuleType = ruleType
	this.FixedOffsetRule = fixedOffsetRule
	return &this
}

// NewFixedOffsetRulePreviewRequestWithDefaults instantiates a new FixedOffsetRulePreviewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedOffsetRulePreviewRequestWithDefaults() *FixedOffsetRulePreviewRequest {
	this := FixedOffsetRulePreviewRequest{}
	var count int32 = 10
	this.Count = &count
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FixedOffsetRulePreviewRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedOffsetRulePreviewRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FixedOffsetRulePreviewRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FixedOffsetRulePreviewRequest) SetId(v string) {
	o.Id = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *FixedOffsetRulePreviewRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedOffsetRulePreviewRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *FixedOffsetRulePreviewRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *FixedOffsetRulePreviewRequest) SetCount(v int32) {
	o.Count = &v
}

// GetBusinessCalendar returns the BusinessCalendar field value if set, zero value otherwise.
func (o *FixedOffsetRulePreviewRequest) GetBusinessCalendar() string {
	if o == nil || IsNil(o.BusinessCalendar) {
		var ret string
		return ret
	}
	return *o.BusinessCalendar
}

// GetBusinessCalendarOk returns a tuple with the BusinessCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedOffsetRulePreviewRequest) GetBusinessCalendarOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessCalendar) {
		return nil, false
	}
	return o.BusinessCalendar, true
}

// HasBusinessCalendar returns a boolean if a field has been set.
func (o *FixedOffsetRulePreviewRequest) HasBusinessCalendar() bool {
	if o != nil && !IsNil(o.BusinessCalendar) {
		return true
	}

	return false
}

// SetBusinessCalendar gets a reference to the given string and assigns it to the BusinessCalendar field.
func (o *FixedOffsetRulePreviewRequest) SetBusinessCalendar(v string) {
	o.BusinessCalendar = &v
}

// GetRuleType returns the RuleType field value
func (o *FixedOffsetRulePreviewRequest) GetRuleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *FixedOffsetRulePreviewRequest) GetRuleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *FixedOffsetRulePreviewRequest) SetRuleType(v string) {
	o.RuleType = v
}

// GetFixedOffsetRule returns the FixedOffsetRule field value
func (o *FixedOffsetRulePreviewRequest) GetFixedOffsetRule() FixedOffsetRule {
	if o == nil {
		var ret FixedOffsetRule
		return ret
	}

	return o.FixedOffsetRule
}

// GetFixedOffsetRuleOk returns a tuple with the FixedOffsetRule field value
// and a boolean to check if the value has been set.
func (o *FixedOffsetRulePreviewRequest) GetFixedOffsetRuleOk() (*FixedOffsetRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedOffsetRule, true
}

// SetFixedOffsetRule sets field value
func (o *FixedOffsetRulePreviewRequest) SetFixedOffsetRule(v FixedOffsetRule) {
	o.FixedOffsetRule = v
}

func (o FixedOffsetRulePreviewRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedOffsetRulePreviewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.BusinessCalendar) {
		toSerialize["businessCalendar"] = o.BusinessCalendar
	}
	toSerialize["ruleType"] = o.RuleType
	toSerialize["fixedOffsetRule"] = o.FixedOffsetRule
	return toSerialize, nil
}

type NullableFixedOffsetRulePreviewRequest struct {
	value *FixedOffsetRulePreviewRequest
	isSet bool
}

func (v NullableFixedOffsetRulePreviewRequest) Get() *FixedOffsetRulePreviewRequest {
	return v.value
}

func (v *NullableFixedOffsetRulePreviewRequest) Set(val *FixedOffsetRulePreviewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedOffsetRulePreviewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedOffsetRulePreviewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedOffsetRulePreviewRequest(val *FixedOffsetRulePreviewRequest) *NullableFixedOffsetRulePreviewRequest {
	return &NullableFixedOffsetRulePreviewRequest{value: val, isSet: true}
}

func (v NullableFixedOffsetRulePreviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedOffsetRulePreviewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
