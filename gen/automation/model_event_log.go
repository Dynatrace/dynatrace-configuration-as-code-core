/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the EventLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventLog{}

// EventLog struct for EventLog
type EventLog struct {
	Source    Source                 `json:"source"`
	Cause     string                 `json:"cause"`
	Event     string                 `json:"event"`
	State     string                 `json:"state"`
	Timestamp time.Time              `json:"timestamp"`
	Context   map[string]interface{} `json:"context,omitempty"`
}

// NewEventLog instantiates a new EventLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLog(source Source, cause string, event string, state string, timestamp time.Time) *EventLog {
	this := EventLog{}
	this.Source = source
	this.Cause = cause
	this.Event = event
	this.State = state
	this.Timestamp = timestamp
	return &this
}

// NewEventLogWithDefaults instantiates a new EventLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLogWithDefaults() *EventLog {
	this := EventLog{}
	return &this
}

// GetSource returns the Source field value
func (o *EventLog) GetSource() Source {
	if o == nil {
		var ret Source
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *EventLog) GetSourceOk() (*Source, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *EventLog) SetSource(v Source) {
	o.Source = v
}

// GetCause returns the Cause field value
func (o *EventLog) GetCause() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cause
}

// GetCauseOk returns a tuple with the Cause field value
// and a boolean to check if the value has been set.
func (o *EventLog) GetCauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cause, true
}

// SetCause sets field value
func (o *EventLog) SetCause(v string) {
	o.Cause = v
}

// GetEvent returns the Event field value
func (o *EventLog) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventLog) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventLog) SetEvent(v string) {
	o.Event = v
}

// GetState returns the State field value
func (o *EventLog) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *EventLog) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *EventLog) SetState(v string) {
	o.State = v
}

// GetTimestamp returns the Timestamp field value
func (o *EventLog) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventLog) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventLog) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *EventLog) GetContext() map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLog) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return map[string]interface{}{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *EventLog) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *EventLog) SetContext(v map[string]interface{}) {
	o.Context = v
}

func (o EventLog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["cause"] = o.Cause
	toSerialize["event"] = o.Event
	toSerialize["state"] = o.State
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

type NullableEventLog struct {
	value *EventLog
	isSet bool
}

func (v NullableEventLog) Get() *EventLog {
	return v.value
}

func (v *NullableEventLog) Set(val *EventLog) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLog) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLog(val *EventLog) *NullableEventLog {
	return &NullableEventLog{value: val, isSet: true}
}

func (v NullableEventLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
