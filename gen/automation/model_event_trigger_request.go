/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the EventTriggerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTriggerRequest{}

// EventTriggerRequest struct for EventTriggerRequest
type EventTriggerRequest struct {
	IsActive             *bool               `json:"isActive,omitempty"`
	TriggerConfiguration *EventTriggerConfig `json:"triggerConfiguration,omitempty"`
}

// NewEventTriggerRequest instantiates a new EventTriggerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTriggerRequest() *EventTriggerRequest {
	this := EventTriggerRequest{}
	return &this
}

// NewEventTriggerRequestWithDefaults instantiates a new EventTriggerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTriggerRequestWithDefaults() *EventTriggerRequest {
	this := EventTriggerRequest{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *EventTriggerRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTriggerRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *EventTriggerRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *EventTriggerRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetTriggerConfiguration returns the TriggerConfiguration field value if set, zero value otherwise.
func (o *EventTriggerRequest) GetTriggerConfiguration() EventTriggerConfig {
	if o == nil || IsNil(o.TriggerConfiguration) {
		var ret EventTriggerConfig
		return ret
	}
	return *o.TriggerConfiguration
}

// GetTriggerConfigurationOk returns a tuple with the TriggerConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTriggerRequest) GetTriggerConfigurationOk() (*EventTriggerConfig, bool) {
	if o == nil || IsNil(o.TriggerConfiguration) {
		return nil, false
	}
	return o.TriggerConfiguration, true
}

// HasTriggerConfiguration returns a boolean if a field has been set.
func (o *EventTriggerRequest) HasTriggerConfiguration() bool {
	if o != nil && !IsNil(o.TriggerConfiguration) {
		return true
	}

	return false
}

// SetTriggerConfiguration gets a reference to the given EventTriggerConfig and assigns it to the TriggerConfiguration field.
func (o *EventTriggerRequest) SetTriggerConfiguration(v EventTriggerConfig) {
	o.TriggerConfiguration = &v
}

func (o EventTriggerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTriggerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.TriggerConfiguration) {
		toSerialize["triggerConfiguration"] = o.TriggerConfiguration
	}
	return toSerialize, nil
}

type NullableEventTriggerRequest struct {
	value *EventTriggerRequest
	isSet bool
}

func (v NullableEventTriggerRequest) Get() *EventTriggerRequest {
	return v.value
}

func (v *NullableEventTriggerRequest) Set(val *EventTriggerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTriggerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTriggerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTriggerRequest(val *EventTriggerRequest) *NullableEventTriggerRequest {
	return &NullableEventTriggerRequest{value: val, isSet: true}
}

func (v NullableEventTriggerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTriggerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
