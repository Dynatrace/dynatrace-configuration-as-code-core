/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the DavisEventName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavisEventName{}

// DavisEventName struct for DavisEventName
type DavisEventName struct {
	Match DavisEventNameMatch `json:"match"`
	Name  string              `json:"name"`
}

// NewDavisEventName instantiates a new DavisEventName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavisEventName(match DavisEventNameMatch, name string) *DavisEventName {
	this := DavisEventName{}
	this.Match = match
	this.Name = name
	return &this
}

// NewDavisEventNameWithDefaults instantiates a new DavisEventName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavisEventNameWithDefaults() *DavisEventName {
	this := DavisEventName{}
	return &this
}

// GetMatch returns the Match field value
func (o *DavisEventName) GetMatch() DavisEventNameMatch {
	if o == nil {
		var ret DavisEventNameMatch
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *DavisEventName) GetMatchOk() (*DavisEventNameMatch, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *DavisEventName) SetMatch(v DavisEventNameMatch) {
	o.Match = v
}

// GetName returns the Name field value
func (o *DavisEventName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DavisEventName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DavisEventName) SetName(v string) {
	o.Name = v
}

func (o DavisEventName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavisEventName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["match"] = o.Match
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableDavisEventName struct {
	value *DavisEventName
	isSet bool
}

func (v NullableDavisEventName) Get() *DavisEventName {
	return v.value
}

func (v *NullableDavisEventName) Set(val *DavisEventName) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisEventName) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisEventName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisEventName(val *DavisEventName) *NullableDavisEventName {
	return &NullableDavisEventName{value: val, isSet: true}
}

func (v NullableDavisEventName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisEventName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
