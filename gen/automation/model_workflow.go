/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the Workflow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workflow{}

// Workflow struct for Workflow
type Workflow struct {
	Id            *string                `json:"id,omitempty"`
	Title         string                 `json:"title"`
	Tasks         *map[string]Task       `json:"tasks,omitempty"`
	TaskDefaults  map[string]interface{} `json:"taskDefaults,omitempty"`
	Usages        map[string]interface{} `json:"usages"`
	LastExecution NullableExecution      `json:"lastExecution"`
	Description   *string                `json:"description,omitempty"`
	Version       int32                  `json:"version"`
	Actor         NullableString         `json:"actor,omitempty"`
	Owner         *string                `json:"owner,omitempty"`
	// * `USER` - USER * `GROUP` - GROUP
	OwnerType        *string          `json:"ownerType,omitempty"`
	IsPrivate        *bool            `json:"isPrivate,omitempty"`
	TriggerType      string           `json:"triggerType"`
	SchemaVersion    *int32           `json:"schemaVersion,omitempty"`
	Trigger          *Trigger         `json:"trigger,omitempty"`
	ModificationInfo ModificationInfo `json:"modificationInfo"`
}

// NewWorkflow instantiates a new Workflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflow(title string, usages map[string]interface{}, lastExecution NullableExecution, version int32, triggerType string, modificationInfo ModificationInfo) *Workflow {
	this := Workflow{}
	this.Title = title
	this.Usages = usages
	this.LastExecution = lastExecution
	this.Version = version
	var isPrivate bool = true
	this.IsPrivate = &isPrivate
	this.TriggerType = triggerType
	this.ModificationInfo = modificationInfo
	return &this
}

// NewWorkflowWithDefaults instantiates a new Workflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowWithDefaults() *Workflow {
	this := Workflow{}
	var isPrivate bool = true
	this.IsPrivate = &isPrivate
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Workflow) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Workflow) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Workflow) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *Workflow) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Workflow) SetTitle(v string) {
	o.Title = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Workflow) GetTasks() map[string]Task {
	if o == nil || IsNil(o.Tasks) {
		var ret map[string]Task
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetTasksOk() (*map[string]Task, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Workflow) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given map[string]Task and assigns it to the Tasks field.
func (o *Workflow) SetTasks(v map[string]Task) {
	o.Tasks = &v
}

// GetTaskDefaults returns the TaskDefaults field value if set, zero value otherwise.
func (o *Workflow) GetTaskDefaults() map[string]interface{} {
	if o == nil || IsNil(o.TaskDefaults) {
		var ret map[string]interface{}
		return ret
	}
	return o.TaskDefaults
}

// GetTaskDefaultsOk returns a tuple with the TaskDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetTaskDefaultsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TaskDefaults) {
		return map[string]interface{}{}, false
	}
	return o.TaskDefaults, true
}

// HasTaskDefaults returns a boolean if a field has been set.
func (o *Workflow) HasTaskDefaults() bool {
	if o != nil && !IsNil(o.TaskDefaults) {
		return true
	}

	return false
}

// SetTaskDefaults gets a reference to the given map[string]interface{} and assigns it to the TaskDefaults field.
func (o *Workflow) SetTaskDefaults(v map[string]interface{}) {
	o.TaskDefaults = v
}

// GetUsages returns the Usages field value
func (o *Workflow) GetUsages() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetUsagesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Usages, true
}

// SetUsages sets field value
func (o *Workflow) SetUsages(v map[string]interface{}) {
	o.Usages = v
}

// GetLastExecution returns the LastExecution field value
// If the value is explicit nil, the zero value for Execution will be returned
func (o *Workflow) GetLastExecution() Execution {
	if o == nil || o.LastExecution.Get() == nil {
		var ret Execution
		return ret
	}

	return *o.LastExecution.Get()
}

// GetLastExecutionOk returns a tuple with the LastExecution field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Workflow) GetLastExecutionOk() (*Execution, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastExecution.Get(), o.LastExecution.IsSet()
}

// SetLastExecution sets field value
func (o *Workflow) SetLastExecution(v Execution) {
	o.LastExecution.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Workflow) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Workflow) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Workflow) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value
func (o *Workflow) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Workflow) SetVersion(v int32) {
	o.Version = v
}

// GetActor returns the Actor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Workflow) GetActor() string {
	if o == nil || IsNil(o.Actor.Get()) {
		var ret string
		return ret
	}
	return *o.Actor.Get()
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Workflow) GetActorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actor.Get(), o.Actor.IsSet()
}

// HasActor returns a boolean if a field has been set.
func (o *Workflow) HasActor() bool {
	if o != nil && o.Actor.IsSet() {
		return true
	}

	return false
}

// SetActor gets a reference to the given NullableString and assigns it to the Actor field.
func (o *Workflow) SetActor(v string) {
	o.Actor.Set(&v)
}

// SetActorNil sets the value for Actor to be an explicit nil
func (o *Workflow) SetActorNil() {
	o.Actor.Set(nil)
}

// UnsetActor ensures that no value is present for Actor, not even an explicit nil
func (o *Workflow) UnsetActor() {
	o.Actor.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Workflow) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Workflow) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Workflow) SetOwner(v string) {
	o.Owner = &v
}

// GetOwnerType returns the OwnerType field value if set, zero value otherwise.
func (o *Workflow) GetOwnerType() string {
	if o == nil || IsNil(o.OwnerType) {
		var ret string
		return ret
	}
	return *o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetOwnerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerType) {
		return nil, false
	}
	return o.OwnerType, true
}

// HasOwnerType returns a boolean if a field has been set.
func (o *Workflow) HasOwnerType() bool {
	if o != nil && !IsNil(o.OwnerType) {
		return true
	}

	return false
}

// SetOwnerType gets a reference to the given string and assigns it to the OwnerType field.
func (o *Workflow) SetOwnerType(v string) {
	o.OwnerType = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *Workflow) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *Workflow) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *Workflow) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetTriggerType returns the TriggerType field value
func (o *Workflow) GetTriggerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerType
}

// GetTriggerTypeOk returns a tuple with the TriggerType field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetTriggerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerType, true
}

// SetTriggerType sets field value
func (o *Workflow) SetTriggerType(v string) {
	o.TriggerType = v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *Workflow) GetSchemaVersion() int32 {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret int32
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetSchemaVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *Workflow) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given int32 and assigns it to the SchemaVersion field.
func (o *Workflow) SetSchemaVersion(v int32) {
	o.SchemaVersion = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *Workflow) GetTrigger() Trigger {
	if o == nil || IsNil(o.Trigger) {
		var ret Trigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetTriggerOk() (*Trigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *Workflow) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given Trigger and assigns it to the Trigger field.
func (o *Workflow) SetTrigger(v Trigger) {
	o.Trigger = &v
}

// GetModificationInfo returns the ModificationInfo field value
func (o *Workflow) GetModificationInfo() ModificationInfo {
	if o == nil {
		var ret ModificationInfo
		return ret
	}

	return o.ModificationInfo
}

// GetModificationInfoOk returns a tuple with the ModificationInfo field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetModificationInfoOk() (*ModificationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModificationInfo, true
}

// SetModificationInfo sets field value
func (o *Workflow) SetModificationInfo(v ModificationInfo) {
	o.ModificationInfo = v
}

func (o Workflow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workflow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.TaskDefaults) {
		toSerialize["taskDefaults"] = o.TaskDefaults
	}
	toSerialize["usages"] = o.Usages
	toSerialize["lastExecution"] = o.LastExecution.Get()
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["version"] = o.Version
	if o.Actor.IsSet() {
		toSerialize["actor"] = o.Actor.Get()
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.OwnerType) {
		toSerialize["ownerType"] = o.OwnerType
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	toSerialize["triggerType"] = o.TriggerType
	if !IsNil(o.SchemaVersion) {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	toSerialize["modificationInfo"] = o.ModificationInfo
	return toSerialize, nil
}

type NullableWorkflow struct {
	value *Workflow
	isSet bool
}

func (v NullableWorkflow) Get() *Workflow {
	return v.value
}

func (v *NullableWorkflow) Set(val *Workflow) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflow) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflow(val *Workflow) *NullableWorkflow {
	return &NullableWorkflow{value: val, isSet: true}
}

func (v NullableWorkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
