/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the EventQueryTriggerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQueryTriggerConfig{}

// EventQueryTriggerConfig struct for EventQueryTriggerConfig
type EventQueryTriggerConfig struct {
	Type  string     `json:"type"`
	Value EventQuery `json:"value"`
}

// NewEventQueryTriggerConfig instantiates a new EventQueryTriggerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQueryTriggerConfig(type_ string, value EventQuery) *EventQueryTriggerConfig {
	this := EventQueryTriggerConfig{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewEventQueryTriggerConfigWithDefaults instantiates a new EventQueryTriggerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryTriggerConfigWithDefaults() *EventQueryTriggerConfig {
	this := EventQueryTriggerConfig{}
	return &this
}

// GetType returns the Type field value
func (o *EventQueryTriggerConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventQueryTriggerConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventQueryTriggerConfig) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *EventQueryTriggerConfig) GetValue() EventQuery {
	if o == nil {
		var ret EventQuery
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EventQueryTriggerConfig) GetValueOk() (*EventQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EventQueryTriggerConfig) SetValue(v EventQuery) {
	o.Value = v
}

func (o EventQueryTriggerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventQueryTriggerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableEventQueryTriggerConfig struct {
	value *EventQueryTriggerConfig
	isSet bool
}

func (v NullableEventQueryTriggerConfig) Get() *EventQueryTriggerConfig {
	return v.value
}

func (v *NullableEventQueryTriggerConfig) Set(val *EventQueryTriggerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQueryTriggerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQueryTriggerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQueryTriggerConfig(val *EventQueryTriggerConfig) *NullableEventQueryTriggerConfig {
	return &NullableEventQueryTriggerConfig{value: val, isSet: true}
}

func (v NullableEventQueryTriggerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQueryTriggerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
