/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the Rule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rule{}

// Rule struct for Rule
type Rule struct {
	Id      *string `json:"id,omitempty"`
	Version int32   `json:"version"`
	Title   string  `json:"title"`
	// * `rrule` - rrule * `grouping` - grouping * `fixed_offset` - fixed_offset * `relative_offset` - relative_offset
	RuleType           string                     `json:"ruleType"`
	Rrule              NullableRRule              `json:"rrule,omitempty"`
	GroupingRule       NullableGroupingRule       `json:"groupingRule,omitempty"`
	FixedOffsetRule    NullableFixedOffsetRule    `json:"fixedOffsetRule,omitempty"`
	RelativeOffsetRule NullableRelativeOffsetRule `json:"relativeOffsetRule,omitempty"`
	BusinessCalendar   NullableString             `json:"businessCalendar,omitempty"`
	Description        *string                    `json:"description,omitempty"`
	ModificationInfo   ModificationInfo           `json:"modificationInfo"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule(version int32, title string, ruleType string, modificationInfo ModificationInfo) *Rule {
	this := Rule{}
	this.Version = version
	this.Title = title
	this.RuleType = ruleType
	this.ModificationInfo = modificationInfo
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Rule) SetId(v string) {
	o.Id = &v
}

// GetVersion returns the Version field value
func (o *Rule) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Rule) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Rule) SetVersion(v int32) {
	o.Version = v
}

// GetTitle returns the Title field value
func (o *Rule) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Rule) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Rule) SetTitle(v string) {
	o.Title = v
}

// GetRuleType returns the RuleType field value
func (o *Rule) GetRuleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *Rule) GetRuleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *Rule) SetRuleType(v string) {
	o.RuleType = v
}

// GetRrule returns the Rrule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetRrule() RRule {
	if o == nil || IsNil(o.Rrule.Get()) {
		var ret RRule
		return ret
	}
	return *o.Rrule.Get()
}

// GetRruleOk returns a tuple with the Rrule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetRruleOk() (*RRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rrule.Get(), o.Rrule.IsSet()
}

// HasRrule returns a boolean if a field has been set.
func (o *Rule) HasRrule() bool {
	if o != nil && o.Rrule.IsSet() {
		return true
	}

	return false
}

// SetRrule gets a reference to the given NullableRRule and assigns it to the Rrule field.
func (o *Rule) SetRrule(v RRule) {
	o.Rrule.Set(&v)
}

// SetRruleNil sets the value for Rrule to be an explicit nil
func (o *Rule) SetRruleNil() {
	o.Rrule.Set(nil)
}

// UnsetRrule ensures that no value is present for Rrule, not even an explicit nil
func (o *Rule) UnsetRrule() {
	o.Rrule.Unset()
}

// GetGroupingRule returns the GroupingRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetGroupingRule() GroupingRule {
	if o == nil || IsNil(o.GroupingRule.Get()) {
		var ret GroupingRule
		return ret
	}
	return *o.GroupingRule.Get()
}

// GetGroupingRuleOk returns a tuple with the GroupingRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetGroupingRuleOk() (*GroupingRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupingRule.Get(), o.GroupingRule.IsSet()
}

// HasGroupingRule returns a boolean if a field has been set.
func (o *Rule) HasGroupingRule() bool {
	if o != nil && o.GroupingRule.IsSet() {
		return true
	}

	return false
}

// SetGroupingRule gets a reference to the given NullableGroupingRule and assigns it to the GroupingRule field.
func (o *Rule) SetGroupingRule(v GroupingRule) {
	o.GroupingRule.Set(&v)
}

// SetGroupingRuleNil sets the value for GroupingRule to be an explicit nil
func (o *Rule) SetGroupingRuleNil() {
	o.GroupingRule.Set(nil)
}

// UnsetGroupingRule ensures that no value is present for GroupingRule, not even an explicit nil
func (o *Rule) UnsetGroupingRule() {
	o.GroupingRule.Unset()
}

// GetFixedOffsetRule returns the FixedOffsetRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetFixedOffsetRule() FixedOffsetRule {
	if o == nil || IsNil(o.FixedOffsetRule.Get()) {
		var ret FixedOffsetRule
		return ret
	}
	return *o.FixedOffsetRule.Get()
}

// GetFixedOffsetRuleOk returns a tuple with the FixedOffsetRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetFixedOffsetRuleOk() (*FixedOffsetRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.FixedOffsetRule.Get(), o.FixedOffsetRule.IsSet()
}

// HasFixedOffsetRule returns a boolean if a field has been set.
func (o *Rule) HasFixedOffsetRule() bool {
	if o != nil && o.FixedOffsetRule.IsSet() {
		return true
	}

	return false
}

// SetFixedOffsetRule gets a reference to the given NullableFixedOffsetRule and assigns it to the FixedOffsetRule field.
func (o *Rule) SetFixedOffsetRule(v FixedOffsetRule) {
	o.FixedOffsetRule.Set(&v)
}

// SetFixedOffsetRuleNil sets the value for FixedOffsetRule to be an explicit nil
func (o *Rule) SetFixedOffsetRuleNil() {
	o.FixedOffsetRule.Set(nil)
}

// UnsetFixedOffsetRule ensures that no value is present for FixedOffsetRule, not even an explicit nil
func (o *Rule) UnsetFixedOffsetRule() {
	o.FixedOffsetRule.Unset()
}

// GetRelativeOffsetRule returns the RelativeOffsetRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetRelativeOffsetRule() RelativeOffsetRule {
	if o == nil || IsNil(o.RelativeOffsetRule.Get()) {
		var ret RelativeOffsetRule
		return ret
	}
	return *o.RelativeOffsetRule.Get()
}

// GetRelativeOffsetRuleOk returns a tuple with the RelativeOffsetRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetRelativeOffsetRuleOk() (*RelativeOffsetRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelativeOffsetRule.Get(), o.RelativeOffsetRule.IsSet()
}

// HasRelativeOffsetRule returns a boolean if a field has been set.
func (o *Rule) HasRelativeOffsetRule() bool {
	if o != nil && o.RelativeOffsetRule.IsSet() {
		return true
	}

	return false
}

// SetRelativeOffsetRule gets a reference to the given NullableRelativeOffsetRule and assigns it to the RelativeOffsetRule field.
func (o *Rule) SetRelativeOffsetRule(v RelativeOffsetRule) {
	o.RelativeOffsetRule.Set(&v)
}

// SetRelativeOffsetRuleNil sets the value for RelativeOffsetRule to be an explicit nil
func (o *Rule) SetRelativeOffsetRuleNil() {
	o.RelativeOffsetRule.Set(nil)
}

// UnsetRelativeOffsetRule ensures that no value is present for RelativeOffsetRule, not even an explicit nil
func (o *Rule) UnsetRelativeOffsetRule() {
	o.RelativeOffsetRule.Unset()
}

// GetBusinessCalendar returns the BusinessCalendar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetBusinessCalendar() string {
	if o == nil || IsNil(o.BusinessCalendar.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessCalendar.Get()
}

// GetBusinessCalendarOk returns a tuple with the BusinessCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetBusinessCalendarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessCalendar.Get(), o.BusinessCalendar.IsSet()
}

// HasBusinessCalendar returns a boolean if a field has been set.
func (o *Rule) HasBusinessCalendar() bool {
	if o != nil && o.BusinessCalendar.IsSet() {
		return true
	}

	return false
}

// SetBusinessCalendar gets a reference to the given NullableString and assigns it to the BusinessCalendar field.
func (o *Rule) SetBusinessCalendar(v string) {
	o.BusinessCalendar.Set(&v)
}

// SetBusinessCalendarNil sets the value for BusinessCalendar to be an explicit nil
func (o *Rule) SetBusinessCalendarNil() {
	o.BusinessCalendar.Set(nil)
}

// UnsetBusinessCalendar ensures that no value is present for BusinessCalendar, not even an explicit nil
func (o *Rule) UnsetBusinessCalendar() {
	o.BusinessCalendar.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Rule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Rule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Rule) SetDescription(v string) {
	o.Description = &v
}

// GetModificationInfo returns the ModificationInfo field value
func (o *Rule) GetModificationInfo() ModificationInfo {
	if o == nil {
		var ret ModificationInfo
		return ret
	}

	return o.ModificationInfo
}

// GetModificationInfoOk returns a tuple with the ModificationInfo field value
// and a boolean to check if the value has been set.
func (o *Rule) GetModificationInfoOk() (*ModificationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModificationInfo, true
}

// SetModificationInfo sets field value
func (o *Rule) SetModificationInfo(v ModificationInfo) {
	o.ModificationInfo = v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["version"] = o.Version
	toSerialize["title"] = o.Title
	toSerialize["ruleType"] = o.RuleType
	if o.Rrule.IsSet() {
		toSerialize["rrule"] = o.Rrule.Get()
	}
	if o.GroupingRule.IsSet() {
		toSerialize["groupingRule"] = o.GroupingRule.Get()
	}
	if o.FixedOffsetRule.IsSet() {
		toSerialize["fixedOffsetRule"] = o.FixedOffsetRule.Get()
	}
	if o.RelativeOffsetRule.IsSet() {
		toSerialize["relativeOffsetRule"] = o.RelativeOffsetRule.Get()
	}
	if o.BusinessCalendar.IsSet() {
		toSerialize["businessCalendar"] = o.BusinessCalendar.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["modificationInfo"] = o.ModificationInfo
	return toSerialize, nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
