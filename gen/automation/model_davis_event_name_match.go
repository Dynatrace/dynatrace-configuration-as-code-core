/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"fmt"
)

// DavisEventNameMatch Davis event name match choices.
type DavisEventNameMatch string

// List of DavisEventNameMatch
const (
	EQUALS   DavisEventNameMatch = "equals"
	CONTAINS DavisEventNameMatch = "contains"
)

// All allowed values of DavisEventNameMatch enum
var AllowedDavisEventNameMatchEnumValues = []DavisEventNameMatch{
	"equals",
	"contains",
}

func (v *DavisEventNameMatch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DavisEventNameMatch(value)
	for _, existing := range AllowedDavisEventNameMatchEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DavisEventNameMatch", value)
}

// NewDavisEventNameMatchFromValue returns a pointer to a valid DavisEventNameMatch
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDavisEventNameMatchFromValue(v string) (*DavisEventNameMatch, error) {
	ev := DavisEventNameMatch(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DavisEventNameMatch: valid values are %v", v, AllowedDavisEventNameMatchEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DavisEventNameMatch) IsValid() bool {
	for _, existing := range AllowedDavisEventNameMatchEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DavisEventNameMatch value
func (v DavisEventNameMatch) Ptr() *DavisEventNameMatch {
	return &v
}

type NullableDavisEventNameMatch struct {
	value *DavisEventNameMatch
	isSet bool
}

func (v NullableDavisEventNameMatch) Get() *DavisEventNameMatch {
	return v.value
}

func (v *NullableDavisEventNameMatch) Set(val *DavisEventNameMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisEventNameMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisEventNameMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisEventNameMatch(val *DavisEventNameMatch) *NullableDavisEventNameMatch {
	return &NullableDavisEventNameMatch{value: val, isSet: true}
}

func (v NullableDavisEventNameMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisEventNameMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
