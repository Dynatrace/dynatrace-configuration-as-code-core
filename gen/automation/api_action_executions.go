/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ActionExecutionsAPIService ActionExecutionsAPI service
type ActionExecutionsAPIService service

type ApiGetActionExecutionRequest struct {
	ctx         context.Context
	ApiService  *ActionExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetActionExecutionRequest) AdminAccess(adminAccess bool) ApiGetActionExecutionRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetActionExecutionRequest) Execute() (*ActionExecution, *http.Response, error) {
	return r.ApiService.GetActionExecutionExecute(r)
}

/*
GetActionExecution Method for GetActionExecution

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this action execution.
	@return ApiGetActionExecutionRequest
*/
func (a *ActionExecutionsAPIService) GetActionExecution(ctx context.Context, id string) ApiGetActionExecutionRequest {
	return ApiGetActionExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ActionExecution
func (a *ActionExecutionsAPIService) GetActionExecutionExecute(r ApiGetActionExecutionRequest) (*ActionExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActionExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActionExecutionsAPIService.GetActionExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/action-executions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetActionExecutionLogRequest struct {
	ctx         context.Context
	ApiService  *ActionExecutionsAPIService
	id          string
	adminAccess *bool
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetActionExecutionLogRequest) AdminAccess(adminAccess bool) ApiGetActionExecutionLogRequest {
	r.adminAccess = &adminAccess
	return r
}

func (r ApiGetActionExecutionLogRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetActionExecutionLogExecute(r)
}

/*
GetActionExecutionLog Method for GetActionExecutionLog

**Required scope:** automation:workflows:read<br/><br/>Returns the log output of a specific ActionExecution.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A UUID string identifying this action execution.
	@return ApiGetActionExecutionLogRequest
*/
func (a *ActionExecutionsAPIService) GetActionExecutionLog(ctx context.Context, id string) ApiGetActionExecutionLogRequest {
	return ApiGetActionExecutionLogRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return string
func (a *ActionExecutionsAPIService) GetActionExecutionLogExecute(r ApiGetActionExecutionLogRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActionExecutionsAPIService.GetActionExecutionLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/action-executions/{id}/log"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain; charset=utf-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetActionExecutionsRequest struct {
	ctx          context.Context
	ApiService   *ActionExecutionsAPIService
	adminAccess  *bool
	limit        *int32
	offset       *int32
	ordering     *string
	search       *string
	startedAtGte *time.Time
	startedAtLte *time.Time
	state        *[]string
}

// Allow access to all workflows/executions - additionally requires **automation:workflows:admin**
func (r ApiGetActionExecutionsRequest) AdminAccess(adminAccess bool) ApiGetActionExecutionsRequest {
	r.adminAccess = &adminAccess
	return r
}

// Number of results to return per page.
func (r ApiGetActionExecutionsRequest) Limit(limit int32) ApiGetActionExecutionsRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiGetActionExecutionsRequest) Offset(offset int32) ApiGetActionExecutionsRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiGetActionExecutionsRequest) Ordering(ordering string) ApiGetActionExecutionsRequest {
	r.ordering = &ordering
	return r
}

// A search term.
func (r ApiGetActionExecutionsRequest) Search(search string) ApiGetActionExecutionsRequest {
	r.search = &search
	return r
}

func (r ApiGetActionExecutionsRequest) StartedAtGte(startedAtGte time.Time) ApiGetActionExecutionsRequest {
	r.startedAtGte = &startedAtGte
	return r
}

func (r ApiGetActionExecutionsRequest) StartedAtLte(startedAtLte time.Time) ApiGetActionExecutionsRequest {
	r.startedAtLte = &startedAtLte
	return r
}

// Multiple values may be separated by commas.
func (r ApiGetActionExecutionsRequest) State(state []string) ApiGetActionExecutionsRequest {
	r.state = &state
	return r
}

func (r ApiGetActionExecutionsRequest) Execute() (*PaginatedActionExecutionList, *http.Response, error) {
	return r.ApiService.GetActionExecutionsExecute(r)
}

/*
GetActionExecutions Method for GetActionExecutions

**Required scope:** automation:workflows:read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetActionExecutionsRequest
*/
func (a *ActionExecutionsAPIService) GetActionExecutions(ctx context.Context) ApiGetActionExecutionsRequest {
	return ApiGetActionExecutionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedActionExecutionList
func (a *ActionExecutionsAPIService) GetActionExecutionsExecute(r ApiGetActionExecutionsRequest) (*PaginatedActionExecutionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedActionExecutionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActionExecutionsAPIService.GetActionExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/action-executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adminAccess != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adminAccess", r.adminAccess, "")
	} else {
		var defaultValue bool = false
		r.adminAccess = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.startedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAt__gte", r.startedAtGte, "")
	}
	if r.startedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAt__lte", r.startedAtLte, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
