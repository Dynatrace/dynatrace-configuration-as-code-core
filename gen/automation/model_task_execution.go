/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"time"
)

// checks if the TaskExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskExecution{}

// TaskExecution struct for TaskExecution
type TaskExecution struct {
	Id string `json:"id"`
	// Parent execution
	Execution NullableString `json:"execution,omitempty"`
	Name      string         `json:"name"`
	// * `WAITING` - WAITING * `RUNNING` - RUNNING * `SUCCESS` - SUCCESS * `ERROR` - ERROR
	State     *string                `json:"state,omitempty"`
	StateInfo NullableString         `json:"stateInfo,omitempty"`
	Input     map[string]interface{} `json:"input,omitempty"`
	StartedAt time.Time              `json:"startedAt"`
	EndedAt   time.Time              `json:"endedAt"`
	// Calculate the runtime of an exection in seconds. If the Execution is not ended, runtime is calculated until now.
	Runtime      int32                  `json:"runtime"`
	TriggeredBy  map[string]interface{} `json:"triggeredBy,omitempty"`
	Position     TaskExecutionPosition  `json:"position"`
	Conditions   map[string]interface{} `json:"conditions"`
	Predecessors []string               `json:"predecessors"`
	// Whether task is active
	Active           bool                   `json:"active"`
	Result           NullableAnyOf          `json:"result"`
	ConditionResults map[string]interface{} `json:"conditionResults,omitempty"`
}

// NewTaskExecution instantiates a new TaskExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskExecution(id string, name string, startedAt time.Time, endedAt time.Time, runtime int32, position TaskExecutionPosition, conditions map[string]interface{}, predecessors []string, active bool, result NullableAnyOf) *TaskExecution {
	this := TaskExecution{}
	this.Id = id
	this.Name = name
	this.StartedAt = startedAt
	this.EndedAt = endedAt
	this.Runtime = runtime
	this.Position = position
	this.Conditions = conditions
	this.Predecessors = predecessors
	this.Active = active
	this.Result = result
	return &this
}

// NewTaskExecutionWithDefaults instantiates a new TaskExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskExecutionWithDefaults() *TaskExecution {
	this := TaskExecution{}
	return &this
}

// GetId returns the Id field value
func (o *TaskExecution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TaskExecution) SetId(v string) {
	o.Id = v
}

// GetExecution returns the Execution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskExecution) GetExecution() string {
	if o == nil || IsNil(o.Execution.Get()) {
		var ret string
		return ret
	}
	return *o.Execution.Get()
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskExecution) GetExecutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Execution.Get(), o.Execution.IsSet()
}

// HasExecution returns a boolean if a field has been set.
func (o *TaskExecution) HasExecution() bool {
	if o != nil && o.Execution.IsSet() {
		return true
	}

	return false
}

// SetExecution gets a reference to the given NullableString and assigns it to the Execution field.
func (o *TaskExecution) SetExecution(v string) {
	o.Execution.Set(&v)
}

// SetExecutionNil sets the value for Execution to be an explicit nil
func (o *TaskExecution) SetExecutionNil() {
	o.Execution.Set(nil)
}

// UnsetExecution ensures that no value is present for Execution, not even an explicit nil
func (o *TaskExecution) UnsetExecution() {
	o.Execution.Unset()
}

// GetName returns the Name field value
func (o *TaskExecution) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TaskExecution) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TaskExecution) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TaskExecution) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TaskExecution) SetState(v string) {
	o.State = &v
}

// GetStateInfo returns the StateInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskExecution) GetStateInfo() string {
	if o == nil || IsNil(o.StateInfo.Get()) {
		var ret string
		return ret
	}
	return *o.StateInfo.Get()
}

// GetStateInfoOk returns a tuple with the StateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskExecution) GetStateInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateInfo.Get(), o.StateInfo.IsSet()
}

// HasStateInfo returns a boolean if a field has been set.
func (o *TaskExecution) HasStateInfo() bool {
	if o != nil && o.StateInfo.IsSet() {
		return true
	}

	return false
}

// SetStateInfo gets a reference to the given NullableString and assigns it to the StateInfo field.
func (o *TaskExecution) SetStateInfo(v string) {
	o.StateInfo.Set(&v)
}

// SetStateInfoNil sets the value for StateInfo to be an explicit nil
func (o *TaskExecution) SetStateInfoNil() {
	o.StateInfo.Set(nil)
}

// UnsetStateInfo ensures that no value is present for StateInfo, not even an explicit nil
func (o *TaskExecution) UnsetStateInfo() {
	o.StateInfo.Unset()
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *TaskExecution) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *TaskExecution) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *TaskExecution) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetStartedAt returns the StartedAt field value
func (o *TaskExecution) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *TaskExecution) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetEndedAt returns the EndedAt field value
func (o *TaskExecution) GetEndedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndedAt, true
}

// SetEndedAt sets field value
func (o *TaskExecution) SetEndedAt(v time.Time) {
	o.EndedAt = v
}

// GetRuntime returns the Runtime field value
func (o *TaskExecution) GetRuntime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Runtime
}

// GetRuntimeOk returns a tuple with the Runtime field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetRuntimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Runtime, true
}

// SetRuntime sets field value
func (o *TaskExecution) SetRuntime(v int32) {
	o.Runtime = v
}

// GetTriggeredBy returns the TriggeredBy field value if set, zero value otherwise.
func (o *TaskExecution) GetTriggeredBy() map[string]interface{} {
	if o == nil || IsNil(o.TriggeredBy) {
		var ret map[string]interface{}
		return ret
	}
	return o.TriggeredBy
}

// GetTriggeredByOk returns a tuple with the TriggeredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetTriggeredByOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TriggeredBy) {
		return map[string]interface{}{}, false
	}
	return o.TriggeredBy, true
}

// HasTriggeredBy returns a boolean if a field has been set.
func (o *TaskExecution) HasTriggeredBy() bool {
	if o != nil && !IsNil(o.TriggeredBy) {
		return true
	}

	return false
}

// SetTriggeredBy gets a reference to the given map[string]interface{} and assigns it to the TriggeredBy field.
func (o *TaskExecution) SetTriggeredBy(v map[string]interface{}) {
	o.TriggeredBy = v
}

// GetPosition returns the Position field value
func (o *TaskExecution) GetPosition() TaskExecutionPosition {
	if o == nil {
		var ret TaskExecutionPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetPositionOk() (*TaskExecutionPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *TaskExecution) SetPosition(v TaskExecutionPosition) {
	o.Position = v
}

// GetConditions returns the Conditions field value
func (o *TaskExecution) GetConditions() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetConditionsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *TaskExecution) SetConditions(v map[string]interface{}) {
	o.Conditions = v
}

// GetPredecessors returns the Predecessors field value
func (o *TaskExecution) GetPredecessors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Predecessors
}

// GetPredecessorsOk returns a tuple with the Predecessors field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetPredecessorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Predecessors, true
}

// SetPredecessors sets field value
func (o *TaskExecution) SetPredecessors(v []string) {
	o.Predecessors = v
}

// GetActive returns the Active field value
func (o *TaskExecution) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *TaskExecution) SetActive(v bool) {
	o.Active = v
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for AnyOf will be returned
func (o *TaskExecution) GetResult() AnyOf {
	if o == nil || o.Result.Get() == nil {
		var ret AnyOf
		return ret
	}

	return *o.Result.Get()
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskExecution) GetResultOk() (*AnyOf, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result.Get(), o.Result.IsSet()
}

// SetResult sets field value
func (o *TaskExecution) SetResult(v AnyOf) {
	o.Result.Set(&v)
}

// GetConditionResults returns the ConditionResults field value if set, zero value otherwise.
func (o *TaskExecution) GetConditionResults() map[string]interface{} {
	if o == nil || IsNil(o.ConditionResults) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConditionResults
}

// GetConditionResultsOk returns a tuple with the ConditionResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetConditionResultsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConditionResults) {
		return map[string]interface{}{}, false
	}
	return o.ConditionResults, true
}

// HasConditionResults returns a boolean if a field has been set.
func (o *TaskExecution) HasConditionResults() bool {
	if o != nil && !IsNil(o.ConditionResults) {
		return true
	}

	return false
}

// SetConditionResults gets a reference to the given map[string]interface{} and assigns it to the ConditionResults field.
func (o *TaskExecution) SetConditionResults(v map[string]interface{}) {
	o.ConditionResults = v
}

func (o TaskExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Execution.IsSet() {
		toSerialize["execution"] = o.Execution.Get()
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StateInfo.IsSet() {
		toSerialize["stateInfo"] = o.StateInfo.Get()
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	toSerialize["startedAt"] = o.StartedAt
	toSerialize["endedAt"] = o.EndedAt
	toSerialize["runtime"] = o.Runtime
	if !IsNil(o.TriggeredBy) {
		toSerialize["triggeredBy"] = o.TriggeredBy
	}
	toSerialize["position"] = o.Position
	toSerialize["conditions"] = o.Conditions
	toSerialize["predecessors"] = o.Predecessors
	toSerialize["active"] = o.Active
	toSerialize["result"] = o.Result.Get()
	if !IsNil(o.ConditionResults) {
		toSerialize["conditionResults"] = o.ConditionResults
	}
	return toSerialize, nil
}

type NullableTaskExecution struct {
	value *TaskExecution
	isSet bool
}

func (v NullableTaskExecution) Get() *TaskExecution {
	return v.value
}

func (v *NullableTaskExecution) Set(val *TaskExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskExecution(val *TaskExecution) *NullableTaskExecution {
	return &NullableTaskExecution{value: val, isSet: true}
}

func (v NullableTaskExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
