/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the RRulePreviewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RRulePreviewRequest{}

// RRulePreviewRequest struct for RRulePreviewRequest
type RRulePreviewRequest struct {
	Id               *string `json:"id,omitempty"`
	Count            *int32  `json:"count,omitempty"`
	BusinessCalendar *string `json:"businessCalendar,omitempty"`
	RuleType         string  `json:"ruleType"`
	Rrule            RRule   `json:"rrule"`
}

// NewRRulePreviewRequest instantiates a new RRulePreviewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRRulePreviewRequest(ruleType string, rrule RRule) *RRulePreviewRequest {
	this := RRulePreviewRequest{}
	var count int32 = 10
	this.Count = &count
	this.RuleType = ruleType
	this.Rrule = rrule
	return &this
}

// NewRRulePreviewRequestWithDefaults instantiates a new RRulePreviewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRRulePreviewRequestWithDefaults() *RRulePreviewRequest {
	this := RRulePreviewRequest{}
	var count int32 = 10
	this.Count = &count
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RRulePreviewRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRulePreviewRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RRulePreviewRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RRulePreviewRequest) SetId(v string) {
	o.Id = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RRulePreviewRequest) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRulePreviewRequest) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RRulePreviewRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RRulePreviewRequest) SetCount(v int32) {
	o.Count = &v
}

// GetBusinessCalendar returns the BusinessCalendar field value if set, zero value otherwise.
func (o *RRulePreviewRequest) GetBusinessCalendar() string {
	if o == nil || IsNil(o.BusinessCalendar) {
		var ret string
		return ret
	}
	return *o.BusinessCalendar
}

// GetBusinessCalendarOk returns a tuple with the BusinessCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRulePreviewRequest) GetBusinessCalendarOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessCalendar) {
		return nil, false
	}
	return o.BusinessCalendar, true
}

// HasBusinessCalendar returns a boolean if a field has been set.
func (o *RRulePreviewRequest) HasBusinessCalendar() bool {
	if o != nil && !IsNil(o.BusinessCalendar) {
		return true
	}

	return false
}

// SetBusinessCalendar gets a reference to the given string and assigns it to the BusinessCalendar field.
func (o *RRulePreviewRequest) SetBusinessCalendar(v string) {
	o.BusinessCalendar = &v
}

// GetRuleType returns the RuleType field value
func (o *RRulePreviewRequest) GetRuleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *RRulePreviewRequest) GetRuleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *RRulePreviewRequest) SetRuleType(v string) {
	o.RuleType = v
}

// GetRrule returns the Rrule field value
func (o *RRulePreviewRequest) GetRrule() RRule {
	if o == nil {
		var ret RRule
		return ret
	}

	return o.Rrule
}

// GetRruleOk returns a tuple with the Rrule field value
// and a boolean to check if the value has been set.
func (o *RRulePreviewRequest) GetRruleOk() (*RRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rrule, true
}

// SetRrule sets field value
func (o *RRulePreviewRequest) SetRrule(v RRule) {
	o.Rrule = v
}

func (o RRulePreviewRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RRulePreviewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.BusinessCalendar) {
		toSerialize["businessCalendar"] = o.BusinessCalendar
	}
	toSerialize["ruleType"] = o.RuleType
	toSerialize["rrule"] = o.Rrule
	return toSerialize, nil
}

type NullableRRulePreviewRequest struct {
	value *RRulePreviewRequest
	isSet bool
}

func (v NullableRRulePreviewRequest) Get() *RRulePreviewRequest {
	return v.value
}

func (v *NullableRRulePreviewRequest) Set(val *RRulePreviewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRRulePreviewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRRulePreviewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRRulePreviewRequest(val *RRulePreviewRequest) *NullableRRulePreviewRequest {
	return &NullableRRulePreviewRequest{value: val, isSet: true}
}

func (v NullableRRulePreviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRRulePreviewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
