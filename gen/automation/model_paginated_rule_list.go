/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the PaginatedRuleList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedRuleList{}

// PaginatedRuleList struct for PaginatedRuleList
type PaginatedRuleList struct {
	Count   *int32 `json:"count,omitempty"`
	Results []Rule `json:"results,omitempty"`
}

// NewPaginatedRuleList instantiates a new PaginatedRuleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedRuleList() *PaginatedRuleList {
	this := PaginatedRuleList{}
	return &this
}

// NewPaginatedRuleListWithDefaults instantiates a new PaginatedRuleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedRuleListWithDefaults() *PaginatedRuleList {
	this := PaginatedRuleList{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PaginatedRuleList) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedRuleList) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PaginatedRuleList) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PaginatedRuleList) SetCount(v int32) {
	o.Count = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *PaginatedRuleList) GetResults() []Rule {
	if o == nil || IsNil(o.Results) {
		var ret []Rule
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedRuleList) GetResultsOk() ([]Rule, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *PaginatedRuleList) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Rule and assigns it to the Results field.
func (o *PaginatedRuleList) SetResults(v []Rule) {
	o.Results = v
}

func (o PaginatedRuleList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedRuleList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullablePaginatedRuleList struct {
	value *PaginatedRuleList
	isSet bool
}

func (v NullablePaginatedRuleList) Get() *PaginatedRuleList {
	return v.value
}

func (v *NullablePaginatedRuleList) Set(val *PaginatedRuleList) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedRuleList) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedRuleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedRuleList(val *PaginatedRuleList) *NullablePaginatedRuleList {
	return &NullablePaginatedRuleList{value: val, isSet: true}
}

func (v NullablePaginatedRuleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedRuleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
