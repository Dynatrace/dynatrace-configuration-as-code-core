/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the DavisProblemConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavisProblemConfig{}

// DavisProblemConfig struct for DavisProblemConfig
type DavisProblemConfig struct {
	EntityTagsMatch *EntityTagsMatch       `json:"entityTagsMatch,omitempty"`
	EntityTags      *map[string]string     `json:"entityTags,omitempty"`
	OnProblemClose  *bool                  `json:"onProblemClose,omitempty"`
	Categories      DavisProblemCategories `json:"categories"`
	CustomFilter    *string                `json:"customFilter,omitempty"`
}

// NewDavisProblemConfig instantiates a new DavisProblemConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavisProblemConfig(categories DavisProblemCategories) *DavisProblemConfig {
	this := DavisProblemConfig{}
	var onProblemClose bool = false
	this.OnProblemClose = &onProblemClose
	this.Categories = categories
	return &this
}

// NewDavisProblemConfigWithDefaults instantiates a new DavisProblemConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavisProblemConfigWithDefaults() *DavisProblemConfig {
	this := DavisProblemConfig{}
	var onProblemClose bool = false
	this.OnProblemClose = &onProblemClose
	return &this
}

// GetEntityTagsMatch returns the EntityTagsMatch field value if set, zero value otherwise.
func (o *DavisProblemConfig) GetEntityTagsMatch() EntityTagsMatch {
	if o == nil || IsNil(o.EntityTagsMatch) {
		var ret EntityTagsMatch
		return ret
	}
	return *o.EntityTagsMatch
}

// GetEntityTagsMatchOk returns a tuple with the EntityTagsMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemConfig) GetEntityTagsMatchOk() (*EntityTagsMatch, bool) {
	if o == nil || IsNil(o.EntityTagsMatch) {
		return nil, false
	}
	return o.EntityTagsMatch, true
}

// HasEntityTagsMatch returns a boolean if a field has been set.
func (o *DavisProblemConfig) HasEntityTagsMatch() bool {
	if o != nil && !IsNil(o.EntityTagsMatch) {
		return true
	}

	return false
}

// SetEntityTagsMatch gets a reference to the given EntityTagsMatch and assigns it to the EntityTagsMatch field.
func (o *DavisProblemConfig) SetEntityTagsMatch(v EntityTagsMatch) {
	o.EntityTagsMatch = &v
}

// GetEntityTags returns the EntityTags field value if set, zero value otherwise.
func (o *DavisProblemConfig) GetEntityTags() map[string]string {
	if o == nil || IsNil(o.EntityTags) {
		var ret map[string]string
		return ret
	}
	return *o.EntityTags
}

// GetEntityTagsOk returns a tuple with the EntityTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemConfig) GetEntityTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EntityTags) {
		return nil, false
	}
	return o.EntityTags, true
}

// HasEntityTags returns a boolean if a field has been set.
func (o *DavisProblemConfig) HasEntityTags() bool {
	if o != nil && !IsNil(o.EntityTags) {
		return true
	}

	return false
}

// SetEntityTags gets a reference to the given map[string]string and assigns it to the EntityTags field.
func (o *DavisProblemConfig) SetEntityTags(v map[string]string) {
	o.EntityTags = &v
}

// GetOnProblemClose returns the OnProblemClose field value if set, zero value otherwise.
func (o *DavisProblemConfig) GetOnProblemClose() bool {
	if o == nil || IsNil(o.OnProblemClose) {
		var ret bool
		return ret
	}
	return *o.OnProblemClose
}

// GetOnProblemCloseOk returns a tuple with the OnProblemClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemConfig) GetOnProblemCloseOk() (*bool, bool) {
	if o == nil || IsNil(o.OnProblemClose) {
		return nil, false
	}
	return o.OnProblemClose, true
}

// HasOnProblemClose returns a boolean if a field has been set.
func (o *DavisProblemConfig) HasOnProblemClose() bool {
	if o != nil && !IsNil(o.OnProblemClose) {
		return true
	}

	return false
}

// SetOnProblemClose gets a reference to the given bool and assigns it to the OnProblemClose field.
func (o *DavisProblemConfig) SetOnProblemClose(v bool) {
	o.OnProblemClose = &v
}

// GetCategories returns the Categories field value
func (o *DavisProblemConfig) GetCategories() DavisProblemCategories {
	if o == nil {
		var ret DavisProblemCategories
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *DavisProblemConfig) GetCategoriesOk() (*DavisProblemCategories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Categories, true
}

// SetCategories sets field value
func (o *DavisProblemConfig) SetCategories(v DavisProblemCategories) {
	o.Categories = v
}

// GetCustomFilter returns the CustomFilter field value if set, zero value otherwise.
func (o *DavisProblemConfig) GetCustomFilter() string {
	if o == nil || IsNil(o.CustomFilter) {
		var ret string
		return ret
	}
	return *o.CustomFilter
}

// GetCustomFilterOk returns a tuple with the CustomFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemConfig) GetCustomFilterOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFilter) {
		return nil, false
	}
	return o.CustomFilter, true
}

// HasCustomFilter returns a boolean if a field has been set.
func (o *DavisProblemConfig) HasCustomFilter() bool {
	if o != nil && !IsNil(o.CustomFilter) {
		return true
	}

	return false
}

// SetCustomFilter gets a reference to the given string and assigns it to the CustomFilter field.
func (o *DavisProblemConfig) SetCustomFilter(v string) {
	o.CustomFilter = &v
}

func (o DavisProblemConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavisProblemConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityTagsMatch) {
		toSerialize["entityTagsMatch"] = o.EntityTagsMatch
	}
	if !IsNil(o.EntityTags) {
		toSerialize["entityTags"] = o.EntityTags
	}
	if !IsNil(o.OnProblemClose) {
		toSerialize["onProblemClose"] = o.OnProblemClose
	}
	toSerialize["categories"] = o.Categories
	if !IsNil(o.CustomFilter) {
		toSerialize["customFilter"] = o.CustomFilter
	}
	return toSerialize, nil
}

type NullableDavisProblemConfig struct {
	value *DavisProblemConfig
	isSet bool
}

func (v NullableDavisProblemConfig) Get() *DavisProblemConfig {
	return v.value
}

func (v *NullableDavisProblemConfig) Set(val *DavisProblemConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisProblemConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisProblemConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisProblemConfig(val *DavisProblemConfig) *NullableDavisProblemConfig {
	return &NullableDavisProblemConfig{value: val, isSet: true}
}

func (v NullableDavisProblemConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisProblemConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
