/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
	"fmt"
)

// ScheduleTrigger - struct for ScheduleTrigger
type ScheduleTrigger struct {
	CronTrigger     *CronTrigger
	IntervalTrigger *IntervalTrigger
	TimeTrigger     *TimeTrigger
}

// CronTriggerAsScheduleTrigger is a convenience function that returns CronTrigger wrapped in ScheduleTrigger
func CronTriggerAsScheduleTrigger(v *CronTrigger) ScheduleTrigger {
	return ScheduleTrigger{
		CronTrigger: v,
	}
}

// IntervalTriggerAsScheduleTrigger is a convenience function that returns IntervalTrigger wrapped in ScheduleTrigger
func IntervalTriggerAsScheduleTrigger(v *IntervalTrigger) ScheduleTrigger {
	return ScheduleTrigger{
		IntervalTrigger: v,
	}
}

// TimeTriggerAsScheduleTrigger is a convenience function that returns TimeTrigger wrapped in ScheduleTrigger
func TimeTriggerAsScheduleTrigger(v *TimeTrigger) ScheduleTrigger {
	return ScheduleTrigger{
		TimeTrigger: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScheduleTrigger) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CronTrigger
	err = newStrictDecoder(data).Decode(&dst.CronTrigger)
	if err == nil {
		jsonCronTrigger, _ := json.Marshal(dst.CronTrigger)
		if string(jsonCronTrigger) == "{}" { // empty struct
			dst.CronTrigger = nil
		} else {
			match++
		}
	} else {
		dst.CronTrigger = nil
	}

	// try to unmarshal data into IntervalTrigger
	err = newStrictDecoder(data).Decode(&dst.IntervalTrigger)
	if err == nil {
		jsonIntervalTrigger, _ := json.Marshal(dst.IntervalTrigger)
		if string(jsonIntervalTrigger) == "{}" { // empty struct
			dst.IntervalTrigger = nil
		} else {
			match++
		}
	} else {
		dst.IntervalTrigger = nil
	}

	// try to unmarshal data into TimeTrigger
	err = newStrictDecoder(data).Decode(&dst.TimeTrigger)
	if err == nil {
		jsonTimeTrigger, _ := json.Marshal(dst.TimeTrigger)
		if string(jsonTimeTrigger) == "{}" { // empty struct
			dst.TimeTrigger = nil
		} else {
			match++
		}
	} else {
		dst.TimeTrigger = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CronTrigger = nil
		dst.IntervalTrigger = nil
		dst.TimeTrigger = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScheduleTrigger)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScheduleTrigger)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScheduleTrigger) MarshalJSON() ([]byte, error) {
	if src.CronTrigger != nil {
		return json.Marshal(&src.CronTrigger)
	}

	if src.IntervalTrigger != nil {
		return json.Marshal(&src.IntervalTrigger)
	}

	if src.TimeTrigger != nil {
		return json.Marshal(&src.TimeTrigger)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScheduleTrigger) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CronTrigger != nil {
		return obj.CronTrigger
	}

	if obj.IntervalTrigger != nil {
		return obj.IntervalTrigger
	}

	if obj.TimeTrigger != nil {
		return obj.TimeTrigger
	}

	// all schemas are nil
	return nil
}

type NullableScheduleTrigger struct {
	value *ScheduleTrigger
	isSet bool
}

func (v NullableScheduleTrigger) Get() *ScheduleTrigger {
	return v.value
}

func (v *NullableScheduleTrigger) Set(val *ScheduleTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleTrigger(val *ScheduleTrigger) *NullableScheduleTrigger {
	return &NullableScheduleTrigger{value: val, isSet: true}
}

func (v NullableScheduleTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
