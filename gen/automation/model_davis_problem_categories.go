/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the DavisProblemCategories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavisProblemCategories{}

// DavisProblemCategories struct for DavisProblemCategories
type DavisProblemCategories struct {
	MonitoringUnavailable *bool `json:"monitoringUnavailable,omitempty"`
	Availability          *bool `json:"availability,omitempty"`
	Error                 *bool `json:"error,omitempty"`
	Slowdown              *bool `json:"slowdown,omitempty"`
	Resource              *bool `json:"resource,omitempty"`
	Custom                *bool `json:"custom,omitempty"`
	Info                  *bool `json:"info,omitempty"`
}

// NewDavisProblemCategories instantiates a new DavisProblemCategories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavisProblemCategories() *DavisProblemCategories {
	this := DavisProblemCategories{}
	return &this
}

// NewDavisProblemCategoriesWithDefaults instantiates a new DavisProblemCategories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavisProblemCategoriesWithDefaults() *DavisProblemCategories {
	this := DavisProblemCategories{}
	return &this
}

// GetMonitoringUnavailable returns the MonitoringUnavailable field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetMonitoringUnavailable() bool {
	if o == nil || IsNil(o.MonitoringUnavailable) {
		var ret bool
		return ret
	}
	return *o.MonitoringUnavailable
}

// GetMonitoringUnavailableOk returns a tuple with the MonitoringUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetMonitoringUnavailableOk() (*bool, bool) {
	if o == nil || IsNil(o.MonitoringUnavailable) {
		return nil, false
	}
	return o.MonitoringUnavailable, true
}

// HasMonitoringUnavailable returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasMonitoringUnavailable() bool {
	if o != nil && !IsNil(o.MonitoringUnavailable) {
		return true
	}

	return false
}

// SetMonitoringUnavailable gets a reference to the given bool and assigns it to the MonitoringUnavailable field.
func (o *DavisProblemCategories) SetMonitoringUnavailable(v bool) {
	o.MonitoringUnavailable = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetAvailability() bool {
	if o == nil || IsNil(o.Availability) {
		var ret bool
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetAvailabilityOk() (*bool, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given bool and assigns it to the Availability field.
func (o *DavisProblemCategories) SetAvailability(v bool) {
	o.Availability = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetError() bool {
	if o == nil || IsNil(o.Error) {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *DavisProblemCategories) SetError(v bool) {
	o.Error = &v
}

// GetSlowdown returns the Slowdown field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetSlowdown() bool {
	if o == nil || IsNil(o.Slowdown) {
		var ret bool
		return ret
	}
	return *o.Slowdown
}

// GetSlowdownOk returns a tuple with the Slowdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetSlowdownOk() (*bool, bool) {
	if o == nil || IsNil(o.Slowdown) {
		return nil, false
	}
	return o.Slowdown, true
}

// HasSlowdown returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasSlowdown() bool {
	if o != nil && !IsNil(o.Slowdown) {
		return true
	}

	return false
}

// SetSlowdown gets a reference to the given bool and assigns it to the Slowdown field.
func (o *DavisProblemCategories) SetSlowdown(v bool) {
	o.Slowdown = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetResource() bool {
	if o == nil || IsNil(o.Resource) {
		var ret bool
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetResourceOk() (*bool, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given bool and assigns it to the Resource field.
func (o *DavisProblemCategories) SetResource(v bool) {
	o.Resource = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetCustom() bool {
	if o == nil || IsNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *DavisProblemCategories) SetCustom(v bool) {
	o.Custom = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *DavisProblemCategories) GetInfo() bool {
	if o == nil || IsNil(o.Info) {
		var ret bool
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisProblemCategories) GetInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *DavisProblemCategories) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given bool and assigns it to the Info field.
func (o *DavisProblemCategories) SetInfo(v bool) {
	o.Info = &v
}

func (o DavisProblemCategories) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavisProblemCategories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MonitoringUnavailable) {
		toSerialize["monitoringUnavailable"] = o.MonitoringUnavailable
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Slowdown) {
		toSerialize["slowdown"] = o.Slowdown
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	return toSerialize, nil
}

type NullableDavisProblemCategories struct {
	value *DavisProblemCategories
	isSet bool
}

func (v NullableDavisProblemCategories) Get() *DavisProblemCategories {
	return v.value
}

func (v *NullableDavisProblemCategories) Set(val *DavisProblemCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisProblemCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisProblemCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisProblemCategories(val *DavisProblemCategories) *NullableDavisProblemCategories {
	return &NullableDavisProblemCategories{value: val, isSet: true}
}

func (v NullableDavisProblemCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisProblemCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
