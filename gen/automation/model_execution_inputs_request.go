/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the ExecutionInputsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionInputsRequest{}

// ExecutionInputsRequest struct for ExecutionInputsRequest
type ExecutionInputsRequest struct {
	Input           map[string]interface{} `json:"input,omitempty"`
	Params          map[string]interface{} `json:"params,omitempty"`
	UniqueQualifier *string                `json:"uniqueQualifier,omitempty"`
}

// NewExecutionInputsRequest instantiates a new ExecutionInputsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionInputsRequest() *ExecutionInputsRequest {
	this := ExecutionInputsRequest{}
	return &this
}

// NewExecutionInputsRequestWithDefaults instantiates a new ExecutionInputsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionInputsRequestWithDefaults() *ExecutionInputsRequest {
	this := ExecutionInputsRequest{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ExecutionInputsRequest) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionInputsRequest) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ExecutionInputsRequest) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *ExecutionInputsRequest) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ExecutionInputsRequest) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionInputsRequest) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ExecutionInputsRequest) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *ExecutionInputsRequest) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetUniqueQualifier returns the UniqueQualifier field value if set, zero value otherwise.
func (o *ExecutionInputsRequest) GetUniqueQualifier() string {
	if o == nil || IsNil(o.UniqueQualifier) {
		var ret string
		return ret
	}
	return *o.UniqueQualifier
}

// GetUniqueQualifierOk returns a tuple with the UniqueQualifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionInputsRequest) GetUniqueQualifierOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueQualifier) {
		return nil, false
	}
	return o.UniqueQualifier, true
}

// HasUniqueQualifier returns a boolean if a field has been set.
func (o *ExecutionInputsRequest) HasUniqueQualifier() bool {
	if o != nil && !IsNil(o.UniqueQualifier) {
		return true
	}

	return false
}

// SetUniqueQualifier gets a reference to the given string and assigns it to the UniqueQualifier field.
func (o *ExecutionInputsRequest) SetUniqueQualifier(v string) {
	o.UniqueQualifier = &v
}

func (o ExecutionInputsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionInputsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.UniqueQualifier) {
		toSerialize["uniqueQualifier"] = o.UniqueQualifier
	}
	return toSerialize, nil
}

type NullableExecutionInputsRequest struct {
	value *ExecutionInputsRequest
	isSet bool
}

func (v NullableExecutionInputsRequest) Get() *ExecutionInputsRequest {
	return v.value
}

func (v *NullableExecutionInputsRequest) Set(val *ExecutionInputsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionInputsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionInputsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionInputsRequest(val *ExecutionInputsRequest) *NullableExecutionInputsRequest {
	return &NullableExecutionInputsRequest{value: val, isSet: true}
}

func (v NullableExecutionInputsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionInputsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
