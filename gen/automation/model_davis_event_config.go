/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the DavisEventConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavisEventConfig{}

// DavisEventConfig struct for DavisEventConfig
type DavisEventConfig struct {
	EntityTagsMatch *EntityTagsMatch   `json:"entityTagsMatch,omitempty"`
	EntityTags      *map[string]string `json:"entityTags,omitempty"`
	OnProblemClose  *bool              `json:"onProblemClose,omitempty"`
	Names           []DavisEventName   `json:"names,omitempty"`
	// Deprecated
	Types        []string `json:"types,omitempty"`
	CustomFilter *string  `json:"customFilter,omitempty"`
}

// NewDavisEventConfig instantiates a new DavisEventConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavisEventConfig() *DavisEventConfig {
	this := DavisEventConfig{}
	var onProblemClose bool = false
	this.OnProblemClose = &onProblemClose
	return &this
}

// NewDavisEventConfigWithDefaults instantiates a new DavisEventConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavisEventConfigWithDefaults() *DavisEventConfig {
	this := DavisEventConfig{}
	var onProblemClose bool = false
	this.OnProblemClose = &onProblemClose
	return &this
}

// GetEntityTagsMatch returns the EntityTagsMatch field value if set, zero value otherwise.
func (o *DavisEventConfig) GetEntityTagsMatch() EntityTagsMatch {
	if o == nil || IsNil(o.EntityTagsMatch) {
		var ret EntityTagsMatch
		return ret
	}
	return *o.EntityTagsMatch
}

// GetEntityTagsMatchOk returns a tuple with the EntityTagsMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisEventConfig) GetEntityTagsMatchOk() (*EntityTagsMatch, bool) {
	if o == nil || IsNil(o.EntityTagsMatch) {
		return nil, false
	}
	return o.EntityTagsMatch, true
}

// HasEntityTagsMatch returns a boolean if a field has been set.
func (o *DavisEventConfig) HasEntityTagsMatch() bool {
	if o != nil && !IsNil(o.EntityTagsMatch) {
		return true
	}

	return false
}

// SetEntityTagsMatch gets a reference to the given EntityTagsMatch and assigns it to the EntityTagsMatch field.
func (o *DavisEventConfig) SetEntityTagsMatch(v EntityTagsMatch) {
	o.EntityTagsMatch = &v
}

// GetEntityTags returns the EntityTags field value if set, zero value otherwise.
func (o *DavisEventConfig) GetEntityTags() map[string]string {
	if o == nil || IsNil(o.EntityTags) {
		var ret map[string]string
		return ret
	}
	return *o.EntityTags
}

// GetEntityTagsOk returns a tuple with the EntityTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisEventConfig) GetEntityTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EntityTags) {
		return nil, false
	}
	return o.EntityTags, true
}

// HasEntityTags returns a boolean if a field has been set.
func (o *DavisEventConfig) HasEntityTags() bool {
	if o != nil && !IsNil(o.EntityTags) {
		return true
	}

	return false
}

// SetEntityTags gets a reference to the given map[string]string and assigns it to the EntityTags field.
func (o *DavisEventConfig) SetEntityTags(v map[string]string) {
	o.EntityTags = &v
}

// GetOnProblemClose returns the OnProblemClose field value if set, zero value otherwise.
func (o *DavisEventConfig) GetOnProblemClose() bool {
	if o == nil || IsNil(o.OnProblemClose) {
		var ret bool
		return ret
	}
	return *o.OnProblemClose
}

// GetOnProblemCloseOk returns a tuple with the OnProblemClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisEventConfig) GetOnProblemCloseOk() (*bool, bool) {
	if o == nil || IsNil(o.OnProblemClose) {
		return nil, false
	}
	return o.OnProblemClose, true
}

// HasOnProblemClose returns a boolean if a field has been set.
func (o *DavisEventConfig) HasOnProblemClose() bool {
	if o != nil && !IsNil(o.OnProblemClose) {
		return true
	}

	return false
}

// SetOnProblemClose gets a reference to the given bool and assigns it to the OnProblemClose field.
func (o *DavisEventConfig) SetOnProblemClose(v bool) {
	o.OnProblemClose = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *DavisEventConfig) GetNames() []DavisEventName {
	if o == nil || IsNil(o.Names) {
		var ret []DavisEventName
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisEventConfig) GetNamesOk() ([]DavisEventName, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *DavisEventConfig) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []DavisEventName and assigns it to the Names field.
func (o *DavisEventConfig) SetNames(v []DavisEventName) {
	o.Names = v
}

// GetTypes returns the Types field value if set, zero value otherwise.
// Deprecated
func (o *DavisEventConfig) GetTypes() []string {
	if o == nil || IsNil(o.Types) {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DavisEventConfig) GetTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *DavisEventConfig) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
// Deprecated
func (o *DavisEventConfig) SetTypes(v []string) {
	o.Types = v
}

// GetCustomFilter returns the CustomFilter field value if set, zero value otherwise.
func (o *DavisEventConfig) GetCustomFilter() string {
	if o == nil || IsNil(o.CustomFilter) {
		var ret string
		return ret
	}
	return *o.CustomFilter
}

// GetCustomFilterOk returns a tuple with the CustomFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisEventConfig) GetCustomFilterOk() (*string, bool) {
	if o == nil || IsNil(o.CustomFilter) {
		return nil, false
	}
	return o.CustomFilter, true
}

// HasCustomFilter returns a boolean if a field has been set.
func (o *DavisEventConfig) HasCustomFilter() bool {
	if o != nil && !IsNil(o.CustomFilter) {
		return true
	}

	return false
}

// SetCustomFilter gets a reference to the given string and assigns it to the CustomFilter field.
func (o *DavisEventConfig) SetCustomFilter(v string) {
	o.CustomFilter = &v
}

func (o DavisEventConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavisEventConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityTagsMatch) {
		toSerialize["entityTagsMatch"] = o.EntityTagsMatch
	}
	if !IsNil(o.EntityTags) {
		toSerialize["entityTags"] = o.EntityTags
	}
	if !IsNil(o.OnProblemClose) {
		toSerialize["onProblemClose"] = o.OnProblemClose
	}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	if !IsNil(o.CustomFilter) {
		toSerialize["customFilter"] = o.CustomFilter
	}
	return toSerialize, nil
}

type NullableDavisEventConfig struct {
	value *DavisEventConfig
	isSet bool
}

func (v NullableDavisEventConfig) Get() *DavisEventConfig {
	return v.value
}

func (v *NullableDavisEventConfig) Set(val *DavisEventConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisEventConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisEventConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisEventConfig(val *DavisEventConfig) *NullableDavisEventConfig {
	return &NullableDavisEventConfig{value: val, isSet: true}
}

func (v NullableDavisEventConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisEventConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
