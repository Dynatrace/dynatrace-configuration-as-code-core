/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the TaskConditionOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskConditionOption{}

// TaskConditionOption struct for TaskConditionOption
type TaskConditionOption struct {
	States *map[string]string `json:"states,omitempty"`
	Custom *string            `json:"custom,omitempty"`
	Else   *string            `json:"else,omitempty"`
}

// NewTaskConditionOption instantiates a new TaskConditionOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskConditionOption() *TaskConditionOption {
	this := TaskConditionOption{}
	return &this
}

// NewTaskConditionOptionWithDefaults instantiates a new TaskConditionOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskConditionOptionWithDefaults() *TaskConditionOption {
	this := TaskConditionOption{}
	return &this
}

// GetStates returns the States field value if set, zero value otherwise.
func (o *TaskConditionOption) GetStates() map[string]string {
	if o == nil || IsNil(o.States) {
		var ret map[string]string
		return ret
	}
	return *o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConditionOption) GetStatesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.States) {
		return nil, false
	}
	return o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *TaskConditionOption) HasStates() bool {
	if o != nil && !IsNil(o.States) {
		return true
	}

	return false
}

// SetStates gets a reference to the given map[string]string and assigns it to the States field.
func (o *TaskConditionOption) SetStates(v map[string]string) {
	o.States = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *TaskConditionOption) GetCustom() string {
	if o == nil || IsNil(o.Custom) {
		var ret string
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConditionOption) GetCustomOk() (*string, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *TaskConditionOption) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given string and assigns it to the Custom field.
func (o *TaskConditionOption) SetCustom(v string) {
	o.Custom = &v
}

// GetElse returns the Else field value if set, zero value otherwise.
func (o *TaskConditionOption) GetElse() string {
	if o == nil || IsNil(o.Else) {
		var ret string
		return ret
	}
	return *o.Else
}

// GetElseOk returns a tuple with the Else field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConditionOption) GetElseOk() (*string, bool) {
	if o == nil || IsNil(o.Else) {
		return nil, false
	}
	return o.Else, true
}

// HasElse returns a boolean if a field has been set.
func (o *TaskConditionOption) HasElse() bool {
	if o != nil && !IsNil(o.Else) {
		return true
	}

	return false
}

// SetElse gets a reference to the given string and assigns it to the Else field.
func (o *TaskConditionOption) SetElse(v string) {
	o.Else = &v
}

func (o TaskConditionOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskConditionOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.States) {
		toSerialize["states"] = o.States
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Else) {
		toSerialize["else"] = o.Else
	}
	return toSerialize, nil
}

type NullableTaskConditionOption struct {
	value *TaskConditionOption
	isSet bool
}

func (v NullableTaskConditionOption) Get() *TaskConditionOption {
	return v.value
}

func (v *NullableTaskConditionOption) Set(val *TaskConditionOption) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskConditionOption) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskConditionOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskConditionOption(val *TaskConditionOption) *NullableTaskConditionOption {
	return &NullableTaskConditionOption{value: val, isSet: true}
}

func (v NullableTaskConditionOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskConditionOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
