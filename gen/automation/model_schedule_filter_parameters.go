/*
Automation

Automation API allows working with workflows and various trigger options.

API version: 1.464.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package automation

import (
	"encoding/json"
)

// checks if the ScheduleFilterParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleFilterParameters{}

// ScheduleFilterParameters struct for ScheduleFilterParameters
type ScheduleFilterParameters struct {
	Count             *int32   `json:"count,omitempty"`
	EarliestStart     *string  `json:"earliestStart,omitempty"`
	EarliestStartTime *string  `json:"earliestStartTime,omitempty"`
	Until             *string  `json:"until,omitempty"`
	IncludeDates      []string `json:"includeDates,omitempty"`
	ExcludeDates      []string `json:"excludeDates,omitempty"`
}

// NewScheduleFilterParameters instantiates a new ScheduleFilterParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleFilterParameters() *ScheduleFilterParameters {
	this := ScheduleFilterParameters{}
	var count int32 = 10
	this.Count = &count
	var earliestStartTime string = "00:00:00"
	this.EarliestStartTime = &earliestStartTime
	return &this
}

// NewScheduleFilterParametersWithDefaults instantiates a new ScheduleFilterParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleFilterParametersWithDefaults() *ScheduleFilterParameters {
	this := ScheduleFilterParameters{}
	var count int32 = 10
	this.Count = &count
	var earliestStartTime string = "00:00:00"
	this.EarliestStartTime = &earliestStartTime
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ScheduleFilterParameters) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleFilterParameters) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ScheduleFilterParameters) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ScheduleFilterParameters) SetCount(v int32) {
	o.Count = &v
}

// GetEarliestStart returns the EarliestStart field value if set, zero value otherwise.
func (o *ScheduleFilterParameters) GetEarliestStart() string {
	if o == nil || IsNil(o.EarliestStart) {
		var ret string
		return ret
	}
	return *o.EarliestStart
}

// GetEarliestStartOk returns a tuple with the EarliestStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleFilterParameters) GetEarliestStartOk() (*string, bool) {
	if o == nil || IsNil(o.EarliestStart) {
		return nil, false
	}
	return o.EarliestStart, true
}

// HasEarliestStart returns a boolean if a field has been set.
func (o *ScheduleFilterParameters) HasEarliestStart() bool {
	if o != nil && !IsNil(o.EarliestStart) {
		return true
	}

	return false
}

// SetEarliestStart gets a reference to the given string and assigns it to the EarliestStart field.
func (o *ScheduleFilterParameters) SetEarliestStart(v string) {
	o.EarliestStart = &v
}

// GetEarliestStartTime returns the EarliestStartTime field value if set, zero value otherwise.
func (o *ScheduleFilterParameters) GetEarliestStartTime() string {
	if o == nil || IsNil(o.EarliestStartTime) {
		var ret string
		return ret
	}
	return *o.EarliestStartTime
}

// GetEarliestStartTimeOk returns a tuple with the EarliestStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleFilterParameters) GetEarliestStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EarliestStartTime) {
		return nil, false
	}
	return o.EarliestStartTime, true
}

// HasEarliestStartTime returns a boolean if a field has been set.
func (o *ScheduleFilterParameters) HasEarliestStartTime() bool {
	if o != nil && !IsNil(o.EarliestStartTime) {
		return true
	}

	return false
}

// SetEarliestStartTime gets a reference to the given string and assigns it to the EarliestStartTime field.
func (o *ScheduleFilterParameters) SetEarliestStartTime(v string) {
	o.EarliestStartTime = &v
}

// GetUntil returns the Until field value if set, zero value otherwise.
func (o *ScheduleFilterParameters) GetUntil() string {
	if o == nil || IsNil(o.Until) {
		var ret string
		return ret
	}
	return *o.Until
}

// GetUntilOk returns a tuple with the Until field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleFilterParameters) GetUntilOk() (*string, bool) {
	if o == nil || IsNil(o.Until) {
		return nil, false
	}
	return o.Until, true
}

// HasUntil returns a boolean if a field has been set.
func (o *ScheduleFilterParameters) HasUntil() bool {
	if o != nil && !IsNil(o.Until) {
		return true
	}

	return false
}

// SetUntil gets a reference to the given string and assigns it to the Until field.
func (o *ScheduleFilterParameters) SetUntil(v string) {
	o.Until = &v
}

// GetIncludeDates returns the IncludeDates field value if set, zero value otherwise.
func (o *ScheduleFilterParameters) GetIncludeDates() []string {
	if o == nil || IsNil(o.IncludeDates) {
		var ret []string
		return ret
	}
	return o.IncludeDates
}

// GetIncludeDatesOk returns a tuple with the IncludeDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleFilterParameters) GetIncludeDatesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeDates) {
		return nil, false
	}
	return o.IncludeDates, true
}

// HasIncludeDates returns a boolean if a field has been set.
func (o *ScheduleFilterParameters) HasIncludeDates() bool {
	if o != nil && !IsNil(o.IncludeDates) {
		return true
	}

	return false
}

// SetIncludeDates gets a reference to the given []string and assigns it to the IncludeDates field.
func (o *ScheduleFilterParameters) SetIncludeDates(v []string) {
	o.IncludeDates = v
}

// GetExcludeDates returns the ExcludeDates field value if set, zero value otherwise.
func (o *ScheduleFilterParameters) GetExcludeDates() []string {
	if o == nil || IsNil(o.ExcludeDates) {
		var ret []string
		return ret
	}
	return o.ExcludeDates
}

// GetExcludeDatesOk returns a tuple with the ExcludeDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleFilterParameters) GetExcludeDatesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeDates) {
		return nil, false
	}
	return o.ExcludeDates, true
}

// HasExcludeDates returns a boolean if a field has been set.
func (o *ScheduleFilterParameters) HasExcludeDates() bool {
	if o != nil && !IsNil(o.ExcludeDates) {
		return true
	}

	return false
}

// SetExcludeDates gets a reference to the given []string and assigns it to the ExcludeDates field.
func (o *ScheduleFilterParameters) SetExcludeDates(v []string) {
	o.ExcludeDates = v
}

func (o ScheduleFilterParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleFilterParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.EarliestStart) {
		toSerialize["earliestStart"] = o.EarliestStart
	}
	if !IsNil(o.EarliestStartTime) {
		toSerialize["earliestStartTime"] = o.EarliestStartTime
	}
	if !IsNil(o.Until) {
		toSerialize["until"] = o.Until
	}
	if !IsNil(o.IncludeDates) {
		toSerialize["includeDates"] = o.IncludeDates
	}
	if !IsNil(o.ExcludeDates) {
		toSerialize["excludeDates"] = o.ExcludeDates
	}
	return toSerialize, nil
}

type NullableScheduleFilterParameters struct {
	value *ScheduleFilterParameters
	isSet bool
}

func (v NullableScheduleFilterParameters) Get() *ScheduleFilterParameters {
	return v.value
}

func (v *NullableScheduleFilterParameters) Set(val *ScheduleFilterParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleFilterParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleFilterParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleFilterParameters(val *ScheduleFilterParameters) *NullableScheduleFilterParameters {
	return &NullableScheduleFilterParameters{value: val, isSet: true}
}

func (v NullableScheduleFilterParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleFilterParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
