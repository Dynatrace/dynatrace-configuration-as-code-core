// Package account provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package account

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for AccountGroupDtoOwner.
const (
	AccountGroupDtoOwnerDCS   AccountGroupDtoOwner = "DCS"
	AccountGroupDtoOwnerLOCAL AccountGroupDtoOwner = "LOCAL"
	AccountGroupDtoOwnerSAML  AccountGroupDtoOwner = "SAML"
	AccountGroupDtoOwnerSCIM  AccountGroupDtoOwner = "SCIM"
)

// Defines values for GetGroupDtoOwner.
const (
	GetGroupDtoOwnerDCS   GetGroupDtoOwner = "DCS"
	GetGroupDtoOwnerLOCAL GetGroupDtoOwner = "LOCAL"
	GetGroupDtoOwnerSAML  GetGroupDtoOwner = "SAML"
	GetGroupDtoOwnerSCIM  GetGroupDtoOwner = "SCIM"
)

// Defines values for GroupUserDtoUserStatus.
const (
	GroupUserDtoUserStatusACTIVE                  GroupUserDtoUserStatus = "ACTIVE"
	GroupUserDtoUserStatusDELETED                 GroupUserDtoUserStatus = "DELETED"
	GroupUserDtoUserStatusECUSTOMSMANUALLYBLOCKED GroupUserDtoUserStatus = "ECUSTOMS_MANUALLY_BLOCKED"
	GroupUserDtoUserStatusINACTIVE                GroupUserDtoUserStatus = "INACTIVE"
	GroupUserDtoUserStatusPENDING                 GroupUserDtoUserStatus = "PENDING"
)

// Defines values for PermissionsDtoPermissionName.
const (
	PermissionsDtoPermissionNameAccountCompanyInfo                 PermissionsDtoPermissionName = "account-company-info"
	PermissionsDtoPermissionNameAccountSamlFlexibleFederation      PermissionsDtoPermissionName = "account-saml-flexible-federation"
	PermissionsDtoPermissionNameAccountUserManagement              PermissionsDtoPermissionName = "account-user-management"
	PermissionsDtoPermissionNameAccountViewer                      PermissionsDtoPermissionName = "account-viewer"
	PermissionsDtoPermissionNameTenantAgentInstall                 PermissionsDtoPermissionName = "tenant-agent-install"
	PermissionsDtoPermissionNameTenantConfigureRequestCaptureData  PermissionsDtoPermissionName = "tenant-configure-request-capture-data"
	PermissionsDtoPermissionNameTenantLogviewer                    PermissionsDtoPermissionName = "tenant-logviewer"
	PermissionsDtoPermissionNameTenantManageSecurityProblems       PermissionsDtoPermissionName = "tenant-manage-security-problems"
	PermissionsDtoPermissionNameTenantManageSettings               PermissionsDtoPermissionName = "tenant-manage-settings"
	PermissionsDtoPermissionNameTenantManageSupportTickets         PermissionsDtoPermissionName = "tenant-manage-support-tickets"
	PermissionsDtoPermissionNameTenantReplaySessionsWithMasking    PermissionsDtoPermissionName = "tenant-replay-sessions-with-masking"
	PermissionsDtoPermissionNameTenantReplaySessionsWithoutMasking PermissionsDtoPermissionName = "tenant-replay-sessions-without-masking"
	PermissionsDtoPermissionNameTenantViewSecurityProblems         PermissionsDtoPermissionName = "tenant-view-security-problems"
	PermissionsDtoPermissionNameTenantViewSensitiveRequestData     PermissionsDtoPermissionName = "tenant-view-sensitive-request-data"
	PermissionsDtoPermissionNameTenantViewer                       PermissionsDtoPermissionName = "tenant-viewer"
)

// Defines values for PermissionsDtoScopeType.
const (
	PermissionsDtoScopeTypeAccount        PermissionsDtoScopeType = "account"
	PermissionsDtoScopeTypeManagementZone PermissionsDtoScopeType = "management-zone"
	PermissionsDtoScopeTypeTenant         PermissionsDtoScopeType = "tenant"
)

// Defines values for PermissionsGroupDtoOwner.
const (
	DCS   PermissionsGroupDtoOwner = "DCS"
	LOCAL PermissionsGroupDtoOwner = "LOCAL"
	SAML  PermissionsGroupDtoOwner = "SAML"
	SCIM  PermissionsGroupDtoOwner = "SCIM"
)

// Defines values for UserDtoUserStatus.
const (
	UserDtoUserStatusACTIVE                  UserDtoUserStatus = "ACTIVE"
	UserDtoUserStatusDELETED                 UserDtoUserStatus = "DELETED"
	UserDtoUserStatusECUSTOMSMANUALLYBLOCKED UserDtoUserStatus = "ECUSTOMS_MANUALLY_BLOCKED"
	UserDtoUserStatusINACTIVE                UserDtoUserStatus = "INACTIVE"
	UserDtoUserStatusPENDING                 UserDtoUserStatus = "PENDING"
)

// Defines values for UsersDtoUserStatus.
const (
	ACTIVE                  UsersDtoUserStatus = "ACTIVE"
	DELETED                 UsersDtoUserStatus = "DELETED"
	ECUSTOMSMANUALLYBLOCKED UsersDtoUserStatus = "ECUSTOMS_MANUALLY_BLOCKED"
	INACTIVE                UsersDtoUserStatus = "INACTIVE"
	PENDING                 UsersDtoUserStatus = "PENDING"
)

// Defines values for PermissionsControllerRemoveGroupPermissionsParamsPermissionName.
const (
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameAccountCompanyInfo                 PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "account-company-info"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameAccountSamlFlexibleFederation      PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "account-saml-flexible-federation"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameAccountUserManagement              PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "account-user-management"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameAccountViewer                      PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "account-viewer"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantAgentInstall                 PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-agent-install"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantConfigureRequestCaptureData  PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-configure-request-capture-data"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantLogviewer                    PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-logviewer"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantManageSecurityProblems       PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-manage-security-problems"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantManageSettings               PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-manage-settings"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantManageSupportTickets         PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-manage-support-tickets"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantReplaySessionsWithMasking    PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-replay-sessions-with-masking"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantReplaySessionsWithoutMasking PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-replay-sessions-without-masking"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantViewSecurityProblems         PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-view-security-problems"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantViewSensitiveRequestData     PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-view-sensitive-request-data"
	PermissionsControllerRemoveGroupPermissionsParamsPermissionNameTenantViewer                       PermissionsControllerRemoveGroupPermissionsParamsPermissionName = "tenant-viewer"
)

// Defines values for PermissionsControllerRemoveGroupPermissionsParamsScopeType.
const (
	PermissionsControllerRemoveGroupPermissionsParamsScopeTypeAccount        PermissionsControllerRemoveGroupPermissionsParamsScopeType = "account"
	PermissionsControllerRemoveGroupPermissionsParamsScopeTypeManagementZone PermissionsControllerRemoveGroupPermissionsParamsScopeType = "management-zone"
	PermissionsControllerRemoveGroupPermissionsParamsScopeTypeTenant         PermissionsControllerRemoveGroupPermissionsParamsScopeType = "tenant"
)

// AccountGroupDto defines model for AccountGroupDto.
type AccountGroupDto struct {
	// AccountName The name of the Dynatrace account.
	AccountName string `json:"accountName"`

	// AccountUUID The UUID of the Dynatrace account.
	AccountUUID string `json:"accountUUID"`

	// CreatedAt The date and time of the group creation in `2021-05-01T15:11:00Z` format.
	CreatedAt string `json:"createdAt"`

	// Description A short description of the group.
	Description string `json:"description"`

	// GroupName The name of the user group.
	GroupName string `json:"groupName"`

	// Owner The identity provider from which the group originates.
	Owner AccountGroupDtoOwner `json:"owner"`

	// UpdatedAt The date and time of the most recent modification to the group in `2021-05-01T15:11:00Z` format.
	UpdatedAt string `json:"updatedAt"`

	// Uuid The UUID of the user group.
	Uuid string `json:"uuid"`
}

// AccountGroupDtoOwner The identity provider from which the group originates.
type AccountGroupDtoOwner string

// AppendLevelPolicyBindingForGroupDto defines model for AppendLevelPolicyBindingForGroupDto.
type AppendLevelPolicyBindingForGroupDto struct {
	// Metadata Metadata provided for bindings
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Parameters Parameters provided for bindings
	Parameters *map[string]string `json:"parameters,omitempty"`
}

// AppendLevelPolicyBindingsRequestDto defines model for AppendLevelPolicyBindingsRequestDto.
type AppendLevelPolicyBindingsRequestDto struct {
	// Groups A list of user groups (specified by IDs) to which the policy applies.
	Groups []string `json:"groups"`
}

// Binding defines model for Binding.
type Binding struct {
	// Groups A list of user groups to which the policy applies.
	Groups []string `json:"groups"`

	// PolicyUuid The ID of the policy.
	PolicyUuid string `json:"policyUuid"`
}

// Condition defines model for Condition.
type Condition struct {
	// Name The name of the condition.
	//
	//  It indicates which part of the **services** is checked by the condition.
	Name string `json:"name"`

	// Operator The operator of the condition.
	Operator string `json:"operator"`

	// Values A list of reference values of the condition.
	Values []string `json:"values"`
}

// CreateLevelPolicyBindingsRequestDto defines model for CreateLevelPolicyBindingsRequestDto.
type CreateLevelPolicyBindingsRequestDto struct {
	// PolicyBindings A list of policy bindings of the user group.
	PolicyBindings []Binding `json:"policyBindings"`
}

// CreateOrUpdateLevelPolicyRequestDto defines model for CreateOrUpdateLevelPolicyRequestDto.
type CreateOrUpdateLevelPolicyRequestDto struct {
	// Description A short description of the policy.
	Description string `json:"description"`

	// Name The display name of the policy.
	Name string `json:"name"`

	// StatementQuery The [statement](https://dt-url.net/ht03ucb) of the policy.
	StatementQuery string `json:"statementQuery"`

	// Tags A list of tags.
	Tags []string `json:"tags"`
}

// EffectiveBinding defines model for EffectiveBinding.
type EffectiveBinding struct {
	// GroupUuid The UUID of group
	GroupUuid string `json:"groupUuid"`

	// LevelId The ID of the level to which the binding applies.
	LevelId string `json:"levelId"`

	// LevelType The type of the level to which the binding applies.
	LevelType string `json:"levelType"`
}

// EffectivePermission defines model for EffectivePermission.
type EffectivePermission struct {
	// Effects A list of policies.
	Effects []EffectivePermissionEffects `json:"effects"`

	// Permission One of a effective permissions
	Permission string `json:"permission"`
}

// EffectivePermissionEffects defines model for EffectivePermissionEffects.
type EffectivePermissionEffects struct {
	// Conditions Policy condition
	Conditions []Condition `json:"conditions"`

	// Effect Effect of policy
	Effect string `json:"effect"`

	// EffectivePolicies A list of effective policies.
	EffectivePolicies []EffectivePolicyWithBinding `json:"effectivePolicies"`
}

// EffectivePermissions defines model for EffectivePermissions.
type EffectivePermissions struct {
	// EffectivePermissions List of effective permissions.
	EffectivePermissions []EffectivePermission `json:"effectivePermissions"`
}

// EffectivePolicy defines model for EffectivePolicy.
type EffectivePolicy struct {
	// LevelId The ID of the level to which the policy applies.
	LevelId string `json:"levelId"`

	// LevelType The type of the level to which the policy applies.
	LevelType string `json:"levelType"`

	// Name The display name of the policy.
	Name string `json:"name"`

	// StatementQuery The the statement query of the policy.
	StatementQuery string `json:"statementQuery"`

	// Uuid The ID of the policy.
	Uuid string `json:"uuid"`
}

// EffectivePolicyWithBinding defines model for EffectivePolicyWithBinding.
type EffectivePolicyWithBinding struct {
	// Binding Effective binding
	Binding EffectiveBinding `json:"binding"`

	// Policy Effective policy
	Policy EffectivePolicy `json:"policy"`
}

// ErrorDto defines model for ErrorDto.
type ErrorDto struct {
	// Code The code of the error.
	Code      float32           `json:"code"`
	ErrorsMap map[string]string `json:"errorsMap"`

	// Message A short description of the error.
	Message string `json:"message"`
}

// GetGroupDto defines model for GetGroupDto.
type GetGroupDto struct {
	// CreatedAt The date and time of the group creation in `2021-05-01T15:11:00Z` format.
	CreatedAt string `json:"createdAt"`

	// Description A short description of the user group.
	Description *string `json:"description,omitempty"`

	// FederatedAttributeValues A list of values associating this group with the corresponding claim from an identity provider.
	FederatedAttributeValues *[]string `json:"federatedAttributeValues,omitempty"`

	// Name The name of the user group.
	Name string `json:"name"`

	// Owner The identity provider from which the group originates.
	Owner GetGroupDtoOwner `json:"owner"`

	// UpdatedAt The date and time of the most recent group modification in `2021-05-01T15:11:00Z` format.
	UpdatedAt string `json:"updatedAt"`

	// Uuid The UUID of the user group.
	Uuid *string `json:"uuid,omitempty"`
}

// GetGroupDtoOwner The identity provider from which the group originates.
type GetGroupDtoOwner string

// GroupListDto defines model for GroupListDto.
type GroupListDto struct {
	// Count The number of entries in the list.
	Count float32       `json:"count"`
	Items []GetGroupDto `json:"items"`
}

// GroupUserDto defines model for GroupUserDto.
type GroupUserDto struct {
	// Email The email address of the user.
	Email string `json:"email"`

	// EmergencyContact The user is (`true`) or is not (`false`) an emergency contact for the account.
	EmergencyContact *bool `json:"emergencyContact,omitempty"`

	// Groups A list of groups of which the user is a member.
	Groups []AccountGroupDto `json:"groups"`

	// Name The first name of the user.
	Name *string `json:"name,omitempty"`

	// Surname The last name of the user.
	Surname *string `json:"surname,omitempty"`

	// Uid The UUID of the user.
	Uid string `json:"uid"`

	// UserStatus The status of this user in Dynatrace:
	//
	// * `ACTIVE`: The user is active.
	// * `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace.
	// * `PENDING`: The user received an invitation, but hasn't completed sign-up yet.
	// * `DELETED`: The user was deleted and cannot sign in to Dynatrace anymore.
	// * `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation.
	UserStatus *GroupUserDtoUserStatus `json:"userStatus,omitempty"`
}

// GroupUserDtoUserStatus The status of this user in Dynatrace:
//
// * `ACTIVE`: The user is active.
// * `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace.
// * `PENDING`: The user received an invitation, but hasn't completed sign-up yet.
// * `DELETED`: The user was deleted and cannot sign in to Dynatrace anymore.
// * `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation.
type GroupUserDtoUserStatus string

// GroupUserListDto defines model for GroupUserListDto.
type GroupUserListDto struct {
	// Count The number of entries in the list.
	Count float32   `json:"count"`
	Items []UserDto `json:"items"`
}

// LevelPolicyBindingDto defines model for LevelPolicyBindingDto.
type LevelPolicyBindingDto struct {
	// LevelId The ID of the policy level.
	LevelId string `json:"levelId"`

	// LevelType The type of the policy level.
	LevelType      string    `json:"levelType"`
	PolicyBindings []Binding `json:"policyBindings"`
}

// LevelPolicyDto defines model for LevelPolicyDto.
type LevelPolicyDto struct {
	// Description A short description of the policy.
	Description string `json:"description"`

	// Name The display name of the policy.
	Name string `json:"name"`

	// StatementQuery The [statement](https://dt-url.net/ht03ucb) of the policy.
	StatementQuery string `json:"statementQuery"`

	// Statements The expanded form of the policy statement.
	Statements []Statement `json:"statements"`

	// Tags A list of tags.
	Tags []string `json:"tags"`

	// Uuid The ID of the policy.
	Uuid string `json:"uuid"`
}

// PermissionsDto defines model for PermissionsDto.
type PermissionsDto struct {
	// CreatedAt The date and time of the permission creation in `2021-05-01T15:11:00Z` format.
	CreatedAt *string `json:"createdAt,omitempty"`

	// PermissionName The name of the permission.
	PermissionName PermissionsDtoPermissionName `json:"permissionName"`

	// Scope The scope of the permission. Depending on the scope type, it is defined by:
	//
	// * `account`: The UUID of the account.
	// * `tenant`: The ID of the environment.
	// * `management-zone`: The ID of the management zone from an environment in `{environment-id}:{management-zone-id}` format.
	Scope string `json:"scope"`

	// ScopeType The type of the permission scope.
	ScopeType PermissionsDtoScopeType `json:"scopeType"`

	// UpdatedAt The date and time of the most recent permission modification in `2021-05-01T15:11:00Z` format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// PermissionsDtoPermissionName The name of the permission.
type PermissionsDtoPermissionName string

// PermissionsDtoScopeType The type of the permission scope.
type PermissionsDtoScopeType string

// PermissionsGroupDto defines model for PermissionsGroupDto.
type PermissionsGroupDto struct {
	// CreatedAt The date and time of the group creation in `2021-05-01T15:11:00Z` format.
	CreatedAt string `json:"createdAt"`

	// Description A short description of the user group.
	Description *string `json:"description,omitempty"`

	// FederatedAttributeValues A list of values associating this group with the corresponding claim from an identity provider.
	FederatedAttributeValues *[]string `json:"federatedAttributeValues,omitempty"`

	// Name The name of the user group.
	Name string `json:"name"`

	// Owner The identity provider from which the group originates.
	Owner PermissionsGroupDtoOwner `json:"owner"`

	// Permissions A list of permissions assigned to the group.
	Permissions []PermissionsDto `json:"permissions"`

	// UpdatedAt The date and time of the most recent group modification in `2021-05-01T15:11:00Z` format.
	UpdatedAt string `json:"updatedAt"`

	// Uuid The UUID of the user group.
	Uuid *string `json:"uuid,omitempty"`
}

// PermissionsGroupDtoOwner The identity provider from which the group originates.
type PermissionsGroupDtoOwner string

// PolicyDto defines model for PolicyDto.
type PolicyDto struct {
	// Description A short description of the policy.
	Description string `json:"description"`

	// Name The display name of the policy.
	Name string `json:"name"`

	// Uuid The ID of the policy.
	Uuid string `json:"uuid"`
}

// PolicyDtoList defines model for PolicyDtoList.
type PolicyDtoList struct {
	// Policies A list of policies.
	Policies []PolicyDto `json:"policies"`
}

// PolicyOverview defines model for PolicyOverview.
type PolicyOverview struct {
	// Description A short description of the policy.
	Description string `json:"description"`

	// LevelId The ID of the level to which the policy applies.
	LevelId string `json:"levelId"`

	// LevelType The type of the level to which the policy applies.
	LevelType string `json:"levelType"`

	// Name The display name of the policy.
	Name string `json:"name"`

	// Uuid The ID of the policy.
	Uuid string `json:"uuid"`
}

// PolicyOverviewDtoList defines model for PolicyOverviewDtoList.
type PolicyOverviewDtoList struct {
	// PolicyOverviewList A list of policies.
	PolicyOverviewList []PolicyOverview `json:"policyOverviewList"`
}

// PolicyUuidsDto defines model for PolicyUuidsDto.
type PolicyUuidsDto struct {
	// PolicyUuids A list of policies bound to the user group.
	PolicyUuids []string `json:"policyUuids"`
}

// PolicyUuidsWithoutMetadataDto defines model for PolicyUuidsWithoutMetadataDto.
type PolicyUuidsWithoutMetadataDto struct {
	// PolicyUuids A list of policies bound to the user group.
	PolicyUuids []string `json:"policyUuids"`
}

// PutGroupDto defines model for PutGroupDto.
type PutGroupDto struct {
	// Description A short description of the user group.
	Description *string `json:"description,omitempty"`

	// FederatedAttributeValues A list of values associating this group with the corresponding claim from an identity provider. If present, sets `owner` to SAML, otherwise `owner` will be LOCAL
	FederatedAttributeValues *[]string `json:"federatedAttributeValues,omitempty"`

	// Name The name of the user group.
	Name string `json:"name"`

	// Owner The owner type of the group.
	Owner *map[string]interface{} `json:"owner,omitempty"`

	// Uuid The UUID of the user group.
	Uuid *string `json:"uuid,omitempty"`
}

// Statement defines model for Statement.
type Statement struct {
	// Conditions A list of conditions limiting the granted permissions.
	Conditions []Condition `json:"conditions"`

	// Effect The effect of the policy (for example, allow something).
	Effect string `json:"effect"`

	// Permissions A list of granted permissions.
	Permissions []string `json:"permissions"`

	// Service The service to which the policy applies.
	Service string `json:"service"`
}

// UserDto defines model for UserDto.
type UserDto struct {
	// Email The email address of the user.
	Email string `json:"email"`

	// EmergencyContact The user is (`true`) or is not (`false`) an emergency contact for the account.
	EmergencyContact *bool `json:"emergencyContact,omitempty"`

	// Name The first name of the user.
	Name *string `json:"name,omitempty"`

	// Surname The last name of the user.
	Surname *string `json:"surname,omitempty"`

	// Uid The UUID of the user.
	Uid string `json:"uid"`

	// UserStatus The status of this user in Dynatrace:
	//
	// * `ACTIVE`: The user is active.
	// * `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace.
	// * `PENDING`: The user received an invitation, but hasn't completed sign-up yet.
	// * `DELETED`: The user was deleted and cannot sign in to Dynatrace anymore.
	// * `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation.
	UserStatus *UserDtoUserStatus `json:"userStatus,omitempty"`
}

// UserDtoUserStatus The status of this user in Dynatrace:
//
// * `ACTIVE`: The user is active.
// * `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace.
// * `PENDING`: The user received an invitation, but hasn't completed sign-up yet.
// * `DELETED`: The user was deleted and cannot sign in to Dynatrace anymore.
// * `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation.
type UserDtoUserStatus string

// UserEmailDto defines model for UserEmailDto.
type UserEmailDto struct {
	// Email The email address of the user.
	Email string `json:"email"`
}

// UserListDto defines model for UserListDto.
type UserListDto struct {
	// Count The number of entries in the list.
	Count float32 `json:"count"`

	// Items A list of the account's users.
	Items []UsersDto `json:"items"`
}

// UserLoginMetaDataDto defines model for UserLoginMetaDataDto.
type UserLoginMetaDataDto struct {
	// CreatedAt The date and time of user creation in `2021-05-01T15:11:00Z` format.
	CreatedAt string `json:"createdAt"`

	// FailedLoginCounter The number of failed sign-ins.
	FailedLoginCounter float32 `json:"failedLoginCounter"`

	// LastFailedLogin The date and time of the most recent failed sign-in in `2021-05-01T15:11:00Z` format.
	LastFailedLogin string `json:"lastFailedLogin"`

	// LastSuccessfulLogin The date and time of the most recent successful sign-in in `2021-05-01T15:11:00Z` format.
	LastSuccessfulLogin string `json:"lastSuccessfulLogin"`

	// SuccessfulLoginCounter The number of successful sign-ins.
	SuccessfulLoginCounter float32 `json:"successfulLoginCounter"`

	// UpdatedAt The date and time of the most recent modification to the user in `2021-05-01T15:11:00Z` format.
	UpdatedAt string `json:"updatedAt"`
}

// UsersDto defines model for UsersDto.
type UsersDto struct {
	// Email The email address of the user.
	Email string `json:"email"`

	// EmergencyContact The user is (`true`) or is not (`false`) an emergency contact for the account.
	EmergencyContact *bool `json:"emergencyContact,omitempty"`

	// Name The first name of the user.
	Name *string `json:"name,omitempty"`

	// Surname The last name of the user.
	Surname *string `json:"surname,omitempty"`

	// Uid The UUID of the user.
	Uid string `json:"uid"`

	// UserLoginMetadata Available if user has logged into Dynatrace at least once
	UserLoginMetadata *UserLoginMetaDataDto `json:"userLoginMetadata,omitempty"`

	// UserStatus The status of this user in Dynatrace:
	//
	// * `ACTIVE`: The user is active.
	// * `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace.
	// * `PENDING`: The user received an invitation, but hasn't completed sign-up yet.
	// * `DELETED`: The user was deleted and cannot sign in to Dynatrace anymore.
	// * `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation.
	UserStatus *UsersDtoUserStatus `json:"userStatus,omitempty"`
}

// UsersDtoUserStatus The status of this user in Dynatrace:
//
// * `ACTIVE`: The user is active.
// * `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace.
// * `PENDING`: The user received an invitation, but hasn't completed sign-up yet.
// * `DELETED`: The user was deleted and cannot sign in to Dynatrace anymore.
// * `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation.
type UsersDtoUserStatus string

// ValidationDto defines model for ValidationDto.
type ValidationDto struct {
	// Warnings A list of validation warnings.
	Warnings []string `json:"warnings"`
}

// GroupsControllerCreateGroupsJSONBody defines parameters for GroupsControllerCreateGroups.
type GroupsControllerCreateGroupsJSONBody = []PutGroupDto

// PermissionsControllerRemoveGroupPermissionsParams defines parameters for PermissionsControllerRemoveGroupPermissions.
type PermissionsControllerRemoveGroupPermissionsParams struct {
	// Scope The scope of the permission to be deleted. Depending on the type of the scope, specify one of the following:
	//
	//  * `account`: The UUID of the account.
	// * `tenant`: The ID of the environment.
	// * `management-zone`: The ID of the management zone from an environment in `{environment-id}:{management-zone-id}` format.
	Scope string `form:"scope" json:"scope"`

	// PermissionName The name of the permission to be deleted.
	PermissionName PermissionsControllerRemoveGroupPermissionsParamsPermissionName `form:"permission-name" json:"permission-name"`

	// ScopeType The scope type of the permission to be deleted.
	ScopeType PermissionsControllerRemoveGroupPermissionsParamsScopeType `form:"scope-type" json:"scope-type"`
}

// PermissionsControllerRemoveGroupPermissionsParamsPermissionName defines parameters for PermissionsControllerRemoveGroupPermissions.
type PermissionsControllerRemoveGroupPermissionsParamsPermissionName string

// PermissionsControllerRemoveGroupPermissionsParamsScopeType defines parameters for PermissionsControllerRemoveGroupPermissions.
type PermissionsControllerRemoveGroupPermissionsParamsScopeType string

// PermissionsControllerAddGroupPermissionsJSONBody defines parameters for PermissionsControllerAddGroupPermissions.
type PermissionsControllerAddGroupPermissionsJSONBody = []PermissionsDto

// PermissionsControllerOverwriteGroupPermissionsJSONBody defines parameters for PermissionsControllerOverwriteGroupPermissions.
type PermissionsControllerOverwriteGroupPermissionsJSONBody = []PermissionsDto

// UsersControllerGetUsersParams defines parameters for UsersControllerGetUsers.
type UsersControllerGetUsersParams struct {
	// ServiceUsers Specifies whether service users are included in results.
	ServiceUsers *bool `form:"service-users,omitempty" json:"service-users,omitempty"`
}

// UsersControllerAddUserToGroupsJSONBody defines parameters for UsersControllerAddUserToGroups.
type UsersControllerAddUserToGroupsJSONBody = []string

// UsersControllerRemoveUserFromGroupsParams defines parameters for UsersControllerRemoveUserFromGroups.
type UsersControllerRemoveUserFromGroupsParams struct {
	// GroupUuid A list of groups the user is no longer a member of.
	//
	//  To specify several groups, use the following format: `group-uuid=aaaaaa&group-uuid=bbbb`.
	GroupUuid []string `form:"group-uuid" json:"group-uuid"`
}

// UsersControllerReplaceUserGroupsJSONBody defines parameters for UsersControllerReplaceUserGroups.
type UsersControllerReplaceUserGroupsJSONBody = []string

// PolicyControllerGetLevelDescendantsPolicyBindingsParams defines parameters for PolicyControllerGetLevelDescendantsPolicyBindings.
type PolicyControllerGetLevelDescendantsPolicyBindingsParams struct {
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`
}

// PolicyControllerDeleteLevelPolicyBindingsForPolicyParams defines parameters for PolicyControllerDeleteLevelPolicyBindingsForPolicy.
type PolicyControllerDeleteLevelPolicyBindingsForPolicyParams struct {
	// ForceMultiple Forces multiple in case delete by parameters and metadata query
	ForceMultiple bool `form:"forceMultiple" json:"forceMultiple"`
}

// PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams defines parameters for PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup.
type PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams struct {
	// ForceMultiple Forces multiple in case delete by parameters and metadata query
	ForceMultiple bool `form:"forceMultiple" json:"forceMultiple"`
}

// PolicyControllerGetLevelPoliciesParams defines parameters for PolicyControllerGetLevelPolicies.
type PolicyControllerGetLevelPoliciesParams struct {
	// Name Optional policy name. Only policies that are of equal name will be returned.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PolicyControllerDeleteLevelPolicyParams defines parameters for PolicyControllerDeleteLevelPolicy.
type PolicyControllerDeleteLevelPolicyParams struct {
	// Force Set to `true` to delete a policy that is still in use.
	Force bool `form:"force" json:"force"`
}

// PolicyControllerGetEffectivePermissionsParams defines parameters for PolicyControllerGetEffectivePermissions.
type PolicyControllerGetEffectivePermissionsParams struct {
	// EntityType Required entity type. The following values are available:
	//
	// * user
	// * group
	EntityType string `form:"entityType" json:"entityType"`

	// EntityId Required entity id.
	EntityId string `form:"entityId" json:"entityId"`
	Explain  bool   `form:"explain" json:"explain"`

	// Services Optional services list. Policies for given services will be returned
	Services *[]string `form:"services;,omitempty" json:"services;,omitempty"`
	Page     *float32  `form:"page,omitempty" json:"page,omitempty"`
	Size     *float32  `form:"size,omitempty" json:"size,omitempty"`
}

// GroupsControllerCreateGroupsJSONRequestBody defines body for GroupsControllerCreateGroups for application/json ContentType.
type GroupsControllerCreateGroupsJSONRequestBody = GroupsControllerCreateGroupsJSONBody

// GroupsControllerEditGroupJSONRequestBody defines body for GroupsControllerEditGroup for application/json ContentType.
type GroupsControllerEditGroupJSONRequestBody = PutGroupDto

// PermissionsControllerAddGroupPermissionsJSONRequestBody defines body for PermissionsControllerAddGroupPermissions for application/json ContentType.
type PermissionsControllerAddGroupPermissionsJSONRequestBody = PermissionsControllerAddGroupPermissionsJSONBody

// PermissionsControllerOverwriteGroupPermissionsJSONRequestBody defines body for PermissionsControllerOverwriteGroupPermissions for application/json ContentType.
type PermissionsControllerOverwriteGroupPermissionsJSONRequestBody = PermissionsControllerOverwriteGroupPermissionsJSONBody

// UsersControllerCreateUserForAccountJSONRequestBody defines body for UsersControllerCreateUserForAccount for application/json ContentType.
type UsersControllerCreateUserForAccountJSONRequestBody = UserEmailDto

// UsersControllerAddUserToGroupsJSONRequestBody defines body for UsersControllerAddUserToGroups for application/json ContentType.
type UsersControllerAddUserToGroupsJSONRequestBody = UsersControllerAddUserToGroupsJSONBody

// UsersControllerReplaceUserGroupsJSONRequestBody defines body for UsersControllerReplaceUserGroups for application/json ContentType.
type UsersControllerReplaceUserGroupsJSONRequestBody = UsersControllerReplaceUserGroupsJSONBody

// PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody defines body for PolicyControllerUpdateLevelPolicyBindings for application/json ContentType.
type PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody = CreateLevelPolicyBindingsRequestDto

// PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody defines body for PolicyControllerUpdatePolicyBindingsToGroup for application/json ContentType.
type PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody = PolicyUuidsDto

// PolicyControllerAppendLevelPolicyBindingsJSONRequestBody defines body for PolicyControllerAppendLevelPolicyBindings for application/json ContentType.
type PolicyControllerAppendLevelPolicyBindingsJSONRequestBody = AppendLevelPolicyBindingsRequestDto

// PolicyControllerAppendParticularGroupBindingJSONRequestBody defines body for PolicyControllerAppendParticularGroupBinding for application/json ContentType.
type PolicyControllerAppendParticularGroupBindingJSONRequestBody = AppendLevelPolicyBindingForGroupDto

// PolicyControllerCreateLevelPolicyJSONRequestBody defines body for PolicyControllerCreateLevelPolicy for application/json ContentType.
type PolicyControllerCreateLevelPolicyJSONRequestBody = CreateOrUpdateLevelPolicyRequestDto

// PolicyControllerValidateNewLevelPolicyJSONRequestBody defines body for PolicyControllerValidateNewLevelPolicy for application/json ContentType.
type PolicyControllerValidateNewLevelPolicyJSONRequestBody = CreateOrUpdateLevelPolicyRequestDto

// PolicyControllerValidateLevelPolicyJSONRequestBody defines body for PolicyControllerValidateLevelPolicy for application/json ContentType.
type PolicyControllerValidateLevelPolicyJSONRequestBody = CreateOrUpdateLevelPolicyRequestDto

// PolicyControllerUpdateLevelPolicyJSONRequestBody defines body for PolicyControllerUpdateLevelPolicy for application/json ContentType.
type PolicyControllerUpdateLevelPolicyJSONRequestBody = CreateOrUpdateLevelPolicyRequestDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GroupsControllerGetGroups request
	GroupsControllerGetGroups(ctx context.Context, accountUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerCreateGroupsWithBody request with any body
	GroupsControllerCreateGroupsWithBody(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsControllerCreateGroups(ctx context.Context, accountUuid string, body GroupsControllerCreateGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerDeleteGroup request
	GroupsControllerDeleteGroup(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerEditGroupWithBody request with any body
	GroupsControllerEditGroupWithBody(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsControllerEditGroup(ctx context.Context, accountUuid string, groupUuid string, body GroupsControllerEditGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsControllerRemoveGroupPermissions request
	PermissionsControllerRemoveGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, params *PermissionsControllerRemoveGroupPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsControllerGetGroupPermissions request
	PermissionsControllerGetGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsControllerAddGroupPermissionsWithBody request with any body
	PermissionsControllerAddGroupPermissionsWithBody(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PermissionsControllerAddGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerAddGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsControllerOverwriteGroupPermissionsWithBody request with any body
	PermissionsControllerOverwriteGroupPermissionsWithBody(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PermissionsControllerOverwriteGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerOverwriteGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerGetUsersForGroup request
	GroupsControllerGetUsersForGroup(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerGetUsers request
	UsersControllerGetUsers(ctx context.Context, accountUuid string, params *UsersControllerGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerCreateUserForAccountWithBody request with any body
	UsersControllerCreateUserForAccountWithBody(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersControllerCreateUserForAccount(ctx context.Context, accountUuid string, body UsersControllerCreateUserForAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerRemoveUserFromAccount request
	UsersControllerRemoveUserFromAccount(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerGetUserGroups request
	UsersControllerGetUserGroups(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerAddUserToGroupsWithBody request with any body
	UsersControllerAddUserToGroupsWithBody(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersControllerAddUserToGroups(ctx context.Context, accountUuid string, email string, body UsersControllerAddUserToGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerRemoveUserFromGroups request
	UsersControllerRemoveUserFromGroups(ctx context.Context, accountUuid string, email string, params *UsersControllerRemoveUserFromGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersControllerReplaceUserGroupsWithBody request with any body
	UsersControllerReplaceUserGroupsWithBody(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersControllerReplaceUserGroups(ctx context.Context, accountUuid string, email string, body UsersControllerReplaceUserGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerDeleteLevelPolicyBindings request
	PolicyControllerDeleteLevelPolicyBindings(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetAllLevelPoliciesBindings request
	PolicyControllerGetAllLevelPoliciesBindings(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerUpdateLevelPolicyBindingsWithBody request with any body
	PolicyControllerUpdateLevelPolicyBindingsWithBody(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerUpdateLevelPolicyBindings(ctx context.Context, levelType string, levelId string, body PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetLevelDescendantsPolicyBindings request
	PolicyControllerGetLevelDescendantsPolicyBindings(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerGetLevelDescendantsPolicyBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetPolicyUuidsBindings request
	PolicyControllerGetPolicyUuidsBindings(ctx context.Context, levelType string, levelId string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerUpdatePolicyBindingsToGroupWithBody request with any body
	PolicyControllerUpdatePolicyBindingsToGroupWithBody(ctx context.Context, levelType string, levelId string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerUpdatePolicyBindingsToGroup(ctx context.Context, levelType string, levelId string, groupUuid string, body PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerDeleteLevelPolicyBindingsForPolicy request
	PolicyControllerDeleteLevelPolicyBindingsForPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetLevelPolicyBindings request
	PolicyControllerGetLevelPolicyBindings(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerAppendLevelPolicyBindingsWithBody request with any body
	PolicyControllerAppendLevelPolicyBindingsWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerAppendLevelPolicyBindings(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerAppendLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup request
	PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetLevelPolicyBindingsForGroup request
	PolicyControllerGetLevelPolicyBindingsForGroup(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerAppendParticularGroupBindingWithBody request with any body
	PolicyControllerAppendParticularGroupBindingWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerAppendParticularGroupBinding(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, body PolicyControllerAppendParticularGroupBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetLevelPolicies request
	PolicyControllerGetLevelPolicies(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetLevelPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerCreateLevelPolicyWithBody request with any body
	PolicyControllerCreateLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerCreateLevelPolicy(ctx context.Context, levelType string, levelId string, body PolicyControllerCreateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetPolicyOverviewList request
	PolicyControllerGetPolicyOverviewList(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerValidateNewLevelPolicyWithBody request with any body
	PolicyControllerValidateNewLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerValidateNewLevelPolicy(ctx context.Context, levelType string, levelId string, body PolicyControllerValidateNewLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerValidateLevelPolicyWithBody request with any body
	PolicyControllerValidateLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerValidateLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerValidateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerDeleteLevelPolicy request
	PolicyControllerDeleteLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetLevelPolicy request
	PolicyControllerGetLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerUpdateLevelPolicyWithBody request with any body
	PolicyControllerUpdateLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyControllerUpdateLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerUpdateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyControllerGetEffectivePermissions request
	PolicyControllerGetEffectivePermissions(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetEffectivePermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GroupsControllerGetGroups(ctx context.Context, accountUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerGetGroupsRequest(c.Server, accountUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerCreateGroupsWithBody(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerCreateGroupsRequestWithBody(c.Server, accountUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerCreateGroups(ctx context.Context, accountUuid string, body GroupsControllerCreateGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerCreateGroupsRequest(c.Server, accountUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerDeleteGroup(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerDeleteGroupRequest(c.Server, accountUuid, groupUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerEditGroupWithBody(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerEditGroupRequestWithBody(c.Server, accountUuid, groupUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerEditGroup(ctx context.Context, accountUuid string, groupUuid string, body GroupsControllerEditGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerEditGroupRequest(c.Server, accountUuid, groupUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerRemoveGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, params *PermissionsControllerRemoveGroupPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerRemoveGroupPermissionsRequest(c.Server, accountUuid, groupUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerGetGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerGetGroupPermissionsRequest(c.Server, accountUuid, groupUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerAddGroupPermissionsWithBody(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerAddGroupPermissionsRequestWithBody(c.Server, accountUuid, groupUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerAddGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerAddGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerAddGroupPermissionsRequest(c.Server, accountUuid, groupUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerOverwriteGroupPermissionsWithBody(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerOverwriteGroupPermissionsRequestWithBody(c.Server, accountUuid, groupUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerOverwriteGroupPermissions(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerOverwriteGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerOverwriteGroupPermissionsRequest(c.Server, accountUuid, groupUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerGetUsersForGroup(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerGetUsersForGroupRequest(c.Server, accountUuid, groupUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerGetUsers(ctx context.Context, accountUuid string, params *UsersControllerGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerGetUsersRequest(c.Server, accountUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerCreateUserForAccountWithBody(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerCreateUserForAccountRequestWithBody(c.Server, accountUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerCreateUserForAccount(ctx context.Context, accountUuid string, body UsersControllerCreateUserForAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerCreateUserForAccountRequest(c.Server, accountUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerRemoveUserFromAccount(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerRemoveUserFromAccountRequest(c.Server, accountUuid, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerGetUserGroups(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerGetUserGroupsRequest(c.Server, accountUuid, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerAddUserToGroupsWithBody(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerAddUserToGroupsRequestWithBody(c.Server, accountUuid, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerAddUserToGroups(ctx context.Context, accountUuid string, email string, body UsersControllerAddUserToGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerAddUserToGroupsRequest(c.Server, accountUuid, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerRemoveUserFromGroups(ctx context.Context, accountUuid string, email string, params *UsersControllerRemoveUserFromGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerRemoveUserFromGroupsRequest(c.Server, accountUuid, email, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerReplaceUserGroupsWithBody(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerReplaceUserGroupsRequestWithBody(c.Server, accountUuid, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersControllerReplaceUserGroups(ctx context.Context, accountUuid string, email string, body UsersControllerReplaceUserGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersControllerReplaceUserGroupsRequest(c.Server, accountUuid, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerDeleteLevelPolicyBindings(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerDeleteLevelPolicyBindingsRequest(c.Server, levelType, levelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetAllLevelPoliciesBindings(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetAllLevelPoliciesBindingsRequest(c.Server, levelType, levelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerUpdateLevelPolicyBindingsWithBody(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerUpdateLevelPolicyBindingsRequestWithBody(c.Server, levelType, levelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerUpdateLevelPolicyBindings(ctx context.Context, levelType string, levelId string, body PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerUpdateLevelPolicyBindingsRequest(c.Server, levelType, levelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetLevelDescendantsPolicyBindings(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerGetLevelDescendantsPolicyBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetLevelDescendantsPolicyBindingsRequest(c.Server, levelType, levelId, policyUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetPolicyUuidsBindings(ctx context.Context, levelType string, levelId string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetPolicyUuidsBindingsRequest(c.Server, levelType, levelId, groupUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerUpdatePolicyBindingsToGroupWithBody(ctx context.Context, levelType string, levelId string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerUpdatePolicyBindingsToGroupRequestWithBody(c.Server, levelType, levelId, groupUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerUpdatePolicyBindingsToGroup(ctx context.Context, levelType string, levelId string, groupUuid string, body PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerUpdatePolicyBindingsToGroupRequest(c.Server, levelType, levelId, groupUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerDeleteLevelPolicyBindingsForPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerDeleteLevelPolicyBindingsForPolicyRequest(c.Server, levelType, levelId, policyUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetLevelPolicyBindings(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetLevelPolicyBindingsRequest(c.Server, levelType, levelId, policyUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerAppendLevelPolicyBindingsWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerAppendLevelPolicyBindingsRequestWithBody(c.Server, levelType, levelId, policyUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerAppendLevelPolicyBindings(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerAppendLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerAppendLevelPolicyBindingsRequest(c.Server, levelType, levelId, policyUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupRequest(c.Server, levelType, levelId, policyUuid, groupUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetLevelPolicyBindingsForGroup(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetLevelPolicyBindingsForGroupRequest(c.Server, levelType, levelId, policyUuid, groupUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerAppendParticularGroupBindingWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerAppendParticularGroupBindingRequestWithBody(c.Server, levelType, levelId, policyUuid, groupUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerAppendParticularGroupBinding(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, body PolicyControllerAppendParticularGroupBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerAppendParticularGroupBindingRequest(c.Server, levelType, levelId, policyUuid, groupUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetLevelPolicies(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetLevelPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetLevelPoliciesRequest(c.Server, levelType, levelId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerCreateLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerCreateLevelPolicyRequestWithBody(c.Server, levelType, levelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerCreateLevelPolicy(ctx context.Context, levelType string, levelId string, body PolicyControllerCreateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerCreateLevelPolicyRequest(c.Server, levelType, levelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetPolicyOverviewList(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetPolicyOverviewListRequest(c.Server, levelType, levelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerValidateNewLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerValidateNewLevelPolicyRequestWithBody(c.Server, levelType, levelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerValidateNewLevelPolicy(ctx context.Context, levelType string, levelId string, body PolicyControllerValidateNewLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerValidateNewLevelPolicyRequest(c.Server, levelType, levelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerValidateLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerValidateLevelPolicyRequestWithBody(c.Server, levelType, levelId, policyUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerValidateLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerValidateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerValidateLevelPolicyRequest(c.Server, levelType, levelId, policyUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerDeleteLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerDeleteLevelPolicyRequest(c.Server, levelType, levelId, policyUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetLevelPolicyRequest(c.Server, levelType, levelId, policyUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerUpdateLevelPolicyWithBody(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerUpdateLevelPolicyRequestWithBody(c.Server, levelType, levelId, policyUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerUpdateLevelPolicy(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerUpdateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerUpdateLevelPolicyRequest(c.Server, levelType, levelId, policyUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyControllerGetEffectivePermissions(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetEffectivePermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyControllerGetEffectivePermissionsRequest(c.Server, levelType, levelId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGroupsControllerGetGroupsRequest generates requests for GroupsControllerGetGroups
func NewGroupsControllerGetGroupsRequest(server string, accountUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsControllerCreateGroupsRequest calls the generic GroupsControllerCreateGroups builder with application/json body
func NewGroupsControllerCreateGroupsRequest(server string, accountUuid string, body GroupsControllerCreateGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsControllerCreateGroupsRequestWithBody(server, accountUuid, "application/json", bodyReader)
}

// NewGroupsControllerCreateGroupsRequestWithBody generates requests for GroupsControllerCreateGroups with any type of body
func NewGroupsControllerCreateGroupsRequestWithBody(server string, accountUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsControllerDeleteGroupRequest generates requests for GroupsControllerDeleteGroup
func NewGroupsControllerDeleteGroupRequest(server string, accountUuid string, groupUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsControllerEditGroupRequest calls the generic GroupsControllerEditGroup builder with application/json body
func NewGroupsControllerEditGroupRequest(server string, accountUuid string, groupUuid string, body GroupsControllerEditGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsControllerEditGroupRequestWithBody(server, accountUuid, groupUuid, "application/json", bodyReader)
}

// NewGroupsControllerEditGroupRequestWithBody generates requests for GroupsControllerEditGroup with any type of body
func NewGroupsControllerEditGroupRequestWithBody(server string, accountUuid string, groupUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsControllerRemoveGroupPermissionsRequest generates requests for PermissionsControllerRemoveGroupPermissions
func NewPermissionsControllerRemoveGroupPermissionsRequest(server string, accountUuid string, groupUuid string, params *PermissionsControllerRemoveGroupPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission-name", runtime.ParamLocationQuery, params.PermissionName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope-type", runtime.ParamLocationQuery, params.ScopeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPermissionsControllerGetGroupPermissionsRequest generates requests for PermissionsControllerGetGroupPermissions
func NewPermissionsControllerGetGroupPermissionsRequest(server string, accountUuid string, groupUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPermissionsControllerAddGroupPermissionsRequest calls the generic PermissionsControllerAddGroupPermissions builder with application/json body
func NewPermissionsControllerAddGroupPermissionsRequest(server string, accountUuid string, groupUuid string, body PermissionsControllerAddGroupPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPermissionsControllerAddGroupPermissionsRequestWithBody(server, accountUuid, groupUuid, "application/json", bodyReader)
}

// NewPermissionsControllerAddGroupPermissionsRequestWithBody generates requests for PermissionsControllerAddGroupPermissions with any type of body
func NewPermissionsControllerAddGroupPermissionsRequestWithBody(server string, accountUuid string, groupUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsControllerOverwriteGroupPermissionsRequest calls the generic PermissionsControllerOverwriteGroupPermissions builder with application/json body
func NewPermissionsControllerOverwriteGroupPermissionsRequest(server string, accountUuid string, groupUuid string, body PermissionsControllerOverwriteGroupPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPermissionsControllerOverwriteGroupPermissionsRequestWithBody(server, accountUuid, groupUuid, "application/json", bodyReader)
}

// NewPermissionsControllerOverwriteGroupPermissionsRequestWithBody generates requests for PermissionsControllerOverwriteGroupPermissions with any type of body
func NewPermissionsControllerOverwriteGroupPermissionsRequestWithBody(server string, accountUuid string, groupUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsControllerGetUsersForGroupRequest generates requests for GroupsControllerGetUsersForGroup
func NewGroupsControllerGetUsersForGroupRequest(server string, accountUuid string, groupUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/groups/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersControllerGetUsersRequest generates requests for UsersControllerGetUsers
func NewUsersControllerGetUsersRequest(server string, accountUuid string, params *UsersControllerGetUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceUsers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service-users", runtime.ParamLocationQuery, *params.ServiceUsers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersControllerCreateUserForAccountRequest calls the generic UsersControllerCreateUserForAccount builder with application/json body
func NewUsersControllerCreateUserForAccountRequest(server string, accountUuid string, body UsersControllerCreateUserForAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersControllerCreateUserForAccountRequestWithBody(server, accountUuid, "application/json", bodyReader)
}

// NewUsersControllerCreateUserForAccountRequestWithBody generates requests for UsersControllerCreateUserForAccount with any type of body
func NewUsersControllerCreateUserForAccountRequestWithBody(server string, accountUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersControllerRemoveUserFromAccountRequest generates requests for UsersControllerRemoveUserFromAccount
func NewUsersControllerRemoveUserFromAccountRequest(server string, accountUuid string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersControllerGetUserGroupsRequest generates requests for UsersControllerGetUserGroups
func NewUsersControllerGetUserGroupsRequest(server string, accountUuid string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersControllerAddUserToGroupsRequest calls the generic UsersControllerAddUserToGroups builder with application/json body
func NewUsersControllerAddUserToGroupsRequest(server string, accountUuid string, email string, body UsersControllerAddUserToGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersControllerAddUserToGroupsRequestWithBody(server, accountUuid, email, "application/json", bodyReader)
}

// NewUsersControllerAddUserToGroupsRequestWithBody generates requests for UsersControllerAddUserToGroups with any type of body
func NewUsersControllerAddUserToGroupsRequestWithBody(server string, accountUuid string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersControllerRemoveUserFromGroupsRequest generates requests for UsersControllerRemoveUserFromGroups
func NewUsersControllerRemoveUserFromGroupsRequest(server string, accountUuid string, email string, params *UsersControllerRemoveUserFromGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group-uuid", runtime.ParamLocationQuery, params.GroupUuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersControllerReplaceUserGroupsRequest calls the generic UsersControllerReplaceUserGroups builder with application/json body
func NewUsersControllerReplaceUserGroupsRequest(server string, accountUuid string, email string, body UsersControllerReplaceUserGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersControllerReplaceUserGroupsRequestWithBody(server, accountUuid, email, "application/json", bodyReader)
}

// NewUsersControllerReplaceUserGroupsRequestWithBody generates requests for UsersControllerReplaceUserGroups with any type of body
func NewUsersControllerReplaceUserGroupsRequestWithBody(server string, accountUuid string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUuid", runtime.ParamLocationPath, accountUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/accounts/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerDeleteLevelPolicyBindingsRequest generates requests for PolicyControllerDeleteLevelPolicyBindings
func NewPolicyControllerDeleteLevelPolicyBindingsRequest(server string, levelType string, levelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerGetAllLevelPoliciesBindingsRequest generates requests for PolicyControllerGetAllLevelPoliciesBindings
func NewPolicyControllerGetAllLevelPoliciesBindingsRequest(server string, levelType string, levelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerUpdateLevelPolicyBindingsRequest calls the generic PolicyControllerUpdateLevelPolicyBindings builder with application/json body
func NewPolicyControllerUpdateLevelPolicyBindingsRequest(server string, levelType string, levelId string, body PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerUpdateLevelPolicyBindingsRequestWithBody(server, levelType, levelId, "application/json", bodyReader)
}

// NewPolicyControllerUpdateLevelPolicyBindingsRequestWithBody generates requests for PolicyControllerUpdateLevelPolicyBindings with any type of body
func NewPolicyControllerUpdateLevelPolicyBindingsRequestWithBody(server string, levelType string, levelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerGetLevelDescendantsPolicyBindingsRequest generates requests for PolicyControllerGetLevelDescendantsPolicyBindings
func NewPolicyControllerGetLevelDescendantsPolicyBindingsRequest(server string, levelType string, levelId string, policyUuid string, params *PolicyControllerGetLevelDescendantsPolicyBindingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/descendants/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerGetPolicyUuidsBindingsRequest generates requests for PolicyControllerGetPolicyUuidsBindings
func NewPolicyControllerGetPolicyUuidsBindingsRequest(server string, levelType string, levelId string, groupUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerUpdatePolicyBindingsToGroupRequest calls the generic PolicyControllerUpdatePolicyBindingsToGroup builder with application/json body
func NewPolicyControllerUpdatePolicyBindingsToGroupRequest(server string, levelType string, levelId string, groupUuid string, body PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerUpdatePolicyBindingsToGroupRequestWithBody(server, levelType, levelId, groupUuid, "application/json", bodyReader)
}

// NewPolicyControllerUpdatePolicyBindingsToGroupRequestWithBody generates requests for PolicyControllerUpdatePolicyBindingsToGroup with any type of body
func NewPolicyControllerUpdatePolicyBindingsToGroupRequestWithBody(server string, levelType string, levelId string, groupUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerDeleteLevelPolicyBindingsForPolicyRequest generates requests for PolicyControllerDeleteLevelPolicyBindingsForPolicy
func NewPolicyControllerDeleteLevelPolicyBindingsForPolicyRequest(server string, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceMultiple", runtime.ParamLocationQuery, params.ForceMultiple); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerGetLevelPolicyBindingsRequest generates requests for PolicyControllerGetLevelPolicyBindings
func NewPolicyControllerGetLevelPolicyBindingsRequest(server string, levelType string, levelId string, policyUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerAppendLevelPolicyBindingsRequest calls the generic PolicyControllerAppendLevelPolicyBindings builder with application/json body
func NewPolicyControllerAppendLevelPolicyBindingsRequest(server string, levelType string, levelId string, policyUuid string, body PolicyControllerAppendLevelPolicyBindingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerAppendLevelPolicyBindingsRequestWithBody(server, levelType, levelId, policyUuid, "application/json", bodyReader)
}

// NewPolicyControllerAppendLevelPolicyBindingsRequestWithBody generates requests for PolicyControllerAppendLevelPolicyBindings with any type of body
func NewPolicyControllerAppendLevelPolicyBindingsRequestWithBody(server string, levelType string, levelId string, policyUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupRequest generates requests for PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup
func NewPolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupRequest(server string, levelType string, levelId string, policyUuid string, groupUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceMultiple", runtime.ParamLocationQuery, params.ForceMultiple); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerGetLevelPolicyBindingsForGroupRequest generates requests for PolicyControllerGetLevelPolicyBindingsForGroup
func NewPolicyControllerGetLevelPolicyBindingsForGroupRequest(server string, levelType string, levelId string, policyUuid string, groupUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerAppendParticularGroupBindingRequest calls the generic PolicyControllerAppendParticularGroupBinding builder with application/json body
func NewPolicyControllerAppendParticularGroupBindingRequest(server string, levelType string, levelId string, policyUuid string, groupUuid string, body PolicyControllerAppendParticularGroupBindingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerAppendParticularGroupBindingRequestWithBody(server, levelType, levelId, policyUuid, groupUuid, "application/json", bodyReader)
}

// NewPolicyControllerAppendParticularGroupBindingRequestWithBody generates requests for PolicyControllerAppendParticularGroupBinding with any type of body
func NewPolicyControllerAppendParticularGroupBindingRequestWithBody(server string, levelType string, levelId string, policyUuid string, groupUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "groupUuid", runtime.ParamLocationPath, groupUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/bindings/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerGetLevelPoliciesRequest generates requests for PolicyControllerGetLevelPolicies
func NewPolicyControllerGetLevelPoliciesRequest(server string, levelType string, levelId string, params *PolicyControllerGetLevelPoliciesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerCreateLevelPolicyRequest calls the generic PolicyControllerCreateLevelPolicy builder with application/json body
func NewPolicyControllerCreateLevelPolicyRequest(server string, levelType string, levelId string, body PolicyControllerCreateLevelPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerCreateLevelPolicyRequestWithBody(server, levelType, levelId, "application/json", bodyReader)
}

// NewPolicyControllerCreateLevelPolicyRequestWithBody generates requests for PolicyControllerCreateLevelPolicy with any type of body
func NewPolicyControllerCreateLevelPolicyRequestWithBody(server string, levelType string, levelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerGetPolicyOverviewListRequest generates requests for PolicyControllerGetPolicyOverviewList
func NewPolicyControllerGetPolicyOverviewListRequest(server string, levelType string, levelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies/aggregate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerValidateNewLevelPolicyRequest calls the generic PolicyControllerValidateNewLevelPolicy builder with application/json body
func NewPolicyControllerValidateNewLevelPolicyRequest(server string, levelType string, levelId string, body PolicyControllerValidateNewLevelPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerValidateNewLevelPolicyRequestWithBody(server, levelType, levelId, "application/json", bodyReader)
}

// NewPolicyControllerValidateNewLevelPolicyRequestWithBody generates requests for PolicyControllerValidateNewLevelPolicy with any type of body
func NewPolicyControllerValidateNewLevelPolicyRequestWithBody(server string, levelType string, levelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies/validation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerValidateLevelPolicyRequest calls the generic PolicyControllerValidateLevelPolicy builder with application/json body
func NewPolicyControllerValidateLevelPolicyRequest(server string, levelType string, levelId string, policyUuid string, body PolicyControllerValidateLevelPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerValidateLevelPolicyRequestWithBody(server, levelType, levelId, policyUuid, "application/json", bodyReader)
}

// NewPolicyControllerValidateLevelPolicyRequestWithBody generates requests for PolicyControllerValidateLevelPolicy with any type of body
func NewPolicyControllerValidateLevelPolicyRequestWithBody(server string, levelType string, levelId string, policyUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies/validation/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerDeleteLevelPolicyRequest generates requests for PolicyControllerDeleteLevelPolicy
func NewPolicyControllerDeleteLevelPolicyRequest(server string, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerGetLevelPolicyRequest generates requests for PolicyControllerGetLevelPolicy
func NewPolicyControllerGetLevelPolicyRequest(server string, levelType string, levelId string, policyUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyControllerUpdateLevelPolicyRequest calls the generic PolicyControllerUpdateLevelPolicy builder with application/json body
func NewPolicyControllerUpdateLevelPolicyRequest(server string, levelType string, levelId string, policyUuid string, body PolicyControllerUpdateLevelPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyControllerUpdateLevelPolicyRequestWithBody(server, levelType, levelId, policyUuid, "application/json", bodyReader)
}

// NewPolicyControllerUpdateLevelPolicyRequestWithBody generates requests for PolicyControllerUpdateLevelPolicy with any type of body
func NewPolicyControllerUpdateLevelPolicyRequestWithBody(server string, levelType string, levelId string, policyUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyUuid", runtime.ParamLocationPath, policyUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/repo/%s/%s/policies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyControllerGetEffectivePermissionsRequest generates requests for PolicyControllerGetEffectivePermissions
func NewPolicyControllerGetEffectivePermissionsRequest(server string, levelType string, levelId string, params *PolicyControllerGetEffectivePermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "levelType", runtime.ParamLocationPath, levelType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "levelId", runtime.ParamLocationPath, levelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/resolution/%s/%s/effectivepermissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, params.EntityType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityId", runtime.ParamLocationQuery, params.EntityId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, params.Explain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Services != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "services;", runtime.ParamLocationQuery, *params.Services); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GroupsControllerGetGroupsWithResponse request
	GroupsControllerGetGroupsWithResponse(ctx context.Context, accountUuid string, reqEditors ...RequestEditorFn) (*GroupsControllerGetGroupsResponse, error)

	// GroupsControllerCreateGroupsWithBodyWithResponse request with any body
	GroupsControllerCreateGroupsWithBodyWithResponse(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerCreateGroupsResponse, error)

	GroupsControllerCreateGroupsWithResponse(ctx context.Context, accountUuid string, body GroupsControllerCreateGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerCreateGroupsResponse, error)

	// GroupsControllerDeleteGroupWithResponse request
	GroupsControllerDeleteGroupWithResponse(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*GroupsControllerDeleteGroupResponse, error)

	// GroupsControllerEditGroupWithBodyWithResponse request with any body
	GroupsControllerEditGroupWithBodyWithResponse(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerEditGroupResponse, error)

	GroupsControllerEditGroupWithResponse(ctx context.Context, accountUuid string, groupUuid string, body GroupsControllerEditGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerEditGroupResponse, error)

	// PermissionsControllerRemoveGroupPermissionsWithResponse request
	PermissionsControllerRemoveGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, params *PermissionsControllerRemoveGroupPermissionsParams, reqEditors ...RequestEditorFn) (*PermissionsControllerRemoveGroupPermissionsResponse, error)

	// PermissionsControllerGetGroupPermissionsWithResponse request
	PermissionsControllerGetGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*PermissionsControllerGetGroupPermissionsResponse, error)

	// PermissionsControllerAddGroupPermissionsWithBodyWithResponse request with any body
	PermissionsControllerAddGroupPermissionsWithBodyWithResponse(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsControllerAddGroupPermissionsResponse, error)

	PermissionsControllerAddGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerAddGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsControllerAddGroupPermissionsResponse, error)

	// PermissionsControllerOverwriteGroupPermissionsWithBodyWithResponse request with any body
	PermissionsControllerOverwriteGroupPermissionsWithBodyWithResponse(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsControllerOverwriteGroupPermissionsResponse, error)

	PermissionsControllerOverwriteGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerOverwriteGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsControllerOverwriteGroupPermissionsResponse, error)

	// GroupsControllerGetUsersForGroupWithResponse request
	GroupsControllerGetUsersForGroupWithResponse(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*GroupsControllerGetUsersForGroupResponse, error)

	// UsersControllerGetUsersWithResponse request
	UsersControllerGetUsersWithResponse(ctx context.Context, accountUuid string, params *UsersControllerGetUsersParams, reqEditors ...RequestEditorFn) (*UsersControllerGetUsersResponse, error)

	// UsersControllerCreateUserForAccountWithBodyWithResponse request with any body
	UsersControllerCreateUserForAccountWithBodyWithResponse(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersControllerCreateUserForAccountResponse, error)

	UsersControllerCreateUserForAccountWithResponse(ctx context.Context, accountUuid string, body UsersControllerCreateUserForAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersControllerCreateUserForAccountResponse, error)

	// UsersControllerRemoveUserFromAccountWithResponse request
	UsersControllerRemoveUserFromAccountWithResponse(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*UsersControllerRemoveUserFromAccountResponse, error)

	// UsersControllerGetUserGroupsWithResponse request
	UsersControllerGetUserGroupsWithResponse(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*UsersControllerGetUserGroupsResponse, error)

	// UsersControllerAddUserToGroupsWithBodyWithResponse request with any body
	UsersControllerAddUserToGroupsWithBodyWithResponse(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersControllerAddUserToGroupsResponse, error)

	UsersControllerAddUserToGroupsWithResponse(ctx context.Context, accountUuid string, email string, body UsersControllerAddUserToGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersControllerAddUserToGroupsResponse, error)

	// UsersControllerRemoveUserFromGroupsWithResponse request
	UsersControllerRemoveUserFromGroupsWithResponse(ctx context.Context, accountUuid string, email string, params *UsersControllerRemoveUserFromGroupsParams, reqEditors ...RequestEditorFn) (*UsersControllerRemoveUserFromGroupsResponse, error)

	// UsersControllerReplaceUserGroupsWithBodyWithResponse request with any body
	UsersControllerReplaceUserGroupsWithBodyWithResponse(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersControllerReplaceUserGroupsResponse, error)

	UsersControllerReplaceUserGroupsWithResponse(ctx context.Context, accountUuid string, email string, body UsersControllerReplaceUserGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersControllerReplaceUserGroupsResponse, error)

	// PolicyControllerDeleteLevelPolicyBindingsWithResponse request
	PolicyControllerDeleteLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyBindingsResponse, error)

	// PolicyControllerGetAllLevelPoliciesBindingsWithResponse request
	PolicyControllerGetAllLevelPoliciesBindingsWithResponse(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*PolicyControllerGetAllLevelPoliciesBindingsResponse, error)

	// PolicyControllerUpdateLevelPolicyBindingsWithBodyWithResponse request with any body
	PolicyControllerUpdateLevelPolicyBindingsWithBodyWithResponse(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyBindingsResponse, error)

	PolicyControllerUpdateLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, body PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyBindingsResponse, error)

	// PolicyControllerGetLevelDescendantsPolicyBindingsWithResponse request
	PolicyControllerGetLevelDescendantsPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerGetLevelDescendantsPolicyBindingsParams, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelDescendantsPolicyBindingsResponse, error)

	// PolicyControllerGetPolicyUuidsBindingsWithResponse request
	PolicyControllerGetPolicyUuidsBindingsWithResponse(ctx context.Context, levelType string, levelId string, groupUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetPolicyUuidsBindingsResponse, error)

	// PolicyControllerUpdatePolicyBindingsToGroupWithBodyWithResponse request with any body
	PolicyControllerUpdatePolicyBindingsToGroupWithBodyWithResponse(ctx context.Context, levelType string, levelId string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerUpdatePolicyBindingsToGroupResponse, error)

	PolicyControllerUpdatePolicyBindingsToGroupWithResponse(ctx context.Context, levelType string, levelId string, groupUuid string, body PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerUpdatePolicyBindingsToGroupResponse, error)

	// PolicyControllerDeleteLevelPolicyBindingsForPolicyWithResponse request
	PolicyControllerDeleteLevelPolicyBindingsForPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyParams, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse, error)

	// PolicyControllerGetLevelPolicyBindingsWithResponse request
	PolicyControllerGetLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPolicyBindingsResponse, error)

	// PolicyControllerAppendLevelPolicyBindingsWithBodyWithResponse request with any body
	PolicyControllerAppendLevelPolicyBindingsWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerAppendLevelPolicyBindingsResponse, error)

	PolicyControllerAppendLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerAppendLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerAppendLevelPolicyBindingsResponse, error)

	// PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupWithResponse request
	PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse, error)

	// PolicyControllerGetLevelPolicyBindingsForGroupWithResponse request
	PolicyControllerGetLevelPolicyBindingsForGroupWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPolicyBindingsForGroupResponse, error)

	// PolicyControllerAppendParticularGroupBindingWithBodyWithResponse request with any body
	PolicyControllerAppendParticularGroupBindingWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerAppendParticularGroupBindingResponse, error)

	PolicyControllerAppendParticularGroupBindingWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, body PolicyControllerAppendParticularGroupBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerAppendParticularGroupBindingResponse, error)

	// PolicyControllerGetLevelPoliciesWithResponse request
	PolicyControllerGetLevelPoliciesWithResponse(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetLevelPoliciesParams, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPoliciesResponse, error)

	// PolicyControllerCreateLevelPolicyWithBodyWithResponse request with any body
	PolicyControllerCreateLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerCreateLevelPolicyResponse, error)

	PolicyControllerCreateLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, body PolicyControllerCreateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerCreateLevelPolicyResponse, error)

	// PolicyControllerGetPolicyOverviewListWithResponse request
	PolicyControllerGetPolicyOverviewListWithResponse(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*PolicyControllerGetPolicyOverviewListResponse, error)

	// PolicyControllerValidateNewLevelPolicyWithBodyWithResponse request with any body
	PolicyControllerValidateNewLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerValidateNewLevelPolicyResponse, error)

	PolicyControllerValidateNewLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, body PolicyControllerValidateNewLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerValidateNewLevelPolicyResponse, error)

	// PolicyControllerValidateLevelPolicyWithBodyWithResponse request with any body
	PolicyControllerValidateLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerValidateLevelPolicyResponse, error)

	PolicyControllerValidateLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerValidateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerValidateLevelPolicyResponse, error)

	// PolicyControllerDeleteLevelPolicyWithResponse request
	PolicyControllerDeleteLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyParams, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyResponse, error)

	// PolicyControllerGetLevelPolicyWithResponse request
	PolicyControllerGetLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPolicyResponse, error)

	// PolicyControllerUpdateLevelPolicyWithBodyWithResponse request with any body
	PolicyControllerUpdateLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyResponse, error)

	PolicyControllerUpdateLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerUpdateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyResponse, error)

	// PolicyControllerGetEffectivePermissionsWithResponse request
	PolicyControllerGetEffectivePermissionsWithResponse(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetEffectivePermissionsParams, reqEditors ...RequestEditorFn) (*PolicyControllerGetEffectivePermissionsResponse, error)
}

type GroupsControllerGetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupListDto
}

// Status returns HTTPResponse.Status
func (r GroupsControllerGetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerGetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerCreateGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]GetGroupDto
}

// Status returns HTTPResponse.Status
func (r GroupsControllerCreateGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerCreateGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerDeleteGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupsControllerDeleteGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerDeleteGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerEditGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupsControllerEditGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerEditGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsControllerRemoveGroupPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PermissionsControllerRemoveGroupPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsControllerRemoveGroupPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsControllerGetGroupPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsGroupDto
}

// Status returns HTTPResponse.Status
func (r PermissionsControllerGetGroupPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsControllerGetGroupPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsControllerAddGroupPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PermissionsControllerAddGroupPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsControllerAddGroupPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsControllerOverwriteGroupPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PermissionsControllerOverwriteGroupPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsControllerOverwriteGroupPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerGetUsersForGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupUserListDto
}

// Status returns HTTPResponse.Status
func (r GroupsControllerGetUsersForGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerGetUsersForGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerGetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListDto
}

// Status returns HTTPResponse.Status
func (r UsersControllerGetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerGetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerCreateUserForAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersControllerCreateUserForAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerCreateUserForAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerRemoveUserFromAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersControllerRemoveUserFromAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerRemoveUserFromAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerGetUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupUserDto
}

// Status returns HTTPResponse.Status
func (r UsersControllerGetUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerGetUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerAddUserToGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersControllerAddUserToGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerAddUserToGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerRemoveUserFromGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersControllerRemoveUserFromGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerRemoveUserFromGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersControllerReplaceUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersControllerReplaceUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersControllerReplaceUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerDeleteLevelPolicyBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerDeleteLevelPolicyBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerDeleteLevelPolicyBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetAllLevelPoliciesBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LevelPolicyBindingDto
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetAllLevelPoliciesBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetAllLevelPoliciesBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerUpdateLevelPolicyBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerUpdateLevelPolicyBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerUpdateLevelPolicyBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetLevelDescendantsPolicyBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetLevelDescendantsPolicyBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetLevelDescendantsPolicyBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetPolicyUuidsBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyUuidsWithoutMetadataDto
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetPolicyUuidsBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetPolicyUuidsBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerUpdatePolicyBindingsToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerUpdatePolicyBindingsToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerUpdatePolicyBindingsToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetLevelPolicyBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetLevelPolicyBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetLevelPolicyBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerAppendLevelPolicyBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerAppendLevelPolicyBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerAppendLevelPolicyBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetLevelPolicyBindingsForGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetLevelPolicyBindingsForGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetLevelPolicyBindingsForGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerAppendParticularGroupBindingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerAppendParticularGroupBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerAppendParticularGroupBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetLevelPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyDtoList
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetLevelPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetLevelPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerCreateLevelPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LevelPolicyDto
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerCreateLevelPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerCreateLevelPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetPolicyOverviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyOverviewDtoList
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetPolicyOverviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetPolicyOverviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerValidateNewLevelPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidationDto
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerValidateNewLevelPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerValidateNewLevelPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerValidateLevelPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidationDto
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerValidateLevelPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerValidateLevelPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerDeleteLevelPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerDeleteLevelPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerDeleteLevelPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetLevelPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LevelPolicyDto
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetLevelPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetLevelPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerUpdateLevelPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LevelPolicyDto
	JSON400      *ErrorDto
	JSON404      *ErrorDto
	JSON422      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerUpdateLevelPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerUpdateLevelPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyControllerGetEffectivePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EffectivePermissions
	JSON404      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PolicyControllerGetEffectivePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyControllerGetEffectivePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GroupsControllerGetGroupsWithResponse request returning *GroupsControllerGetGroupsResponse
func (c *ClientWithResponses) GroupsControllerGetGroupsWithResponse(ctx context.Context, accountUuid string, reqEditors ...RequestEditorFn) (*GroupsControllerGetGroupsResponse, error) {
	rsp, err := c.GroupsControllerGetGroups(ctx, accountUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerGetGroupsResponse(rsp)
}

// GroupsControllerCreateGroupsWithBodyWithResponse request with arbitrary body returning *GroupsControllerCreateGroupsResponse
func (c *ClientWithResponses) GroupsControllerCreateGroupsWithBodyWithResponse(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerCreateGroupsResponse, error) {
	rsp, err := c.GroupsControllerCreateGroupsWithBody(ctx, accountUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerCreateGroupsResponse(rsp)
}

func (c *ClientWithResponses) GroupsControllerCreateGroupsWithResponse(ctx context.Context, accountUuid string, body GroupsControllerCreateGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerCreateGroupsResponse, error) {
	rsp, err := c.GroupsControllerCreateGroups(ctx, accountUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerCreateGroupsResponse(rsp)
}

// GroupsControllerDeleteGroupWithResponse request returning *GroupsControllerDeleteGroupResponse
func (c *ClientWithResponses) GroupsControllerDeleteGroupWithResponse(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*GroupsControllerDeleteGroupResponse, error) {
	rsp, err := c.GroupsControllerDeleteGroup(ctx, accountUuid, groupUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerDeleteGroupResponse(rsp)
}

// GroupsControllerEditGroupWithBodyWithResponse request with arbitrary body returning *GroupsControllerEditGroupResponse
func (c *ClientWithResponses) GroupsControllerEditGroupWithBodyWithResponse(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerEditGroupResponse, error) {
	rsp, err := c.GroupsControllerEditGroupWithBody(ctx, accountUuid, groupUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerEditGroupResponse(rsp)
}

func (c *ClientWithResponses) GroupsControllerEditGroupWithResponse(ctx context.Context, accountUuid string, groupUuid string, body GroupsControllerEditGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerEditGroupResponse, error) {
	rsp, err := c.GroupsControllerEditGroup(ctx, accountUuid, groupUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerEditGroupResponse(rsp)
}

// PermissionsControllerRemoveGroupPermissionsWithResponse request returning *PermissionsControllerRemoveGroupPermissionsResponse
func (c *ClientWithResponses) PermissionsControllerRemoveGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, params *PermissionsControllerRemoveGroupPermissionsParams, reqEditors ...RequestEditorFn) (*PermissionsControllerRemoveGroupPermissionsResponse, error) {
	rsp, err := c.PermissionsControllerRemoveGroupPermissions(ctx, accountUuid, groupUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerRemoveGroupPermissionsResponse(rsp)
}

// PermissionsControllerGetGroupPermissionsWithResponse request returning *PermissionsControllerGetGroupPermissionsResponse
func (c *ClientWithResponses) PermissionsControllerGetGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*PermissionsControllerGetGroupPermissionsResponse, error) {
	rsp, err := c.PermissionsControllerGetGroupPermissions(ctx, accountUuid, groupUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerGetGroupPermissionsResponse(rsp)
}

// PermissionsControllerAddGroupPermissionsWithBodyWithResponse request with arbitrary body returning *PermissionsControllerAddGroupPermissionsResponse
func (c *ClientWithResponses) PermissionsControllerAddGroupPermissionsWithBodyWithResponse(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsControllerAddGroupPermissionsResponse, error) {
	rsp, err := c.PermissionsControllerAddGroupPermissionsWithBody(ctx, accountUuid, groupUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerAddGroupPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PermissionsControllerAddGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerAddGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsControllerAddGroupPermissionsResponse, error) {
	rsp, err := c.PermissionsControllerAddGroupPermissions(ctx, accountUuid, groupUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerAddGroupPermissionsResponse(rsp)
}

// PermissionsControllerOverwriteGroupPermissionsWithBodyWithResponse request with arbitrary body returning *PermissionsControllerOverwriteGroupPermissionsResponse
func (c *ClientWithResponses) PermissionsControllerOverwriteGroupPermissionsWithBodyWithResponse(ctx context.Context, accountUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsControllerOverwriteGroupPermissionsResponse, error) {
	rsp, err := c.PermissionsControllerOverwriteGroupPermissionsWithBody(ctx, accountUuid, groupUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerOverwriteGroupPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PermissionsControllerOverwriteGroupPermissionsWithResponse(ctx context.Context, accountUuid string, groupUuid string, body PermissionsControllerOverwriteGroupPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsControllerOverwriteGroupPermissionsResponse, error) {
	rsp, err := c.PermissionsControllerOverwriteGroupPermissions(ctx, accountUuid, groupUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerOverwriteGroupPermissionsResponse(rsp)
}

// GroupsControllerGetUsersForGroupWithResponse request returning *GroupsControllerGetUsersForGroupResponse
func (c *ClientWithResponses) GroupsControllerGetUsersForGroupWithResponse(ctx context.Context, accountUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*GroupsControllerGetUsersForGroupResponse, error) {
	rsp, err := c.GroupsControllerGetUsersForGroup(ctx, accountUuid, groupUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerGetUsersForGroupResponse(rsp)
}

// UsersControllerGetUsersWithResponse request returning *UsersControllerGetUsersResponse
func (c *ClientWithResponses) UsersControllerGetUsersWithResponse(ctx context.Context, accountUuid string, params *UsersControllerGetUsersParams, reqEditors ...RequestEditorFn) (*UsersControllerGetUsersResponse, error) {
	rsp, err := c.UsersControllerGetUsers(ctx, accountUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerGetUsersResponse(rsp)
}

// UsersControllerCreateUserForAccountWithBodyWithResponse request with arbitrary body returning *UsersControllerCreateUserForAccountResponse
func (c *ClientWithResponses) UsersControllerCreateUserForAccountWithBodyWithResponse(ctx context.Context, accountUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersControllerCreateUserForAccountResponse, error) {
	rsp, err := c.UsersControllerCreateUserForAccountWithBody(ctx, accountUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerCreateUserForAccountResponse(rsp)
}

func (c *ClientWithResponses) UsersControllerCreateUserForAccountWithResponse(ctx context.Context, accountUuid string, body UsersControllerCreateUserForAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersControllerCreateUserForAccountResponse, error) {
	rsp, err := c.UsersControllerCreateUserForAccount(ctx, accountUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerCreateUserForAccountResponse(rsp)
}

// UsersControllerRemoveUserFromAccountWithResponse request returning *UsersControllerRemoveUserFromAccountResponse
func (c *ClientWithResponses) UsersControllerRemoveUserFromAccountWithResponse(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*UsersControllerRemoveUserFromAccountResponse, error) {
	rsp, err := c.UsersControllerRemoveUserFromAccount(ctx, accountUuid, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerRemoveUserFromAccountResponse(rsp)
}

// UsersControllerGetUserGroupsWithResponse request returning *UsersControllerGetUserGroupsResponse
func (c *ClientWithResponses) UsersControllerGetUserGroupsWithResponse(ctx context.Context, accountUuid string, email string, reqEditors ...RequestEditorFn) (*UsersControllerGetUserGroupsResponse, error) {
	rsp, err := c.UsersControllerGetUserGroups(ctx, accountUuid, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerGetUserGroupsResponse(rsp)
}

// UsersControllerAddUserToGroupsWithBodyWithResponse request with arbitrary body returning *UsersControllerAddUserToGroupsResponse
func (c *ClientWithResponses) UsersControllerAddUserToGroupsWithBodyWithResponse(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersControllerAddUserToGroupsResponse, error) {
	rsp, err := c.UsersControllerAddUserToGroupsWithBody(ctx, accountUuid, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerAddUserToGroupsResponse(rsp)
}

func (c *ClientWithResponses) UsersControllerAddUserToGroupsWithResponse(ctx context.Context, accountUuid string, email string, body UsersControllerAddUserToGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersControllerAddUserToGroupsResponse, error) {
	rsp, err := c.UsersControllerAddUserToGroups(ctx, accountUuid, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerAddUserToGroupsResponse(rsp)
}

// UsersControllerRemoveUserFromGroupsWithResponse request returning *UsersControllerRemoveUserFromGroupsResponse
func (c *ClientWithResponses) UsersControllerRemoveUserFromGroupsWithResponse(ctx context.Context, accountUuid string, email string, params *UsersControllerRemoveUserFromGroupsParams, reqEditors ...RequestEditorFn) (*UsersControllerRemoveUserFromGroupsResponse, error) {
	rsp, err := c.UsersControllerRemoveUserFromGroups(ctx, accountUuid, email, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerRemoveUserFromGroupsResponse(rsp)
}

// UsersControllerReplaceUserGroupsWithBodyWithResponse request with arbitrary body returning *UsersControllerReplaceUserGroupsResponse
func (c *ClientWithResponses) UsersControllerReplaceUserGroupsWithBodyWithResponse(ctx context.Context, accountUuid string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersControllerReplaceUserGroupsResponse, error) {
	rsp, err := c.UsersControllerReplaceUserGroupsWithBody(ctx, accountUuid, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerReplaceUserGroupsResponse(rsp)
}

func (c *ClientWithResponses) UsersControllerReplaceUserGroupsWithResponse(ctx context.Context, accountUuid string, email string, body UsersControllerReplaceUserGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersControllerReplaceUserGroupsResponse, error) {
	rsp, err := c.UsersControllerReplaceUserGroups(ctx, accountUuid, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersControllerReplaceUserGroupsResponse(rsp)
}

// PolicyControllerDeleteLevelPolicyBindingsWithResponse request returning *PolicyControllerDeleteLevelPolicyBindingsResponse
func (c *ClientWithResponses) PolicyControllerDeleteLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerDeleteLevelPolicyBindings(ctx, levelType, levelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerDeleteLevelPolicyBindingsResponse(rsp)
}

// PolicyControllerGetAllLevelPoliciesBindingsWithResponse request returning *PolicyControllerGetAllLevelPoliciesBindingsResponse
func (c *ClientWithResponses) PolicyControllerGetAllLevelPoliciesBindingsWithResponse(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*PolicyControllerGetAllLevelPoliciesBindingsResponse, error) {
	rsp, err := c.PolicyControllerGetAllLevelPoliciesBindings(ctx, levelType, levelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetAllLevelPoliciesBindingsResponse(rsp)
}

// PolicyControllerUpdateLevelPolicyBindingsWithBodyWithResponse request with arbitrary body returning *PolicyControllerUpdateLevelPolicyBindingsResponse
func (c *ClientWithResponses) PolicyControllerUpdateLevelPolicyBindingsWithBodyWithResponse(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerUpdateLevelPolicyBindingsWithBody(ctx, levelType, levelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerUpdateLevelPolicyBindingsResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerUpdateLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, body PolicyControllerUpdateLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerUpdateLevelPolicyBindings(ctx, levelType, levelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerUpdateLevelPolicyBindingsResponse(rsp)
}

// PolicyControllerGetLevelDescendantsPolicyBindingsWithResponse request returning *PolicyControllerGetLevelDescendantsPolicyBindingsResponse
func (c *ClientWithResponses) PolicyControllerGetLevelDescendantsPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerGetLevelDescendantsPolicyBindingsParams, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelDescendantsPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerGetLevelDescendantsPolicyBindings(ctx, levelType, levelId, policyUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetLevelDescendantsPolicyBindingsResponse(rsp)
}

// PolicyControllerGetPolicyUuidsBindingsWithResponse request returning *PolicyControllerGetPolicyUuidsBindingsResponse
func (c *ClientWithResponses) PolicyControllerGetPolicyUuidsBindingsWithResponse(ctx context.Context, levelType string, levelId string, groupUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetPolicyUuidsBindingsResponse, error) {
	rsp, err := c.PolicyControllerGetPolicyUuidsBindings(ctx, levelType, levelId, groupUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetPolicyUuidsBindingsResponse(rsp)
}

// PolicyControllerUpdatePolicyBindingsToGroupWithBodyWithResponse request with arbitrary body returning *PolicyControllerUpdatePolicyBindingsToGroupResponse
func (c *ClientWithResponses) PolicyControllerUpdatePolicyBindingsToGroupWithBodyWithResponse(ctx context.Context, levelType string, levelId string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerUpdatePolicyBindingsToGroupResponse, error) {
	rsp, err := c.PolicyControllerUpdatePolicyBindingsToGroupWithBody(ctx, levelType, levelId, groupUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerUpdatePolicyBindingsToGroupResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerUpdatePolicyBindingsToGroupWithResponse(ctx context.Context, levelType string, levelId string, groupUuid string, body PolicyControllerUpdatePolicyBindingsToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerUpdatePolicyBindingsToGroupResponse, error) {
	rsp, err := c.PolicyControllerUpdatePolicyBindingsToGroup(ctx, levelType, levelId, groupUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerUpdatePolicyBindingsToGroupResponse(rsp)
}

// PolicyControllerDeleteLevelPolicyBindingsForPolicyWithResponse request returning *PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse
func (c *ClientWithResponses) PolicyControllerDeleteLevelPolicyBindingsForPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyParams, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse, error) {
	rsp, err := c.PolicyControllerDeleteLevelPolicyBindingsForPolicy(ctx, levelType, levelId, policyUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerDeleteLevelPolicyBindingsForPolicyResponse(rsp)
}

// PolicyControllerGetLevelPolicyBindingsWithResponse request returning *PolicyControllerGetLevelPolicyBindingsResponse
func (c *ClientWithResponses) PolicyControllerGetLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerGetLevelPolicyBindings(ctx, levelType, levelId, policyUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetLevelPolicyBindingsResponse(rsp)
}

// PolicyControllerAppendLevelPolicyBindingsWithBodyWithResponse request with arbitrary body returning *PolicyControllerAppendLevelPolicyBindingsResponse
func (c *ClientWithResponses) PolicyControllerAppendLevelPolicyBindingsWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerAppendLevelPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerAppendLevelPolicyBindingsWithBody(ctx, levelType, levelId, policyUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerAppendLevelPolicyBindingsResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerAppendLevelPolicyBindingsWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerAppendLevelPolicyBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerAppendLevelPolicyBindingsResponse, error) {
	rsp, err := c.PolicyControllerAppendLevelPolicyBindings(ctx, levelType, levelId, policyUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerAppendLevelPolicyBindingsResponse(rsp)
}

// PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupWithResponse request returning *PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse
func (c *ClientWithResponses) PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, params *PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupParams, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse, error) {
	rsp, err := c.PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroup(ctx, levelType, levelId, policyUuid, groupUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse(rsp)
}

// PolicyControllerGetLevelPolicyBindingsForGroupWithResponse request returning *PolicyControllerGetLevelPolicyBindingsForGroupResponse
func (c *ClientWithResponses) PolicyControllerGetLevelPolicyBindingsForGroupWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPolicyBindingsForGroupResponse, error) {
	rsp, err := c.PolicyControllerGetLevelPolicyBindingsForGroup(ctx, levelType, levelId, policyUuid, groupUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetLevelPolicyBindingsForGroupResponse(rsp)
}

// PolicyControllerAppendParticularGroupBindingWithBodyWithResponse request with arbitrary body returning *PolicyControllerAppendParticularGroupBindingResponse
func (c *ClientWithResponses) PolicyControllerAppendParticularGroupBindingWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerAppendParticularGroupBindingResponse, error) {
	rsp, err := c.PolicyControllerAppendParticularGroupBindingWithBody(ctx, levelType, levelId, policyUuid, groupUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerAppendParticularGroupBindingResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerAppendParticularGroupBindingWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, groupUuid string, body PolicyControllerAppendParticularGroupBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerAppendParticularGroupBindingResponse, error) {
	rsp, err := c.PolicyControllerAppendParticularGroupBinding(ctx, levelType, levelId, policyUuid, groupUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerAppendParticularGroupBindingResponse(rsp)
}

// PolicyControllerGetLevelPoliciesWithResponse request returning *PolicyControllerGetLevelPoliciesResponse
func (c *ClientWithResponses) PolicyControllerGetLevelPoliciesWithResponse(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetLevelPoliciesParams, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPoliciesResponse, error) {
	rsp, err := c.PolicyControllerGetLevelPolicies(ctx, levelType, levelId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetLevelPoliciesResponse(rsp)
}

// PolicyControllerCreateLevelPolicyWithBodyWithResponse request with arbitrary body returning *PolicyControllerCreateLevelPolicyResponse
func (c *ClientWithResponses) PolicyControllerCreateLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerCreateLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerCreateLevelPolicyWithBody(ctx, levelType, levelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerCreateLevelPolicyResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerCreateLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, body PolicyControllerCreateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerCreateLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerCreateLevelPolicy(ctx, levelType, levelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerCreateLevelPolicyResponse(rsp)
}

// PolicyControllerGetPolicyOverviewListWithResponse request returning *PolicyControllerGetPolicyOverviewListResponse
func (c *ClientWithResponses) PolicyControllerGetPolicyOverviewListWithResponse(ctx context.Context, levelType string, levelId string, reqEditors ...RequestEditorFn) (*PolicyControllerGetPolicyOverviewListResponse, error) {
	rsp, err := c.PolicyControllerGetPolicyOverviewList(ctx, levelType, levelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetPolicyOverviewListResponse(rsp)
}

// PolicyControllerValidateNewLevelPolicyWithBodyWithResponse request with arbitrary body returning *PolicyControllerValidateNewLevelPolicyResponse
func (c *ClientWithResponses) PolicyControllerValidateNewLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerValidateNewLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerValidateNewLevelPolicyWithBody(ctx, levelType, levelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerValidateNewLevelPolicyResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerValidateNewLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, body PolicyControllerValidateNewLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerValidateNewLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerValidateNewLevelPolicy(ctx, levelType, levelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerValidateNewLevelPolicyResponse(rsp)
}

// PolicyControllerValidateLevelPolicyWithBodyWithResponse request with arbitrary body returning *PolicyControllerValidateLevelPolicyResponse
func (c *ClientWithResponses) PolicyControllerValidateLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerValidateLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerValidateLevelPolicyWithBody(ctx, levelType, levelId, policyUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerValidateLevelPolicyResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerValidateLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerValidateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerValidateLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerValidateLevelPolicy(ctx, levelType, levelId, policyUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerValidateLevelPolicyResponse(rsp)
}

// PolicyControllerDeleteLevelPolicyWithResponse request returning *PolicyControllerDeleteLevelPolicyResponse
func (c *ClientWithResponses) PolicyControllerDeleteLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, params *PolicyControllerDeleteLevelPolicyParams, reqEditors ...RequestEditorFn) (*PolicyControllerDeleteLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerDeleteLevelPolicy(ctx, levelType, levelId, policyUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerDeleteLevelPolicyResponse(rsp)
}

// PolicyControllerGetLevelPolicyWithResponse request returning *PolicyControllerGetLevelPolicyResponse
func (c *ClientWithResponses) PolicyControllerGetLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, reqEditors ...RequestEditorFn) (*PolicyControllerGetLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerGetLevelPolicy(ctx, levelType, levelId, policyUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetLevelPolicyResponse(rsp)
}

// PolicyControllerUpdateLevelPolicyWithBodyWithResponse request with arbitrary body returning *PolicyControllerUpdateLevelPolicyResponse
func (c *ClientWithResponses) PolicyControllerUpdateLevelPolicyWithBodyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerUpdateLevelPolicyWithBody(ctx, levelType, levelId, policyUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerUpdateLevelPolicyResponse(rsp)
}

func (c *ClientWithResponses) PolicyControllerUpdateLevelPolicyWithResponse(ctx context.Context, levelType string, levelId string, policyUuid string, body PolicyControllerUpdateLevelPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyControllerUpdateLevelPolicyResponse, error) {
	rsp, err := c.PolicyControllerUpdateLevelPolicy(ctx, levelType, levelId, policyUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerUpdateLevelPolicyResponse(rsp)
}

// PolicyControllerGetEffectivePermissionsWithResponse request returning *PolicyControllerGetEffectivePermissionsResponse
func (c *ClientWithResponses) PolicyControllerGetEffectivePermissionsWithResponse(ctx context.Context, levelType string, levelId string, params *PolicyControllerGetEffectivePermissionsParams, reqEditors ...RequestEditorFn) (*PolicyControllerGetEffectivePermissionsResponse, error) {
	rsp, err := c.PolicyControllerGetEffectivePermissions(ctx, levelType, levelId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyControllerGetEffectivePermissionsResponse(rsp)
}

// ParseGroupsControllerGetGroupsResponse parses an HTTP response from a GroupsControllerGetGroupsWithResponse call
func ParseGroupsControllerGetGroupsResponse(rsp *http.Response) (*GroupsControllerGetGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerGetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupListDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsControllerCreateGroupsResponse parses an HTTP response from a GroupsControllerCreateGroupsWithResponse call
func ParseGroupsControllerCreateGroupsResponse(rsp *http.Response) (*GroupsControllerCreateGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerCreateGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []GetGroupDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGroupsControllerDeleteGroupResponse parses an HTTP response from a GroupsControllerDeleteGroupWithResponse call
func ParseGroupsControllerDeleteGroupResponse(rsp *http.Response) (*GroupsControllerDeleteGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerDeleteGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGroupsControllerEditGroupResponse parses an HTTP response from a GroupsControllerEditGroupWithResponse call
func ParseGroupsControllerEditGroupResponse(rsp *http.Response) (*GroupsControllerEditGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerEditGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePermissionsControllerRemoveGroupPermissionsResponse parses an HTTP response from a PermissionsControllerRemoveGroupPermissionsWithResponse call
func ParsePermissionsControllerRemoveGroupPermissionsResponse(rsp *http.Response) (*PermissionsControllerRemoveGroupPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsControllerRemoveGroupPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePermissionsControllerGetGroupPermissionsResponse parses an HTTP response from a PermissionsControllerGetGroupPermissionsWithResponse call
func ParsePermissionsControllerGetGroupPermissionsResponse(rsp *http.Response) (*PermissionsControllerGetGroupPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsControllerGetGroupPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsGroupDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePermissionsControllerAddGroupPermissionsResponse parses an HTTP response from a PermissionsControllerAddGroupPermissionsWithResponse call
func ParsePermissionsControllerAddGroupPermissionsResponse(rsp *http.Response) (*PermissionsControllerAddGroupPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsControllerAddGroupPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePermissionsControllerOverwriteGroupPermissionsResponse parses an HTTP response from a PermissionsControllerOverwriteGroupPermissionsWithResponse call
func ParsePermissionsControllerOverwriteGroupPermissionsResponse(rsp *http.Response) (*PermissionsControllerOverwriteGroupPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsControllerOverwriteGroupPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGroupsControllerGetUsersForGroupResponse parses an HTTP response from a GroupsControllerGetUsersForGroupWithResponse call
func ParseGroupsControllerGetUsersForGroupResponse(rsp *http.Response) (*GroupsControllerGetUsersForGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerGetUsersForGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupUserListDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersControllerGetUsersResponse parses an HTTP response from a UsersControllerGetUsersWithResponse call
func ParseUsersControllerGetUsersResponse(rsp *http.Response) (*UsersControllerGetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerGetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersControllerCreateUserForAccountResponse parses an HTTP response from a UsersControllerCreateUserForAccountWithResponse call
func ParseUsersControllerCreateUserForAccountResponse(rsp *http.Response) (*UsersControllerCreateUserForAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerCreateUserForAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersControllerRemoveUserFromAccountResponse parses an HTTP response from a UsersControllerRemoveUserFromAccountWithResponse call
func ParseUsersControllerRemoveUserFromAccountResponse(rsp *http.Response) (*UsersControllerRemoveUserFromAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerRemoveUserFromAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersControllerGetUserGroupsResponse parses an HTTP response from a UsersControllerGetUserGroupsWithResponse call
func ParseUsersControllerGetUserGroupsResponse(rsp *http.Response) (*UsersControllerGetUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerGetUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersControllerAddUserToGroupsResponse parses an HTTP response from a UsersControllerAddUserToGroupsWithResponse call
func ParseUsersControllerAddUserToGroupsResponse(rsp *http.Response) (*UsersControllerAddUserToGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerAddUserToGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersControllerRemoveUserFromGroupsResponse parses an HTTP response from a UsersControllerRemoveUserFromGroupsWithResponse call
func ParseUsersControllerRemoveUserFromGroupsResponse(rsp *http.Response) (*UsersControllerRemoveUserFromGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerRemoveUserFromGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersControllerReplaceUserGroupsResponse parses an HTTP response from a UsersControllerReplaceUserGroupsWithResponse call
func ParseUsersControllerReplaceUserGroupsResponse(rsp *http.Response) (*UsersControllerReplaceUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersControllerReplaceUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePolicyControllerDeleteLevelPolicyBindingsResponse parses an HTTP response from a PolicyControllerDeleteLevelPolicyBindingsWithResponse call
func ParsePolicyControllerDeleteLevelPolicyBindingsResponse(rsp *http.Response) (*PolicyControllerDeleteLevelPolicyBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerDeleteLevelPolicyBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetAllLevelPoliciesBindingsResponse parses an HTTP response from a PolicyControllerGetAllLevelPoliciesBindingsWithResponse call
func ParsePolicyControllerGetAllLevelPoliciesBindingsResponse(rsp *http.Response) (*PolicyControllerGetAllLevelPoliciesBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetAllLevelPoliciesBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LevelPolicyBindingDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerUpdateLevelPolicyBindingsResponse parses an HTTP response from a PolicyControllerUpdateLevelPolicyBindingsWithResponse call
func ParsePolicyControllerUpdateLevelPolicyBindingsResponse(rsp *http.Response) (*PolicyControllerUpdateLevelPolicyBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerUpdateLevelPolicyBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetLevelDescendantsPolicyBindingsResponse parses an HTTP response from a PolicyControllerGetLevelDescendantsPolicyBindingsWithResponse call
func ParsePolicyControllerGetLevelDescendantsPolicyBindingsResponse(rsp *http.Response) (*PolicyControllerGetLevelDescendantsPolicyBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetLevelDescendantsPolicyBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetPolicyUuidsBindingsResponse parses an HTTP response from a PolicyControllerGetPolicyUuidsBindingsWithResponse call
func ParsePolicyControllerGetPolicyUuidsBindingsResponse(rsp *http.Response) (*PolicyControllerGetPolicyUuidsBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetPolicyUuidsBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyUuidsWithoutMetadataDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerUpdatePolicyBindingsToGroupResponse parses an HTTP response from a PolicyControllerUpdatePolicyBindingsToGroupWithResponse call
func ParsePolicyControllerUpdatePolicyBindingsToGroupResponse(rsp *http.Response) (*PolicyControllerUpdatePolicyBindingsToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerUpdatePolicyBindingsToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerDeleteLevelPolicyBindingsForPolicyResponse parses an HTTP response from a PolicyControllerDeleteLevelPolicyBindingsForPolicyWithResponse call
func ParsePolicyControllerDeleteLevelPolicyBindingsForPolicyResponse(rsp *http.Response) (*PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerDeleteLevelPolicyBindingsForPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetLevelPolicyBindingsResponse parses an HTTP response from a PolicyControllerGetLevelPolicyBindingsWithResponse call
func ParsePolicyControllerGetLevelPolicyBindingsResponse(rsp *http.Response) (*PolicyControllerGetLevelPolicyBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetLevelPolicyBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerAppendLevelPolicyBindingsResponse parses an HTTP response from a PolicyControllerAppendLevelPolicyBindingsWithResponse call
func ParsePolicyControllerAppendLevelPolicyBindingsResponse(rsp *http.Response) (*PolicyControllerAppendLevelPolicyBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerAppendLevelPolicyBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse parses an HTTP response from a PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupWithResponse call
func ParsePolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse(rsp *http.Response) (*PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerDeleteLevelPolicyBindingsForPolicyAndGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetLevelPolicyBindingsForGroupResponse parses an HTTP response from a PolicyControllerGetLevelPolicyBindingsForGroupWithResponse call
func ParsePolicyControllerGetLevelPolicyBindingsForGroupResponse(rsp *http.Response) (*PolicyControllerGetLevelPolicyBindingsForGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetLevelPolicyBindingsForGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerAppendParticularGroupBindingResponse parses an HTTP response from a PolicyControllerAppendParticularGroupBindingWithResponse call
func ParsePolicyControllerAppendParticularGroupBindingResponse(rsp *http.Response) (*PolicyControllerAppendParticularGroupBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerAppendParticularGroupBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetLevelPoliciesResponse parses an HTTP response from a PolicyControllerGetLevelPoliciesWithResponse call
func ParsePolicyControllerGetLevelPoliciesResponse(rsp *http.Response) (*PolicyControllerGetLevelPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetLevelPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyDtoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerCreateLevelPolicyResponse parses an HTTP response from a PolicyControllerCreateLevelPolicyWithResponse call
func ParsePolicyControllerCreateLevelPolicyResponse(rsp *http.Response) (*PolicyControllerCreateLevelPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerCreateLevelPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LevelPolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetPolicyOverviewListResponse parses an HTTP response from a PolicyControllerGetPolicyOverviewListWithResponse call
func ParsePolicyControllerGetPolicyOverviewListResponse(rsp *http.Response) (*PolicyControllerGetPolicyOverviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetPolicyOverviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyOverviewDtoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerValidateNewLevelPolicyResponse parses an HTTP response from a PolicyControllerValidateNewLevelPolicyWithResponse call
func ParsePolicyControllerValidateNewLevelPolicyResponse(rsp *http.Response) (*PolicyControllerValidateNewLevelPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerValidateNewLevelPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerValidateLevelPolicyResponse parses an HTTP response from a PolicyControllerValidateLevelPolicyWithResponse call
func ParsePolicyControllerValidateLevelPolicyResponse(rsp *http.Response) (*PolicyControllerValidateLevelPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerValidateLevelPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerDeleteLevelPolicyResponse parses an HTTP response from a PolicyControllerDeleteLevelPolicyWithResponse call
func ParsePolicyControllerDeleteLevelPolicyResponse(rsp *http.Response) (*PolicyControllerDeleteLevelPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerDeleteLevelPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetLevelPolicyResponse parses an HTTP response from a PolicyControllerGetLevelPolicyWithResponse call
func ParsePolicyControllerGetLevelPolicyResponse(rsp *http.Response) (*PolicyControllerGetLevelPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetLevelPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LevelPolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePolicyControllerUpdateLevelPolicyResponse parses an HTTP response from a PolicyControllerUpdateLevelPolicyWithResponse call
func ParsePolicyControllerUpdateLevelPolicyResponse(rsp *http.Response) (*PolicyControllerUpdateLevelPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerUpdateLevelPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LevelPolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePolicyControllerGetEffectivePermissionsResponse parses an HTTP response from a PolicyControllerGetEffectivePermissionsWithResponse call
func ParsePolicyControllerGetEffectivePermissionsResponse(rsp *http.Response) (*PolicyControllerGetEffectivePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyControllerGetEffectivePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EffectivePermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
